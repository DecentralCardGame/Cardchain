// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/cardchain/set_with_artwork.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SetWithArtwork struct {
	Set     *Set   `protobuf:"bytes,1,opt,name=set,proto3" json:"set,omitempty"`
	Artwork []byte `protobuf:"bytes,2,opt,name=artwork,proto3" json:"artwork,omitempty"`
}

func (m *SetWithArtwork) Reset()         { *m = SetWithArtwork{} }
func (m *SetWithArtwork) String() string { return proto.CompactTextString(m) }
func (*SetWithArtwork) ProtoMessage()    {}
func (*SetWithArtwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1aba62f65953858, []int{0}
}
func (m *SetWithArtwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetWithArtwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetWithArtwork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetWithArtwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetWithArtwork.Merge(m, src)
}
func (m *SetWithArtwork) XXX_Size() int {
	return m.Size()
}
func (m *SetWithArtwork) XXX_DiscardUnknown() {
	xxx_messageInfo_SetWithArtwork.DiscardUnknown(m)
}

var xxx_messageInfo_SetWithArtwork proto.InternalMessageInfo

func (m *SetWithArtwork) GetSet() *Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *SetWithArtwork) GetArtwork() []byte {
	if m != nil {
		return m.Artwork
	}
	return nil
}

func init() {
	proto.RegisterType((*SetWithArtwork)(nil), "cardchain.cardchain.SetWithArtwork")
}

func init() {
	proto.RegisterFile("cardchain/cardchain/set_with_artwork.proto", fileDescriptor_e1aba62f65953858)
}

var fileDescriptor_e1aba62f65953858 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0x4e, 0x2c, 0x4a,
	0x49, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x47, 0xb0, 0x8a, 0x53, 0x4b, 0xe2, 0xcb, 0x33, 0x4b, 0x32,
	0xe2, 0x13, 0x8b, 0x4a, 0xca, 0xf3, 0x8b, 0xb2, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84,
	0xe1, 0x2a, 0xf4, 0xe0, 0x2c, 0x29, 0x59, 0x1c, 0x06, 0x40, 0xf4, 0x28, 0x85, 0x71, 0xf1, 0x05,
	0xa7, 0x96, 0x84, 0x67, 0x96, 0x64, 0x38, 0x42, 0xcc, 0x12, 0xd2, 0xe2, 0x62, 0x2e, 0x4e, 0x2d,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0x92, 0xd0, 0xc3, 0x62, 0xa6, 0x5e, 0x70, 0x6a, 0x49,
	0x10, 0x48, 0x91, 0x90, 0x04, 0x17, 0x3b, 0xd4, 0x09, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41,
	0x30, 0xae, 0x53, 0xd0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x59, 0xa4,
	0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xbb, 0xa4, 0x26, 0xa7, 0xe6, 0x95,
	0x14, 0x25, 0xe6, 0x38, 0x27, 0x16, 0xa5, 0xb8, 0x27, 0xe6, 0xa6, 0x22, 0xb9, 0xb1, 0x02, 0x89,
	0x5d, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x76, 0xb2, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x04, 0xf7, 0x03, 0x96, 0x14, 0x01, 0x00, 0x00,
}

func (m *SetWithArtwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetWithArtwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetWithArtwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Artwork) > 0 {
		i -= len(m.Artwork)
		copy(dAtA[i:], m.Artwork)
		i = encodeVarintSetWithArtwork(dAtA, i, uint64(len(m.Artwork)))
		i--
		dAtA[i] = 0x12
	}
	if m.Set != nil {
		{
			size, err := m.Set.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSetWithArtwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSetWithArtwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovSetWithArtwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetWithArtwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovSetWithArtwork(uint64(l))
	}
	l = len(m.Artwork)
	if l > 0 {
		n += 1 + l + sovSetWithArtwork(uint64(l))
	}
	return n
}

func sovSetWithArtwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSetWithArtwork(x uint64) (n int) {
	return sovSetWithArtwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetWithArtwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSetWithArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetWithArtwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetWithArtwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetWithArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSetWithArtwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSetWithArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Set == nil {
				m.Set = &Set{}
			}
			if err := m.Set.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artwork", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetWithArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSetWithArtwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSetWithArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artwork = append(m.Artwork[:0], dAtA[iNdEx:postIndex]...)
			if m.Artwork == nil {
				m.Artwork = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSetWithArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSetWithArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSetWithArtwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSetWithArtwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSetWithArtwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSetWithArtwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSetWithArtwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSetWithArtwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSetWithArtwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSetWithArtwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSetWithArtwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSetWithArtwork = fmt.Errorf("proto: unexpected end of group")
)
