// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/user.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CouncilStatus int32

const (
	CouncilStatus_available      CouncilStatus = 0
	CouncilStatus_unavailable    CouncilStatus = 1
	CouncilStatus_openCouncil    CouncilStatus = 2
	CouncilStatus_startedCouncil CouncilStatus = 3
)

var CouncilStatus_name = map[int32]string{
	0: "available",
	1: "unavailable",
	2: "openCouncil",
	3: "startedCouncil",
}

var CouncilStatus_value = map[string]int32{
	"available":      0,
	"unavailable":    1,
	"openCouncil":    2,
	"startedCouncil": 3,
}

func (x CouncilStatus) String() string {
	return proto.EnumName(CouncilStatus_name, int32(x))
}

func (CouncilStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b717f08f48166281, []int{0}
}

type AirDrop int32

const (
	AirDrop_play   AirDrop = 0
	AirDrop_vote   AirDrop = 1
	AirDrop_create AirDrop = 2
	AirDrop_buy    AirDrop = 3
)

var AirDrop_name = map[int32]string{
	0: "play",
	1: "vote",
	2: "create",
	3: "buy",
}

var AirDrop_value = map[string]int32{
	"play":   0,
	"vote":   1,
	"create": 2,
	"buy":    3,
}

func (x AirDrop) String() string {
	return proto.EnumName(AirDrop_name, int32(x))
}

func (AirDrop) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b717f08f48166281, []int{1}
}

type User struct {
	Alias            string        `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	OwnedCardSchemes []uint64      `protobuf:"varint,2,rep,packed,name=ownedCardSchemes,proto3" json:"ownedCardSchemes,omitempty"`
	OwnedPrototypes  []uint64      `protobuf:"varint,3,rep,packed,name=ownedPrototypes,proto3" json:"ownedPrototypes,omitempty"`
	Cards            []uint64      `protobuf:"varint,4,rep,packed,name=cards,proto3" json:"cards,omitempty"`
	VoteRights       []*VoteRight  `protobuf:"bytes,5,rep,name=voteRights,proto3" json:"voteRights,omitempty"`
	CouncilStatus    CouncilStatus `protobuf:"varint,6,opt,name=CouncilStatus,proto3,enum=DecentralCardGame.cardchain.cardchain.CouncilStatus" json:"CouncilStatus,omitempty"`
	ReportMatches    bool          `protobuf:"varint,7,opt,name=ReportMatches,proto3" json:"ReportMatches,omitempty"`
	ProfileCard      uint64        `protobuf:"varint,8,opt,name=profileCard,proto3" json:"profileCard,omitempty"`
	AirDrops         *AirDrops     `protobuf:"bytes,9,opt,name=airDrops,proto3" json:"airDrops,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_b717f08f48166281, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *User) GetOwnedCardSchemes() []uint64 {
	if m != nil {
		return m.OwnedCardSchemes
	}
	return nil
}

func (m *User) GetOwnedPrototypes() []uint64 {
	if m != nil {
		return m.OwnedPrototypes
	}
	return nil
}

func (m *User) GetCards() []uint64 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *User) GetVoteRights() []*VoteRight {
	if m != nil {
		return m.VoteRights
	}
	return nil
}

func (m *User) GetCouncilStatus() CouncilStatus {
	if m != nil {
		return m.CouncilStatus
	}
	return CouncilStatus_available
}

func (m *User) GetReportMatches() bool {
	if m != nil {
		return m.ReportMatches
	}
	return false
}

func (m *User) GetProfileCard() uint64 {
	if m != nil {
		return m.ProfileCard
	}
	return 0
}

func (m *User) GetAirDrops() *AirDrops {
	if m != nil {
		return m.AirDrops
	}
	return nil
}

type AirDrops struct {
	Vote   bool `protobuf:"varint,1,opt,name=vote,proto3" json:"vote,omitempty"`
	Create bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Buy    bool `protobuf:"varint,3,opt,name=buy,proto3" json:"buy,omitempty"`
	Play   bool `protobuf:"varint,4,opt,name=play,proto3" json:"play,omitempty"`
}

func (m *AirDrops) Reset()         { *m = AirDrops{} }
func (m *AirDrops) String() string { return proto.CompactTextString(m) }
func (*AirDrops) ProtoMessage()    {}
func (*AirDrops) Descriptor() ([]byte, []int) {
	return fileDescriptor_b717f08f48166281, []int{1}
}
func (m *AirDrops) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirDrops) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirDrops.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirDrops) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirDrops.Merge(m, src)
}
func (m *AirDrops) XXX_Size() int {
	return m.Size()
}
func (m *AirDrops) XXX_DiscardUnknown() {
	xxx_messageInfo_AirDrops.DiscardUnknown(m)
}

var xxx_messageInfo_AirDrops proto.InternalMessageInfo

func (m *AirDrops) GetVote() bool {
	if m != nil {
		return m.Vote
	}
	return false
}

func (m *AirDrops) GetCreate() bool {
	if m != nil {
		return m.Create
	}
	return false
}

func (m *AirDrops) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

func (m *AirDrops) GetPlay() bool {
	if m != nil {
		return m.Play
	}
	return false
}

func init() {
	proto.RegisterEnum("DecentralCardGame.cardchain.cardchain.CouncilStatus", CouncilStatus_name, CouncilStatus_value)
	proto.RegisterEnum("DecentralCardGame.cardchain.cardchain.AirDrop", AirDrop_name, AirDrop_value)
	proto.RegisterType((*User)(nil), "DecentralCardGame.cardchain.cardchain.User")
	proto.RegisterType((*AirDrops)(nil), "DecentralCardGame.cardchain.cardchain.AirDrops")
}

func init() { proto.RegisterFile("cardchain/user.proto", fileDescriptor_b717f08f48166281) }

var fileDescriptor_b717f08f48166281 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0xbd, 0x96, 0x12, 0xcb, 0x63, 0x9c, 0x88, 0x21, 0x94, 0x25, 0x07, 0x21, 0x42, 0x0b,
	0xc2, 0x07, 0xbb, 0xb8, 0x3d, 0xf4, 0xda, 0x3a, 0xd0, 0x43, 0x29, 0x84, 0x4d, 0xdb, 0x43, 0x28,
	0x94, 0xb5, 0xbc, 0x8d, 0x04, 0xb2, 0x56, 0xec, 0xae, 0xd2, 0xfa, 0x2d, 0xfa, 0x58, 0x85, 0x5e,
	0x72, 0xec, 0xb1, 0xd8, 0x2f, 0x52, 0x76, 0xe5, 0x3f, 0x71, 0x72, 0xf1, 0x6d, 0xf6, 0xa7, 0xfd,
	0xbe, 0xf9, 0x34, 0xd2, 0xc0, 0x59, 0xca, 0xd5, 0x2c, 0xcd, 0x78, 0x5e, 0x8e, 0x6a, 0x2d, 0xd4,
	0xb0, 0x52, 0xd2, 0x48, 0x7c, 0x71, 0x29, 0x52, 0x51, 0x1a, 0xc5, 0x8b, 0x09, 0x57, 0xb3, 0xf7,
	0x7c, 0x2e, 0x86, 0xdb, 0x7b, 0xbb, 0xea, 0xfc, 0x7c, 0x27, 0xbe, 0x93, 0x46, 0x7c, 0x53, 0xf9,
	0x6d, 0x66, 0x1a, 0x8b, 0x8b, 0x3f, 0x1e, 0xf8, 0x9f, 0xb5, 0x50, 0x78, 0x06, 0x47, 0xbc, 0xc8,
	0xb9, 0xa6, 0x24, 0x26, 0x49, 0x97, 0x35, 0x07, 0x1c, 0x40, 0x28, 0x7f, 0x94, 0x62, 0x66, 0xfd,
	0xaf, 0xd3, 0x4c, 0xcc, 0x85, 0xa6, 0xed, 0xd8, 0x4b, 0x7c, 0xf6, 0x84, 0x63, 0x02, 0xa7, 0x8e,
	0x5d, 0x59, 0x63, 0xb3, 0xa8, 0x84, 0xa6, 0x9e, 0xbb, 0xfa, 0x18, 0xdb, 0x5e, 0x36, 0x92, 0xa6,
	0xbe, 0x7b, 0xde, 0x1c, 0xf0, 0x0a, 0xc0, 0xc6, 0x63, 0x36, 0x9d, 0xa6, 0x47, 0xb1, 0x97, 0xf4,
	0xc6, 0x2f, 0x87, 0x07, 0xbd, 0xe2, 0xf0, 0xcb, 0x46, 0xc8, 0x1e, 0x78, 0xe0, 0x0d, 0xf4, 0x27,
	0xb2, 0x2e, 0xd3, 0xbc, 0xb8, 0x36, 0xdc, 0xd4, 0x9a, 0x1e, 0xc7, 0x24, 0x39, 0x19, 0xbf, 0x3e,
	0xd0, 0x74, 0x4f, 0xcb, 0xf6, 0xad, 0xf0, 0x39, 0xf4, 0x99, 0xa8, 0xa4, 0x32, 0x1f, 0xb9, 0x49,
	0x33, 0xa1, 0x69, 0x27, 0x26, 0x49, 0xc0, 0xf6, 0x21, 0xc6, 0xd0, 0xab, 0x94, 0xfc, 0x9e, 0x17,
	0xc2, 0x76, 0xa2, 0x41, 0x4c, 0x12, 0x9f, 0x3d, 0x44, 0xf8, 0x01, 0x02, 0x9e, 0xab, 0x4b, 0x25,
	0x2b, 0x4d, 0xbb, 0x31, 0x49, 0x7a, 0xe3, 0xd1, 0x81, 0xf1, 0xde, 0xae, 0x65, 0x6c, 0x6b, 0x70,
	0xf1, 0x15, 0x82, 0x0d, 0x45, 0x04, 0xdf, 0x8e, 0xc2, 0x7d, 0xcf, 0x80, 0xb9, 0x1a, 0x9f, 0xc1,
	0x71, 0xaa, 0x04, 0x37, 0x82, 0xb6, 0x1d, 0x5d, 0x9f, 0x30, 0x04, 0x6f, 0x5a, 0x2f, 0xa8, 0xe7,
	0xa0, 0x2d, 0xad, 0xba, 0x2a, 0xf8, 0x82, 0xfa, 0x8d, 0xda, 0xd6, 0x83, 0x4f, 0x8f, 0xc6, 0x89,
	0x7d, 0xe8, 0xf2, 0x3b, 0x9e, 0x17, 0x7c, 0x5a, 0x88, 0xb0, 0x85, 0xa7, 0xd0, 0xab, 0xcb, 0x1d,
	0x20, 0x16, 0xc8, 0x4a, 0x94, 0x6b, 0x51, 0xd8, 0x46, 0x84, 0x13, 0x6d, 0xb8, 0x32, 0x62, 0xb6,
	0x61, 0xde, 0x60, 0x0c, 0x9d, 0x75, 0x66, 0x0c, 0x9a, 0xa6, 0x61, 0xcb, 0x56, 0x36, 0x70, 0x48,
	0x10, 0x36, 0x91, 0xc3, 0x36, 0x76, 0x5c, 0xcc, 0xd0, 0x7b, 0xc7, 0x7e, 0x2f, 0x23, 0x72, 0xbf,
	0x8c, 0xc8, 0xbf, 0x65, 0x44, 0x7e, 0xad, 0xa2, 0xd6, 0xfd, 0x2a, 0x6a, 0xfd, 0x5d, 0x45, 0xad,
	0x9b, 0x37, 0xb7, 0xb9, 0xc9, 0xea, 0xe9, 0x30, 0x95, 0xf3, 0xd1, 0x93, 0x31, 0x8e, 0x26, 0xdb,
	0x45, 0xf8, 0x39, 0xda, 0x2d, 0x85, 0xfb, 0x29, 0xa7, 0xc7, 0x6e, 0x21, 0x5e, 0xfd, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0xa7, 0x89, 0x01, 0xa6, 0x6b, 0x03, 0x00, 0x00,
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AirDrops != nil {
		{
			size, err := m.AirDrops.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ProfileCard != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ProfileCard))
		i--
		dAtA[i] = 0x40
	}
	if m.ReportMatches {
		i--
		if m.ReportMatches {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CouncilStatus != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CouncilStatus))
		i--
		dAtA[i] = 0x30
	}
	if len(m.VoteRights) > 0 {
		for iNdEx := len(m.VoteRights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteRights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Cards) > 0 {
		dAtA3 := make([]byte, len(m.Cards)*10)
		var j2 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintUser(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnedPrototypes) > 0 {
		dAtA5 := make([]byte, len(m.OwnedPrototypes)*10)
		var j4 int
		for _, num := range m.OwnedPrototypes {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintUser(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnedCardSchemes) > 0 {
		dAtA7 := make([]byte, len(m.OwnedCardSchemes)*10)
		var j6 int
		for _, num := range m.OwnedCardSchemes {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintUser(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AirDrops) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirDrops) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirDrops) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Play {
		i--
		if m.Play {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Buy {
		i--
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Create {
		i--
		if m.Create {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Vote {
		i--
		if m.Vote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.OwnedCardSchemes) > 0 {
		l = 0
		for _, e := range m.OwnedCardSchemes {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if len(m.OwnedPrototypes) > 0 {
		l = 0
		for _, e := range m.OwnedPrototypes {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if len(m.VoteRights) > 0 {
		for _, e := range m.VoteRights {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.CouncilStatus != 0 {
		n += 1 + sovUser(uint64(m.CouncilStatus))
	}
	if m.ReportMatches {
		n += 2
	}
	if m.ProfileCard != 0 {
		n += 1 + sovUser(uint64(m.ProfileCard))
	}
	if m.AirDrops != nil {
		l = m.AirDrops.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *AirDrops) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote {
		n += 2
	}
	if m.Create {
		n += 2
	}
	if m.Buy {
		n += 2
	}
	if m.Play {
		n += 2
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OwnedCardSchemes = append(m.OwnedCardSchemes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OwnedCardSchemes) == 0 {
					m.OwnedCardSchemes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OwnedCardSchemes = append(m.OwnedCardSchemes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnedCardSchemes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OwnedPrototypes = append(m.OwnedPrototypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OwnedPrototypes) == 0 {
					m.OwnedPrototypes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OwnedPrototypes = append(m.OwnedPrototypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnedPrototypes", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cards) == 0 {
					m.Cards = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteRights = append(m.VoteRights, &VoteRight{})
			if err := m.VoteRights[len(m.VoteRights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouncilStatus", wireType)
			}
			m.CouncilStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouncilStatus |= CouncilStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportMatches", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReportMatches = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileCard", wireType)
			}
			m.ProfileCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileCard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirDrops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AirDrops == nil {
				m.AirDrops = &AirDrops{}
			}
			if err := m.AirDrops.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirDrops) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirDrops: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirDrops: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vote = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Create", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Create = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Play", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Play = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
