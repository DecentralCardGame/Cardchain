// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/card_no_b_64.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CardNoB64 struct {
	Owner              string                                  `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Content            string                                  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Image              string                                  `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Notes              string                                  `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	FullArt            bool                                    `protobuf:"varint,5,opt,name=fullArt,proto3" json:"fullArt,omitempty"`
	Status             string                                  `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	VotePool           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=votePool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"votePool"`
	FairEnoughVotes    uint64                                  `protobuf:"varint,8,opt,name=fairEnoughVotes,proto3" json:"fairEnoughVotes,omitempty"`
	OverpoweredVotes   uint64                                  `protobuf:"varint,9,opt,name=overpoweredVotes,proto3" json:"overpoweredVotes,omitempty"`
	UnderpoweredVotes  uint64                                  `protobuf:"varint,10,opt,name=underpoweredVotes,proto3" json:"underpoweredVotes,omitempty"`
	InappropriateVotes uint64                                  `protobuf:"varint,11,opt,name=inappropriateVotes,proto3" json:"inappropriateVotes,omitempty"`
	Nerflevel          int64                                   `protobuf:"varint,12,opt,name=nerflevel,proto3" json:"nerflevel,omitempty"`
}

func (m *CardNoB64) Reset()         { *m = CardNoB64{} }
func (m *CardNoB64) String() string { return proto.CompactTextString(m) }
func (*CardNoB64) ProtoMessage()    {}
func (*CardNoB64) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe11f6798b76ce6, []int{0}
}
func (m *CardNoB64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardNoB64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardNoB64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardNoB64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardNoB64.Merge(m, src)
}
func (m *CardNoB64) XXX_Size() int {
	return m.Size()
}
func (m *CardNoB64) XXX_DiscardUnknown() {
	xxx_messageInfo_CardNoB64.DiscardUnknown(m)
}

var xxx_messageInfo_CardNoB64 proto.InternalMessageInfo

func (m *CardNoB64) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CardNoB64) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CardNoB64) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CardNoB64) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *CardNoB64) GetFullArt() bool {
	if m != nil {
		return m.FullArt
	}
	return false
}

func (m *CardNoB64) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CardNoB64) GetFairEnoughVotes() uint64 {
	if m != nil {
		return m.FairEnoughVotes
	}
	return 0
}

func (m *CardNoB64) GetOverpoweredVotes() uint64 {
	if m != nil {
		return m.OverpoweredVotes
	}
	return 0
}

func (m *CardNoB64) GetUnderpoweredVotes() uint64 {
	if m != nil {
		return m.UnderpoweredVotes
	}
	return 0
}

func (m *CardNoB64) GetInappropriateVotes() uint64 {
	if m != nil {
		return m.InappropriateVotes
	}
	return 0
}

func (m *CardNoB64) GetNerflevel() int64 {
	if m != nil {
		return m.Nerflevel
	}
	return 0
}

func init() {
	proto.RegisterType((*CardNoB64)(nil), "DecentralCardGame.cardchain.cardchain.CardNoB64")
}

func init() { proto.RegisterFile("cardchain/card_no_b_64.proto", fileDescriptor_bfe11f6798b76ce6) }

var fileDescriptor_bfe11f6798b76ce6 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0xca, 0xd3, 0x40,
	0x14, 0xc5, 0x33, 0xf6, 0xfb, 0xda, 0x66, 0x14, 0xd4, 0xa1, 0xc8, 0x20, 0x25, 0x0d, 0x82, 0x18,
	0x44, 0x93, 0x85, 0xa5, 0xb8, 0xb5, 0x55, 0x5c, 0x08, 0x22, 0x59, 0xb8, 0x70, 0x53, 0xa6, 0xc9,
	0x6d, 0x1a, 0x4c, 0xe6, 0x86, 0xc9, 0xa4, 0xd5, 0xb7, 0xf0, 0x71, 0x7c, 0x84, 0x2e, 0xbb, 0x14,
	0x17, 0x45, 0xda, 0x17, 0x91, 0x4c, 0xfa, 0x47, 0x5a, 0x57, 0xb9, 0xe7, 0xdc, 0xdf, 0x19, 0xc2,
	0xe5, 0xd0, 0x7e, 0x24, 0x54, 0x1c, 0x2d, 0x44, 0x2a, 0x83, 0x7a, 0x9a, 0x4a, 0x9c, 0xce, 0xa6,
	0xa3, 0xa1, 0x5f, 0x28, 0xd4, 0xc8, 0x9e, 0xbe, 0x85, 0x08, 0xa4, 0x56, 0x22, 0x9b, 0x08, 0x15,
	0xbf, 0x17, 0x39, 0xf8, 0x27, 0xfe, 0x3c, 0x3d, 0xee, 0x25, 0x98, 0xa0, 0x49, 0x04, 0xf5, 0xd4,
	0x84, 0x9f, 0xfc, 0x6c, 0x51, 0xbb, 0x8e, 0x7d, 0xc4, 0xf1, 0x68, 0xc8, 0x7a, 0xf4, 0x16, 0x57,
	0x12, 0x14, 0x27, 0x2e, 0xf1, 0xec, 0xb0, 0x11, 0x8c, 0xd3, 0x4e, 0x84, 0x52, 0x83, 0xd4, 0xfc,
	0x8e, 0xf1, 0x8f, 0xb2, 0xe6, 0xd3, 0x5c, 0x24, 0xc0, 0x5b, 0x0d, 0x6f, 0x44, 0xed, 0x4a, 0xd4,
	0x50, 0xf2, 0x9b, 0xc6, 0x35, 0xa2, 0x7e, 0x65, 0x5e, 0x65, 0xd9, 0x1b, 0xa5, 0xf9, 0xad, 0x4b,
	0xbc, 0x6e, 0x78, 0x94, 0xec, 0x11, 0x6d, 0x97, 0x5a, 0xe8, 0xaa, 0xe4, 0x6d, 0x13, 0x38, 0x28,
	0xf6, 0x81, 0x76, 0x97, 0xa8, 0xe1, 0x13, 0x62, 0xc6, 0x3b, 0xf5, 0x66, 0x1c, 0xac, 0xb7, 0x03,
	0xeb, 0xf7, 0x76, 0xf0, 0x2c, 0x49, 0xf5, 0xa2, 0x9a, 0xf9, 0x11, 0xe6, 0x41, 0x84, 0x65, 0x8e,
	0xe5, 0xe1, 0xf3, 0xb2, 0x8c, 0xbf, 0x06, 0xfa, 0x7b, 0x01, 0xa5, 0x3f, 0xc1, 0x54, 0x86, 0xa7,
	0x07, 0x98, 0x47, 0xef, 0xcf, 0x45, 0xaa, 0xde, 0x49, 0xac, 0x92, 0xc5, 0x67, 0xf3, 0x7b, 0x5d,
	0x97, 0x78, 0x37, 0xe1, 0xa5, 0xcd, 0x9e, 0xd3, 0x07, 0xb8, 0x04, 0x55, 0xe0, 0x0a, 0x14, 0xc4,
	0x0d, 0x6a, 0x1b, 0xf4, 0xca, 0x67, 0x2f, 0xe8, 0xc3, 0x4a, 0xc6, 0x17, 0x30, 0x35, 0xf0, 0xf5,
	0x82, 0xf9, 0x94, 0xa5, 0x52, 0x14, 0x85, 0xc2, 0x42, 0xa5, 0x42, 0x43, 0x83, 0xdf, 0x35, 0xf8,
	0x7f, 0x36, 0xac, 0x4f, 0x6d, 0x09, 0x6a, 0x9e, 0xc1, 0x12, 0x32, 0x7e, 0xcf, 0x25, 0x5e, 0x2b,
	0x3c, 0x1b, 0xe3, 0x70, 0xbd, 0x73, 0xc8, 0x66, 0xe7, 0x90, 0x3f, 0x3b, 0x87, 0xfc, 0xd8, 0x3b,
	0xd6, 0x66, 0xef, 0x58, 0xbf, 0xf6, 0x8e, 0xf5, 0xe5, 0xf5, 0x3f, 0xe7, 0xb9, 0x2a, 0x47, 0x30,
	0x39, 0x95, 0xe9, 0x5b, 0x70, 0x2e, 0x96, 0x39, 0xda, 0xac, 0x6d, 0x5a, 0xf1, 0xea, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xd4, 0x57, 0x2a, 0x90, 0x72, 0x02, 0x00, 0x00,
}

func (m *CardNoB64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardNoB64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardNoB64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nerflevel != 0 {
		i = encodeVarintCardNoB_64(dAtA, i, uint64(m.Nerflevel))
		i--
		dAtA[i] = 0x60
	}
	if m.InappropriateVotes != 0 {
		i = encodeVarintCardNoB_64(dAtA, i, uint64(m.InappropriateVotes))
		i--
		dAtA[i] = 0x58
	}
	if m.UnderpoweredVotes != 0 {
		i = encodeVarintCardNoB_64(dAtA, i, uint64(m.UnderpoweredVotes))
		i--
		dAtA[i] = 0x50
	}
	if m.OverpoweredVotes != 0 {
		i = encodeVarintCardNoB_64(dAtA, i, uint64(m.OverpoweredVotes))
		i--
		dAtA[i] = 0x48
	}
	if m.FairEnoughVotes != 0 {
		i = encodeVarintCardNoB_64(dAtA, i, uint64(m.FairEnoughVotes))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.VotePool.Size()
		i -= size
		if _, err := m.VotePool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCardNoB_64(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCardNoB_64(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.FullArt {
		i--
		if m.FullArt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintCardNoB_64(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintCardNoB_64(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCardNoB_64(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCardNoB_64(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCardNoB_64(dAtA []byte, offset int, v uint64) int {
	offset -= sovCardNoB_64(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CardNoB64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCardNoB_64(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCardNoB_64(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCardNoB_64(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovCardNoB_64(uint64(l))
	}
	if m.FullArt {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCardNoB_64(uint64(l))
	}
	l = m.VotePool.Size()
	n += 1 + l + sovCardNoB_64(uint64(l))
	if m.FairEnoughVotes != 0 {
		n += 1 + sovCardNoB_64(uint64(m.FairEnoughVotes))
	}
	if m.OverpoweredVotes != 0 {
		n += 1 + sovCardNoB_64(uint64(m.OverpoweredVotes))
	}
	if m.UnderpoweredVotes != 0 {
		n += 1 + sovCardNoB_64(uint64(m.UnderpoweredVotes))
	}
	if m.InappropriateVotes != 0 {
		n += 1 + sovCardNoB_64(uint64(m.InappropriateVotes))
	}
	if m.Nerflevel != 0 {
		n += 1 + sovCardNoB_64(uint64(m.Nerflevel))
	}
	return n
}

func sovCardNoB_64(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCardNoB_64(x uint64) (n int) {
	return sovCardNoB_64(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CardNoB64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCardNoB_64
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardNoB64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardNoB64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullArt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullArt = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FairEnoughVotes", wireType)
			}
			m.FairEnoughVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FairEnoughVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverpoweredVotes", wireType)
			}
			m.OverpoweredVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverpoweredVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderpoweredVotes", wireType)
			}
			m.UnderpoweredVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnderpoweredVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InappropriateVotes", wireType)
			}
			m.InappropriateVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InappropriateVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nerflevel", wireType)
			}
			m.Nerflevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nerflevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCardNoB_64(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCardNoB_64
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCardNoB_64(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCardNoB_64
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCardNoB_64
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCardNoB_64
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCardNoB_64
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCardNoB_64
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCardNoB_64        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCardNoB_64          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCardNoB_64 = fmt.Errorf("proto: unexpected end of group")
)
