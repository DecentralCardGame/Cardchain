// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/cardchain/set.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SetStatus int32

const (
	SetStatus_design    SetStatus = 0
	SetStatus_finalized SetStatus = 1
	SetStatus_active    SetStatus = 2
	SetStatus_archived  SetStatus = 3
)

var SetStatus_name = map[int32]string{
	0: "design",
	1: "finalized",
	2: "active",
	3: "archived",
}

var SetStatus_value = map[string]int32{
	"design":    0,
	"finalized": 1,
	"active":    2,
	"archived":  3,
}

func (x SetStatus) String() string {
	return proto.EnumName(SetStatus_name, int32(x))
}

func (SetStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4433f04964645edd, []int{0}
}

type Set struct {
	Name                     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cards                    []uint64            `protobuf:"varint,2,rep,packed,name=cards,proto3" json:"cards,omitempty"`
	Artist                   string              `protobuf:"bytes,3,opt,name=artist,proto3" json:"artist,omitempty"`
	StoryWriter              string              `protobuf:"bytes,4,opt,name=storyWriter,proto3" json:"storyWriter,omitempty"`
	Contributors             []string            `protobuf:"bytes,5,rep,name=contributors,proto3" json:"contributors,omitempty"`
	Story                    string              `protobuf:"bytes,6,opt,name=story,proto3" json:"story,omitempty"`
	ArtworkId                uint64              `protobuf:"varint,7,opt,name=artworkId,proto3" json:"artworkId,omitempty"`
	Status                   SetStatus           `protobuf:"varint,8,opt,name=status,proto3,enum=cardchain.cardchain.SetStatus" json:"status,omitempty"`
	TimeStamp                int64               `protobuf:"varint,9,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	ContributorsDistribution []*AddrWithQuantity `protobuf:"bytes,10,rep,name=contributorsDistribution,proto3" json:"contributorsDistribution,omitempty"`
	Rarities                 []*InnerRarities    `protobuf:"bytes,11,rep,name=Rarities,proto3" json:"Rarities,omitempty"`
}

func (m *Set) Reset()         { *m = Set{} }
func (m *Set) String() string { return proto.CompactTextString(m) }
func (*Set) ProtoMessage()    {}
func (*Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_4433f04964645edd, []int{0}
}
func (m *Set) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Set.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Set.Merge(m, src)
}
func (m *Set) XXX_Size() int {
	return m.Size()
}
func (m *Set) XXX_DiscardUnknown() {
	xxx_messageInfo_Set.DiscardUnknown(m)
}

var xxx_messageInfo_Set proto.InternalMessageInfo

func (m *Set) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Set) GetCards() []uint64 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *Set) GetArtist() string {
	if m != nil {
		return m.Artist
	}
	return ""
}

func (m *Set) GetStoryWriter() string {
	if m != nil {
		return m.StoryWriter
	}
	return ""
}

func (m *Set) GetContributors() []string {
	if m != nil {
		return m.Contributors
	}
	return nil
}

func (m *Set) GetStory() string {
	if m != nil {
		return m.Story
	}
	return ""
}

func (m *Set) GetArtworkId() uint64 {
	if m != nil {
		return m.ArtworkId
	}
	return 0
}

func (m *Set) GetStatus() SetStatus {
	if m != nil {
		return m.Status
	}
	return SetStatus_design
}

func (m *Set) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Set) GetContributorsDistribution() []*AddrWithQuantity {
	if m != nil {
		return m.ContributorsDistribution
	}
	return nil
}

func (m *Set) GetRarities() []*InnerRarities {
	if m != nil {
		return m.Rarities
	}
	return nil
}

type InnerRarities struct {
	R []uint64 `protobuf:"varint,1,rep,packed,name=R,proto3" json:"R,omitempty"`
}

func (m *InnerRarities) Reset()         { *m = InnerRarities{} }
func (m *InnerRarities) String() string { return proto.CompactTextString(m) }
func (*InnerRarities) ProtoMessage()    {}
func (*InnerRarities) Descriptor() ([]byte, []int) {
	return fileDescriptor_4433f04964645edd, []int{1}
}
func (m *InnerRarities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InnerRarities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InnerRarities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InnerRarities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerRarities.Merge(m, src)
}
func (m *InnerRarities) XXX_Size() int {
	return m.Size()
}
func (m *InnerRarities) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerRarities.DiscardUnknown(m)
}

var xxx_messageInfo_InnerRarities proto.InternalMessageInfo

func (m *InnerRarities) GetR() []uint64 {
	if m != nil {
		return m.R
	}
	return nil
}

type AddrWithQuantity struct {
	Addr    string      `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Q       uint32      `protobuf:"varint,2,opt,name=q,proto3" json:"q,omitempty"`
	Payment *types.Coin `protobuf:"bytes,3,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (m *AddrWithQuantity) Reset()         { *m = AddrWithQuantity{} }
func (m *AddrWithQuantity) String() string { return proto.CompactTextString(m) }
func (*AddrWithQuantity) ProtoMessage()    {}
func (*AddrWithQuantity) Descriptor() ([]byte, []int) {
	return fileDescriptor_4433f04964645edd, []int{2}
}
func (m *AddrWithQuantity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddrWithQuantity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddrWithQuantity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddrWithQuantity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrWithQuantity.Merge(m, src)
}
func (m *AddrWithQuantity) XXX_Size() int {
	return m.Size()
}
func (m *AddrWithQuantity) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrWithQuantity.DiscardUnknown(m)
}

var xxx_messageInfo_AddrWithQuantity proto.InternalMessageInfo

func (m *AddrWithQuantity) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *AddrWithQuantity) GetQ() uint32 {
	if m != nil {
		return m.Q
	}
	return 0
}

func (m *AddrWithQuantity) GetPayment() *types.Coin {
	if m != nil {
		return m.Payment
	}
	return nil
}

func init() {
	proto.RegisterEnum("cardchain.cardchain.SetStatus", SetStatus_name, SetStatus_value)
	proto.RegisterType((*Set)(nil), "cardchain.cardchain.Set")
	proto.RegisterType((*InnerRarities)(nil), "cardchain.cardchain.InnerRarities")
	proto.RegisterType((*AddrWithQuantity)(nil), "cardchain.cardchain.AddrWithQuantity")
}

func init() { proto.RegisterFile("cardchain/cardchain/set.proto", fileDescriptor_4433f04964645edd) }

var fileDescriptor_4433f04964645edd = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x8d, 0xb3, 0x69, 0x9a, 0x9d, 0x24, 0x28, 0x32, 0x08, 0x19, 0x44, 0x57, 0xab, 0x48, 0x48,
	0x2b, 0x0e, 0x1b, 0x35, 0x95, 0x10, 0x27, 0x04, 0xb4, 0x12, 0xea, 0x11, 0xe7, 0x50, 0x89, 0x9b,
	0xb3, 0x36, 0x8d, 0x45, 0xd7, 0x4e, 0xed, 0x49, 0x20, 0xfc, 0x0a, 0x7e, 0x0f, 0xbf, 0x80, 0x63,
	0x8f, 0x1c, 0x51, 0xf2, 0x47, 0xd0, 0xee, 0xe6, 0xab, 0x28, 0xbd, 0xbd, 0x79, 0xf3, 0xde, 0xb3,
	0xe5, 0x19, 0xc3, 0x49, 0x26, 0x9c, 0xcc, 0x26, 0x42, 0x9b, 0xc1, 0x0e, 0x79, 0x85, 0xe9, 0xd4,
	0x59, 0xb4, 0xf4, 0xf1, 0x96, 0x4c, 0xb7, 0xe8, 0x79, 0x94, 0x59, 0x9f, 0x5b, 0x3f, 0x18, 0x0b,
	0xaf, 0x06, 0xf3, 0xd3, 0xb1, 0x42, 0x71, 0x3a, 0xc8, 0xac, 0x36, 0x95, 0xa9, 0xff, 0x2b, 0x80,
	0x60, 0xa4, 0x90, 0x52, 0x68, 0x18, 0x91, 0x2b, 0x46, 0x62, 0x92, 0x84, 0xbc, 0xc4, 0xf4, 0x09,
	0x1c, 0x15, 0x41, 0x9e, 0xd5, 0xe3, 0x20, 0x69, 0xf0, 0xaa, 0xa0, 0x4f, 0xa1, 0x29, 0x1c, 0x6a,
	0x8f, 0x2c, 0x28, 0xb5, 0xeb, 0x8a, 0xc6, 0xd0, 0xf6, 0x68, 0xdd, 0xe2, 0xca, 0x69, 0x54, 0x8e,
	0x35, 0xca, 0xe6, 0x3e, 0x45, 0xfb, 0xd0, 0xc9, 0xac, 0x41, 0xa7, 0xc7, 0x33, 0xb4, 0xce, 0xb3,
	0xa3, 0x38, 0x48, 0x42, 0x7e, 0x8f, 0x2b, 0xce, 0x2c, 0x2d, 0xac, 0x59, 0xfa, 0xab, 0x82, 0xbe,
	0x80, 0x50, 0x38, 0xfc, 0x66, 0xdd, 0xd7, 0x4b, 0xc9, 0x8e, 0x63, 0x92, 0x34, 0xf8, 0x8e, 0xa0,
	0xaf, 0xa1, 0xe9, 0x51, 0xe0, 0xcc, 0xb3, 0x56, 0x4c, 0x92, 0x47, 0xc3, 0x28, 0x3d, 0xf0, 0x12,
	0xe9, 0x48, 0xe1, 0xa8, 0x54, 0xf1, 0xb5, 0xba, 0x48, 0x45, 0x9d, 0xab, 0x11, 0x8a, 0x7c, 0xca,
	0xc2, 0x98, 0x24, 0x01, 0xdf, 0x11, 0x54, 0x00, 0xdb, 0xbf, 0xd9, 0x85, 0xf6, 0x15, 0xd6, 0xd6,
	0x30, 0x88, 0x83, 0xa4, 0x3d, 0x7c, 0x79, 0xf0, 0x9c, 0xf7, 0x52, 0xba, 0x2b, 0x8d, 0x93, 0x4f,
	0x33, 0x61, 0x50, 0xe3, 0x82, 0x3f, 0x18, 0x43, 0xdf, 0x42, 0x8b, 0x0b, 0xa7, 0x51, 0x2b, 0xcf,
	0xda, 0x65, 0x64, 0xff, 0x60, 0xe4, 0xa5, 0x31, 0xca, 0x6d, 0x94, 0x7c, 0xeb, 0xe9, 0x9f, 0x40,
	0xf7, 0x5e, 0x8b, 0x76, 0x80, 0x70, 0x46, 0xca, 0x69, 0x11, 0xde, 0xd7, 0xd0, 0xfb, 0xff, 0x32,
	0xc5, 0x9c, 0x85, 0x94, 0x6e, 0x33, 0xe7, 0x02, 0x17, 0xae, 0x5b, 0x56, 0x8f, 0x49, 0xd2, 0xe5,
	0xe4, 0x96, 0x9e, 0xc1, 0xf1, 0x54, 0x2c, 0x72, 0x65, 0xaa, 0x01, 0xb7, 0x87, 0xcf, 0xd2, 0x6a,
	0x87, 0xd2, 0x62, 0x87, 0xd2, 0xf5, 0x0e, 0xa5, 0xe7, 0x56, 0x1b, 0xbe, 0x51, 0xbe, 0x7a, 0x07,
	0xe1, 0xf6, 0x7d, 0x29, 0x40, 0x53, 0x2a, 0xaf, 0xaf, 0x4d, 0xaf, 0x46, 0xbb, 0x10, 0x7e, 0xd1,
	0x46, 0xdc, 0xe8, 0x1f, 0x4a, 0xf6, 0x48, 0xd1, 0x12, 0x19, 0xea, 0xb9, 0xea, 0xd5, 0x69, 0x07,
	0x5a, 0xc2, 0x65, 0x13, 0x3d, 0x57, 0xb2, 0x17, 0x7c, 0xe0, 0xbf, 0x97, 0x11, 0xb9, 0x5b, 0x46,
	0xe4, 0xef, 0x32, 0x22, 0x3f, 0x57, 0x51, 0xed, 0x6e, 0x15, 0xd5, 0xfe, 0xac, 0xa2, 0xda, 0xe7,
	0x37, 0xd7, 0x1a, 0x27, 0xb3, 0x71, 0x9a, 0xd9, 0x7c, 0x70, 0xa1, 0x32, 0x65, 0xd0, 0x89, 0x9b,
	0x73, 0xe1, 0xe4, 0x47, 0x91, 0xab, 0xbd, 0x9f, 0xf0, 0x7d, 0x0f, 0xe3, 0x62, 0xaa, 0xfc, 0xb8,
	0x59, 0xee, 0xf8, 0xd9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xc2, 0x6b, 0xe5, 0x39, 0x03,
	0x00, 0x00,
}

func (m *Set) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Set) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Set) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rarities) > 0 {
		for iNdEx := len(m.Rarities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rarities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ContributorsDistribution) > 0 {
		for iNdEx := len(m.ContributorsDistribution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContributorsDistribution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.TimeStamp != 0 {
		i = encodeVarintSet(dAtA, i, uint64(m.TimeStamp))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintSet(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.ArtworkId != 0 {
		i = encodeVarintSet(dAtA, i, uint64(m.ArtworkId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Story) > 0 {
		i -= len(m.Story)
		copy(dAtA[i:], m.Story)
		i = encodeVarintSet(dAtA, i, uint64(len(m.Story)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Contributors) > 0 {
		for iNdEx := len(m.Contributors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contributors[iNdEx])
			copy(dAtA[i:], m.Contributors[iNdEx])
			i = encodeVarintSet(dAtA, i, uint64(len(m.Contributors[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.StoryWriter) > 0 {
		i -= len(m.StoryWriter)
		copy(dAtA[i:], m.StoryWriter)
		i = encodeVarintSet(dAtA, i, uint64(len(m.StoryWriter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Artist) > 0 {
		i -= len(m.Artist)
		copy(dAtA[i:], m.Artist)
		i = encodeVarintSet(dAtA, i, uint64(len(m.Artist)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cards) > 0 {
		dAtA2 := make([]byte, len(m.Cards)*10)
		var j1 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSet(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InnerRarities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerRarities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InnerRarities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.R) > 0 {
		dAtA4 := make([]byte, len(m.R)*10)
		var j3 int
		for _, num := range m.R {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSet(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddrWithQuantity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrWithQuantity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddrWithQuantity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Q != 0 {
		i = encodeVarintSet(dAtA, i, uint64(m.Q))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintSet(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSet(dAtA []byte, offset int, v uint64) int {
	offset -= sovSet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Set) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSet(uint64(l))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovSet(uint64(e))
		}
		n += 1 + sovSet(uint64(l)) + l
	}
	l = len(m.Artist)
	if l > 0 {
		n += 1 + l + sovSet(uint64(l))
	}
	l = len(m.StoryWriter)
	if l > 0 {
		n += 1 + l + sovSet(uint64(l))
	}
	if len(m.Contributors) > 0 {
		for _, s := range m.Contributors {
			l = len(s)
			n += 1 + l + sovSet(uint64(l))
		}
	}
	l = len(m.Story)
	if l > 0 {
		n += 1 + l + sovSet(uint64(l))
	}
	if m.ArtworkId != 0 {
		n += 1 + sovSet(uint64(m.ArtworkId))
	}
	if m.Status != 0 {
		n += 1 + sovSet(uint64(m.Status))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovSet(uint64(m.TimeStamp))
	}
	if len(m.ContributorsDistribution) > 0 {
		for _, e := range m.ContributorsDistribution {
			l = e.Size()
			n += 1 + l + sovSet(uint64(l))
		}
	}
	if len(m.Rarities) > 0 {
		for _, e := range m.Rarities {
			l = e.Size()
			n += 1 + l + sovSet(uint64(l))
		}
	}
	return n
}

func (m *InnerRarities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.R) > 0 {
		l = 0
		for _, e := range m.R {
			l += sovSet(uint64(e))
		}
		n += 1 + sovSet(uint64(l)) + l
	}
	return n
}

func (m *AddrWithQuantity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovSet(uint64(l))
	}
	if m.Q != 0 {
		n += 1 + sovSet(uint64(m.Q))
	}
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovSet(uint64(l))
	}
	return n
}

func sovSet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSet(x uint64) (n int) {
	return sovSet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Set) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Set: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Set: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSet
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSet
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cards) == 0 {
					m.Cards = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoryWriter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoryWriter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contributors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contributors = append(m.Contributors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Story", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Story = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtworkId", wireType)
			}
			m.ArtworkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArtworkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SetStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributorsDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContributorsDistribution = append(m.ContributorsDistribution, &AddrWithQuantity{})
			if err := m.ContributorsDistribution[len(m.ContributorsDistribution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rarities = append(m.Rarities, &InnerRarities{})
			if err := m.Rarities[len(m.Rarities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InnerRarities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerRarities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerRarities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.R = append(m.R, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSet
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSet
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.R) == 0 {
					m.R = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.R = append(m.R, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrWithQuantity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrWithQuantity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrWithQuantity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			m.Q = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Q |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &types.Coin{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSet = fmt.Errorf("proto: unexpected end of group")
)
