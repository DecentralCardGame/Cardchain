// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/cardchain/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	VotingRightsExpirationTime      int64                                   `protobuf:"varint,1,opt,name=votingRightsExpirationTime,proto3" json:"votingRightsExpirationTime,omitempty"`
	CollectionSize                  uint64                                  `protobuf:"varint,2,opt,name=collectionSize,proto3" json:"collectionSize,omitempty"`
	CollectionPrice                 github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=collectionPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"collectionPrice"`
	ActiveCollectionsAmount         uint64                                  `protobuf:"varint,4,opt,name=activeCollectionsAmount,proto3" json:"activeCollectionsAmount,omitempty"`
	CollectionCreationFee           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=collectionCreationFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"collectionCreationFee"`
	CollateralDeposit               github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=collateralDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"collateralDeposit"`
	WinnerReward                    int64                                   `protobuf:"varint,7,opt,name=winnerReward,proto3" json:"winnerReward,omitempty"`
	HourlyFaucet                    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,9,opt,name=hourlyFaucet,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"hourlyFaucet"`
	InflationRate                   string                                  `protobuf:"bytes,10,opt,name=inflationRate,proto3" json:"inflationRate,omitempty"`
	RaresPerPack                    uint64                                  `protobuf:"varint,11,opt,name=raresPerPack,proto3" json:"raresPerPack,omitempty"`
	CommonsPerPack                  uint64                                  `protobuf:"varint,12,opt,name=commonsPerPack,proto3" json:"commonsPerPack,omitempty"`
	UnCommonsPerPack                uint64                                  `protobuf:"varint,13,opt,name=unCommonsPerPack,proto3" json:"unCommonsPerPack,omitempty"`
	TrialPeriod                     uint64                                  `protobuf:"varint,14,opt,name=trialPeriod,proto3" json:"trialPeriod,omitempty"`
	GameVoteRatio                   int64                                   `protobuf:"varint,15,opt,name=gameVoteRatio,proto3" json:"gameVoteRatio,omitempty"`
	CardAuctionPriceReductionPeriod int64                                   `protobuf:"varint,16,opt,name=cardAuctionPriceReductionPeriod,proto3" json:"cardAuctionPriceReductionPeriod,omitempty"`
	AirDropValue                    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,17,opt,name=airDropValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"airDropValue"`
	AirDropMaxBlockHeight           int64                                   `protobuf:"varint,18,opt,name=airDropMaxBlockHeight,proto3" json:"airDropMaxBlockHeight,omitempty"`
	TrialVoteReward                 github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,19,opt,name=trialVoteReward,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"trialVoteReward"`
	VotePoolFraction                int64                                   `protobuf:"varint,20,opt,name=votePoolFraction,proto3" json:"votePoolFraction,omitempty"`
	VotingRewardCap                 int64                                   `protobuf:"varint,8,opt,name=votingRewardCap,proto3" json:"votingRewardCap,omitempty"`
	MatchWorkerDelay                uint64                                  `protobuf:"varint,21,opt,name=matchWorkerDelay,proto3" json:"matchWorkerDelay,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8843e481ee664a23, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVotingRightsExpirationTime() int64 {
	if m != nil {
		return m.VotingRightsExpirationTime
	}
	return 0
}

func (m *Params) GetCollectionSize() uint64 {
	if m != nil {
		return m.CollectionSize
	}
	return 0
}

func (m *Params) GetActiveCollectionsAmount() uint64 {
	if m != nil {
		return m.ActiveCollectionsAmount
	}
	return 0
}

func (m *Params) GetWinnerReward() int64 {
	if m != nil {
		return m.WinnerReward
	}
	return 0
}

func (m *Params) GetInflationRate() string {
	if m != nil {
		return m.InflationRate
	}
	return ""
}

func (m *Params) GetRaresPerPack() uint64 {
	if m != nil {
		return m.RaresPerPack
	}
	return 0
}

func (m *Params) GetCommonsPerPack() uint64 {
	if m != nil {
		return m.CommonsPerPack
	}
	return 0
}

func (m *Params) GetUnCommonsPerPack() uint64 {
	if m != nil {
		return m.UnCommonsPerPack
	}
	return 0
}

func (m *Params) GetTrialPeriod() uint64 {
	if m != nil {
		return m.TrialPeriod
	}
	return 0
}

func (m *Params) GetGameVoteRatio() int64 {
	if m != nil {
		return m.GameVoteRatio
	}
	return 0
}

func (m *Params) GetCardAuctionPriceReductionPeriod() int64 {
	if m != nil {
		return m.CardAuctionPriceReductionPeriod
	}
	return 0
}

func (m *Params) GetAirDropMaxBlockHeight() int64 {
	if m != nil {
		return m.AirDropMaxBlockHeight
	}
	return 0
}

func (m *Params) GetVotePoolFraction() int64 {
	if m != nil {
		return m.VotePoolFraction
	}
	return 0
}

func (m *Params) GetVotingRewardCap() int64 {
	if m != nil {
		return m.VotingRewardCap
	}
	return 0
}

func (m *Params) GetMatchWorkerDelay() uint64 {
	if m != nil {
		return m.MatchWorkerDelay
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "DecentralCardGame.cardchain.cardchain.Params")
}

func init() { proto.RegisterFile("cardchain/cardchain/params.proto", fileDescriptor_8843e481ee664a23) }

var fileDescriptor_8843e481ee664a23 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x8e, 0xdf, 0xf6, 0x2d, 0x74, 0xfb, 0xbd, 0xb4, 0x62, 0xd5, 0x83, 0x13, 0x55, 0x7c, 0x44,
	0x48, 0xc4, 0x07, 0x38, 0x54, 0x1c, 0x90, 0x5a, 0x87, 0xd2, 0x0b, 0x92, 0xe5, 0xa2, 0x22, 0x90,
	0x38, 0x4c, 0xd7, 0x83, 0xb3, 0x8a, 0xed, 0xb5, 0xd6, 0xeb, 0x7e, 0xf0, 0x2b, 0x38, 0x72, 0xe4,
	0xe7, 0xf4, 0xd8, 0x23, 0xe2, 0x50, 0xa1, 0xf4, 0x8f, 0xa0, 0xdd, 0x84, 0x24, 0x4e, 0x0a, 0x48,
	0x39, 0x79, 0xfd, 0xcc, 0x33, 0xcf, 0xce, 0xec, 0x7c, 0x90, 0x06, 0x07, 0x15, 0xf1, 0x0e, 0x88,
	0xcc, 0x1b, 0x9d, 0x72, 0x50, 0x90, 0x16, 0xad, 0x5c, 0x49, 0x2d, 0xe9, 0xc3, 0x36, 0x72, 0xcc,
	0xb4, 0x82, 0xc4, 0x07, 0x15, 0xbd, 0x86, 0x14, 0x5b, 0x43, 0xe6, 0xe8, 0xb4, 0xbd, 0x19, 0xcb,
	0x58, 0x5a, 0x0f, 0xcf, 0x9c, 0xfa, 0xce, 0x3b, 0xbd, 0x45, 0xb2, 0x10, 0x58, 0x35, 0xfa, 0x92,
	0x6c, 0x9f, 0x4a, 0x2d, 0xb2, 0x38, 0x14, 0x71, 0x47, 0x17, 0xaf, 0xce, 0x73, 0xa1, 0x40, 0x0b,
	0x99, 0xbd, 0x15, 0x29, 0x32, 0xa7, 0xe1, 0x34, 0xe7, 0xc2, 0xbf, 0x30, 0xe8, 0x23, 0xb2, 0xca,
	0x65, 0x92, 0x20, 0x37, 0xc8, 0x91, 0xf8, 0x8c, 0xec, 0xbf, 0x86, 0xd3, 0x9c, 0x0f, 0x27, 0x50,
	0xfa, 0x9e, 0xac, 0x8d, 0x90, 0x40, 0x09, 0x8e, 0x6c, 0xae, 0xe1, 0x34, 0x17, 0xf7, 0xbd, 0xcb,
	0xeb, 0x7a, 0xed, 0xc7, 0x75, 0xfd, 0x71, 0x2c, 0x74, 0xa7, 0x3c, 0x69, 0x71, 0x99, 0x7a, 0x5c,
	0x16, 0xa9, 0x2c, 0x06, 0x9f, 0xa7, 0x45, 0xd4, 0xf5, 0xf4, 0x45, 0x8e, 0x45, 0xcb, 0x97, 0x22,
	0x0b, 0x27, 0x75, 0xe8, 0x2e, 0xb9, 0x0f, 0x5c, 0x8b, 0x53, 0xf4, 0x87, 0x86, 0x62, 0x2f, 0x95,
	0x65, 0xa6, 0xd9, 0xbc, 0x8d, 0xe5, 0x4f, 0x66, 0x8a, 0x64, 0x6b, 0x24, 0xe6, 0x2b, 0xb4, 0x69,
	0x1d, 0x20, 0xb2, 0xff, 0x67, 0x0b, 0xed, 0x76, 0x35, 0xfa, 0x91, 0x6c, 0x18, 0x03, 0x68, 0x54,
	0x90, 0xb4, 0x31, 0x97, 0x85, 0xd0, 0x6c, 0x61, 0xb6, 0x2b, 0xa6, 0x95, 0xe8, 0x0e, 0x59, 0x3e,
	0x13, 0x59, 0x86, 0x2a, 0xc4, 0x33, 0x50, 0x11, 0xbb, 0x63, 0x8b, 0x56, 0xc1, 0xe8, 0x11, 0x59,
	0xee, 0xc8, 0x52, 0x25, 0x17, 0x07, 0x50, 0x72, 0xd4, 0x6c, 0x71, 0xb6, 0xdb, 0x2b, 0x22, 0xf4,
	0x01, 0x59, 0x11, 0xd9, 0xa7, 0xc4, 0xe6, 0x19, 0x82, 0x46, 0x46, 0x8c, 0x6a, 0x58, 0x05, 0x4d,
	0x78, 0x0a, 0x14, 0x16, 0x01, 0xaa, 0x00, 0x78, 0x97, 0x2d, 0xd9, 0x9a, 0x54, 0xb0, 0x7e, 0x17,
	0xa5, 0xa9, 0xcc, 0x86, 0xac, 0xe5, 0xdf, 0x5d, 0x34, 0x8e, 0xd2, 0x27, 0x64, 0xbd, 0xcc, 0xfc,
	0x2a, 0x73, 0xc5, 0x32, 0xa7, 0x70, 0xda, 0x20, 0x4b, 0x5a, 0x09, 0x48, 0x02, 0x54, 0x42, 0x46,
	0x6c, 0xd5, 0xd2, 0xc6, 0x21, 0x13, 0x7f, 0x0c, 0x29, 0x1e, 0x4b, 0x8d, 0xa1, 0x89, 0x97, 0xad,
	0xd9, 0x97, 0xab, 0x82, 0xf4, 0x90, 0xd4, 0xcd, 0x3c, 0xed, 0x95, 0xa3, 0x96, 0x0b, 0x31, 0x1a,
	0xfc, 0xf5, 0xb5, 0xd7, 0xad, 0xdf, 0xbf, 0x68, 0xa6, 0x08, 0x20, 0x54, 0x5b, 0xc9, 0xfc, 0x18,
	0x92, 0x12, 0xd9, 0xc6, 0x8c, 0x45, 0x18, 0x17, 0xa1, 0xcf, 0xc9, 0xd6, 0xe0, 0xff, 0x0d, 0x9c,
	0xef, 0x27, 0x92, 0x77, 0x0f, 0xd1, 0x0c, 0x2a, 0xa3, 0x36, 0xa8, 0xdb, 0x8d, 0x66, 0x1c, 0xed,
	0x4b, 0xd8, 0x34, 0xfb, 0x6d, 0x73, 0x6f, 0xc6, 0x71, 0x9c, 0xd0, 0x31, 0x35, 0x3a, 0x95, 0x1a,
	0x03, 0x29, 0x93, 0x03, 0x05, 0x36, 0x7f, 0xb6, 0x69, 0x63, 0x99, 0xc2, 0x69, 0x93, 0xac, 0x0d,
	0x76, 0x8b, 0xf5, 0xf5, 0x21, 0x67, 0x77, 0x2d, 0x75, 0x12, 0x36, 0xaa, 0x29, 0x68, 0xde, 0x79,
	0x27, 0x55, 0x17, 0x55, 0x1b, 0x13, 0xb8, 0x60, 0x5b, 0xfd, 0xca, 0x4f, 0xe2, 0x2f, 0xe6, 0xbf,
	0x7e, 0xab, 0xd7, 0xf6, 0xc3, 0xcb, 0x9e, 0xeb, 0x5c, 0xf5, 0x5c, 0xe7, 0x67, 0xcf, 0x75, 0xbe,
	0xdc, 0xb8, 0xb5, 0xab, 0x1b, 0xb7, 0xf6, 0xfd, 0xc6, 0xad, 0x7d, 0xd8, 0x1d, 0xcb, 0x6d, 0x6a,
	0x8d, 0x7a, 0xfe, 0x70, 0xe1, 0x9e, 0x8f, 0x2d, 0x5f, 0x9b, 0xf1, 0xc9, 0x82, 0xdd, 0x9f, 0xcf,
	0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xbd, 0x26, 0x57, 0xa0, 0x05, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MatchWorkerDelay != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MatchWorkerDelay))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.VotePoolFraction != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VotePoolFraction))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	{
		size := m.TrialVoteReward.Size()
		i -= size
		if _, err := m.TrialVoteReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if m.AirDropMaxBlockHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.AirDropMaxBlockHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	{
		size := m.AirDropValue.Size()
		i -= size
		if _, err := m.AirDropValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if m.CardAuctionPriceReductionPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CardAuctionPriceReductionPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.GameVoteRatio != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GameVoteRatio))
		i--
		dAtA[i] = 0x78
	}
	if m.TrialPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TrialPeriod))
		i--
		dAtA[i] = 0x70
	}
	if m.UnCommonsPerPack != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UnCommonsPerPack))
		i--
		dAtA[i] = 0x68
	}
	if m.CommonsPerPack != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CommonsPerPack))
		i--
		dAtA[i] = 0x60
	}
	if m.RaresPerPack != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RaresPerPack))
		i--
		dAtA[i] = 0x58
	}
	if len(m.InflationRate) > 0 {
		i -= len(m.InflationRate)
		copy(dAtA[i:], m.InflationRate)
		i = encodeVarintParams(dAtA, i, uint64(len(m.InflationRate)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.HourlyFaucet.Size()
		i -= size
		if _, err := m.HourlyFaucet.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.VotingRewardCap != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VotingRewardCap))
		i--
		dAtA[i] = 0x40
	}
	if m.WinnerReward != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WinnerReward))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.CollateralDeposit.Size()
		i -= size
		if _, err := m.CollateralDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.CollectionCreationFee.Size()
		i -= size
		if _, err := m.CollectionCreationFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ActiveCollectionsAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ActiveCollectionsAmount))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.CollectionPrice.Size()
		i -= size
		if _, err := m.CollectionPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CollectionSize != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CollectionSize))
		i--
		dAtA[i] = 0x10
	}
	if m.VotingRightsExpirationTime != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VotingRightsExpirationTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingRightsExpirationTime != 0 {
		n += 1 + sovParams(uint64(m.VotingRightsExpirationTime))
	}
	if m.CollectionSize != 0 {
		n += 1 + sovParams(uint64(m.CollectionSize))
	}
	l = m.CollectionPrice.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.ActiveCollectionsAmount != 0 {
		n += 1 + sovParams(uint64(m.ActiveCollectionsAmount))
	}
	l = m.CollectionCreationFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CollateralDeposit.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.WinnerReward != 0 {
		n += 1 + sovParams(uint64(m.WinnerReward))
	}
	if m.VotingRewardCap != 0 {
		n += 1 + sovParams(uint64(m.VotingRewardCap))
	}
	l = m.HourlyFaucet.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.InflationRate)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.RaresPerPack != 0 {
		n += 1 + sovParams(uint64(m.RaresPerPack))
	}
	if m.CommonsPerPack != 0 {
		n += 1 + sovParams(uint64(m.CommonsPerPack))
	}
	if m.UnCommonsPerPack != 0 {
		n += 1 + sovParams(uint64(m.UnCommonsPerPack))
	}
	if m.TrialPeriod != 0 {
		n += 1 + sovParams(uint64(m.TrialPeriod))
	}
	if m.GameVoteRatio != 0 {
		n += 1 + sovParams(uint64(m.GameVoteRatio))
	}
	if m.CardAuctionPriceReductionPeriod != 0 {
		n += 2 + sovParams(uint64(m.CardAuctionPriceReductionPeriod))
	}
	l = m.AirDropValue.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.AirDropMaxBlockHeight != 0 {
		n += 2 + sovParams(uint64(m.AirDropMaxBlockHeight))
	}
	l = m.TrialVoteReward.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.VotePoolFraction != 0 {
		n += 2 + sovParams(uint64(m.VotePoolFraction))
	}
	if m.MatchWorkerDelay != 0 {
		n += 2 + sovParams(uint64(m.MatchWorkerDelay))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingRightsExpirationTime", wireType)
			}
			m.VotingRightsExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingRightsExpirationTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionSize", wireType)
			}
			m.CollectionSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectionPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCollectionsAmount", wireType)
			}
			m.ActiveCollectionsAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveCollectionsAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreationFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectionCreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerReward", wireType)
			}
			m.WinnerReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinnerReward |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingRewardCap", wireType)
			}
			m.VotingRewardCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingRewardCap |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourlyFaucet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HourlyFaucet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InflationRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaresPerPack", wireType)
			}
			m.RaresPerPack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaresPerPack |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonsPerPack", wireType)
			}
			m.CommonsPerPack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonsPerPack |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnCommonsPerPack", wireType)
			}
			m.UnCommonsPerPack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnCommonsPerPack |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialPeriod", wireType)
			}
			m.TrialPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrialPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameVoteRatio", wireType)
			}
			m.GameVoteRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameVoteRatio |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardAuctionPriceReductionPeriod", wireType)
			}
			m.CardAuctionPriceReductionPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardAuctionPriceReductionPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirDropValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AirDropValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirDropMaxBlockHeight", wireType)
			}
			m.AirDropMaxBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirDropMaxBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialVoteReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrialVoteReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePoolFraction", wireType)
			}
			m.VotePoolFraction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePoolFraction |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchWorkerDelay", wireType)
			}
			m.MatchWorkerDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchWorkerDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
