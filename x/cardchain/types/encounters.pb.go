// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/cardchain/encounters.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Encounter struct {
	Id         uint64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Drawlist   []uint64          `protobuf:"varint,2,rep,packed,name=Drawlist,proto3" json:"Drawlist,omitempty"`
	Proven     bool              `protobuf:"varint,3,opt,name=proven,proto3" json:"proven,omitempty"`
	Owner      string            `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Parameters map[string]string `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ImageId    uint64            `protobuf:"varint,6,opt,name=imageId,proto3" json:"imageId,omitempty"`
}

func (m *Encounter) Reset()         { *m = Encounter{} }
func (m *Encounter) String() string { return proto.CompactTextString(m) }
func (*Encounter) ProtoMessage()    {}
func (*Encounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd29899b36e899bc, []int{0}
}
func (m *Encounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Encounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Encounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Encounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Encounter.Merge(m, src)
}
func (m *Encounter) XXX_Size() int {
	return m.Size()
}
func (m *Encounter) XXX_DiscardUnknown() {
	xxx_messageInfo_Encounter.DiscardUnknown(m)
}

var xxx_messageInfo_Encounter proto.InternalMessageInfo

func (m *Encounter) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Encounter) GetDrawlist() []uint64 {
	if m != nil {
		return m.Drawlist
	}
	return nil
}

func (m *Encounter) GetProven() bool {
	if m != nil {
		return m.Proven
	}
	return false
}

func (m *Encounter) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Encounter) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Encounter) GetImageId() uint64 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

type EncounterWithImage struct {
	Encounter *Encounter `protobuf:"bytes,1,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Image     []byte     `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *EncounterWithImage) Reset()         { *m = EncounterWithImage{} }
func (m *EncounterWithImage) String() string { return proto.CompactTextString(m) }
func (*EncounterWithImage) ProtoMessage()    {}
func (*EncounterWithImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd29899b36e899bc, []int{1}
}
func (m *EncounterWithImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncounterWithImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncounterWithImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncounterWithImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncounterWithImage.Merge(m, src)
}
func (m *EncounterWithImage) XXX_Size() int {
	return m.Size()
}
func (m *EncounterWithImage) XXX_DiscardUnknown() {
	xxx_messageInfo_EncounterWithImage.DiscardUnknown(m)
}

var xxx_messageInfo_EncounterWithImage proto.InternalMessageInfo

func (m *EncounterWithImage) GetEncounter() *Encounter {
	if m != nil {
		return m.Encounter
	}
	return nil
}

func (m *EncounterWithImage) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*Encounter)(nil), "DecentralCardGame.cardchain.cardchain.Encounter")
	proto.RegisterMapType((map[string]string)(nil), "DecentralCardGame.cardchain.cardchain.Encounter.ParametersEntry")
	proto.RegisterType((*EncounterWithImage)(nil), "DecentralCardGame.cardchain.cardchain.EncounterWithImage")
}

func init() {
	proto.RegisterFile("cardchain/cardchain/encounters.proto", fileDescriptor_bd29899b36e899bc)
}

var fileDescriptor_bd29899b36e899bc = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xeb, 0x40,
	0x18, 0x85, 0x3b, 0x49, 0xdb, 0xdb, 0x4c, 0x2f, 0xf7, 0xca, 0x50, 0x64, 0xe8, 0x22, 0x84, 0xa2,
	0x90, 0x55, 0x22, 0x75, 0x53, 0x04, 0x41, 0x6c, 0x8b, 0x64, 0x23, 0x32, 0x1b, 0xc1, 0x95, 0xd3,
	0x64, 0x48, 0x83, 0x4d, 0x26, 0x4c, 0xa7, 0xad, 0xf5, 0x29, 0x7c, 0x04, 0x1f, 0xc7, 0x65, 0x97,
	0x2e, 0xa5, 0x7d, 0x11, 0xc9, 0xc4, 0x4e, 0x8b, 0x6e, 0x74, 0x77, 0x0e, 0xcc, 0x7f, 0xfe, 0xef,
	0x30, 0x3f, 0x3c, 0x0a, 0xa9, 0x88, 0xc2, 0x31, 0x4d, 0x32, 0x7f, 0xa7, 0x58, 0x16, 0xf2, 0x59,
	0x26, 0x99, 0x98, 0x7a, 0xb9, 0xe0, 0x92, 0xa3, 0xe3, 0x01, 0x0b, 0x59, 0x26, 0x05, 0x9d, 0xf4,
	0xa9, 0x88, 0xae, 0x68, 0xca, 0x3c, 0xfd, 0x7a, 0xa7, 0xda, 0xad, 0x98, 0xc7, 0x5c, 0x4d, 0xf8,
	0x85, 0x2a, 0x87, 0x3b, 0x2f, 0x06, 0xb4, 0x86, 0xdb, 0x44, 0xf4, 0x0f, 0x1a, 0x41, 0x84, 0x81,
	0x03, 0xdc, 0x2a, 0x31, 0x82, 0x08, 0xb5, 0x61, 0x63, 0x20, 0xe8, 0x62, 0x92, 0x4c, 0x25, 0x36,
	0x1c, 0xd3, 0xad, 0x12, 0xed, 0xd1, 0x21, 0xac, 0xe7, 0x82, 0xcf, 0x59, 0x86, 0x4d, 0x07, 0xb8,
	0x0d, 0xf2, 0xe9, 0x50, 0x0b, 0xd6, 0xf8, 0x22, 0x63, 0x02, 0x57, 0x1d, 0xe0, 0x5a, 0xa4, 0x34,
	0xe8, 0x1e, 0xc2, 0x9c, 0x0a, 0x9a, 0xb2, 0x02, 0x1c, 0xd7, 0x1c, 0xd3, 0x6d, 0x76, 0x2f, 0xbc,
	0x1f, 0x91, 0x7b, 0x9a, 0xcf, 0xbb, 0xd1, 0x11, 0xc3, 0x4c, 0x8a, 0x25, 0xd9, 0xcb, 0x44, 0x18,
	0xfe, 0x49, 0x52, 0x1a, 0xb3, 0x20, 0xc2, 0x75, 0x55, 0x60, 0x6b, 0xdb, 0xe7, 0xf0, 0xff, 0x97,
	0x41, 0x74, 0x00, 0xcd, 0x07, 0xb6, 0x54, 0x4d, 0x2d, 0x52, 0xc8, 0x02, 0x7b, 0x4e, 0x27, 0x33,
	0x86, 0x8d, 0x12, 0x5b, 0x99, 0x33, 0xa3, 0x07, 0x3a, 0x4f, 0x10, 0x69, 0x82, 0xdb, 0x44, 0x8e,
	0x83, 0x22, 0x16, 0x5d, 0x43, 0x4b, 0xff, 0x84, 0xca, 0x69, 0x76, 0x4f, 0x7e, 0xdb, 0x87, 0xec,
	0x22, 0x8a, 0xfd, 0x8a, 0x57, 0xed, 0xff, 0x4b, 0x4a, 0x73, 0x49, 0x5e, 0xd7, 0x36, 0x58, 0xad,
	0x6d, 0xf0, 0xbe, 0xb6, 0xc1, 0xf3, 0xc6, 0xae, 0xac, 0x36, 0x76, 0xe5, 0x6d, 0x63, 0x57, 0xee,
	0x7a, 0x71, 0x22, 0xc7, 0xb3, 0x91, 0x17, 0xf2, 0xd4, 0xff, 0xb6, 0xd6, 0xef, 0xeb, 0x73, 0x79,
	0xdc, 0x3b, 0x1d, 0xb9, 0xcc, 0xd9, 0x74, 0x54, 0x57, 0x3f, 0x7f, 0xfa, 0x11, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0x1a, 0x79, 0x21, 0x5e, 0x02, 0x00, 0x00,
}

func (m *Encounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Encounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Encounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ImageId != 0 {
		i = encodeVarintEncounters(dAtA, i, uint64(m.ImageId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Parameters) > 0 {
		for k := range m.Parameters {
			v := m.Parameters[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintEncounters(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEncounters(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEncounters(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEncounters(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.Proven {
		i--
		if m.Proven {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Drawlist) > 0 {
		dAtA2 := make([]byte, len(m.Drawlist)*10)
		var j1 int
		for _, num := range m.Drawlist {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEncounters(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEncounters(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncounterWithImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncounterWithImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncounterWithImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintEncounters(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if m.Encounter != nil {
		{
			size, err := m.Encounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEncounters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEncounters(dAtA []byte, offset int, v uint64) int {
	offset -= sovEncounters(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Encounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEncounters(uint64(m.Id))
	}
	if len(m.Drawlist) > 0 {
		l = 0
		for _, e := range m.Drawlist {
			l += sovEncounters(uint64(e))
		}
		n += 1 + sovEncounters(uint64(l)) + l
	}
	if m.Proven {
		n += 2
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEncounters(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEncounters(uint64(len(k))) + 1 + len(v) + sovEncounters(uint64(len(v)))
			n += mapEntrySize + 1 + sovEncounters(uint64(mapEntrySize))
		}
	}
	if m.ImageId != 0 {
		n += 1 + sovEncounters(uint64(m.ImageId))
	}
	return n
}

func (m *EncounterWithImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Encounter != nil {
		l = m.Encounter.Size()
		n += 1 + l + sovEncounters(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovEncounters(uint64(l))
	}
	return n
}

func sovEncounters(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEncounters(x uint64) (n int) {
	return sovEncounters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Encounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncounters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Encounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Encounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEncounters
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Drawlist = append(m.Drawlist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEncounters
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEncounters
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEncounters
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Drawlist) == 0 {
					m.Drawlist = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEncounters
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Drawlist = append(m.Drawlist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Drawlist", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proven", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proven = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncounters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncounters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEncounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEncounters
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEncounters
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEncounters
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEncounters
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEncounters
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEncounters
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthEncounters
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEncounters(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEncounters
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Parameters[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			m.ImageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEncounters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEncounters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncounterWithImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncounters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncounterWithImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncounterWithImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncounters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEncounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Encounter == nil {
				m.Encounter = &Encounter{}
			}
			if err := m.Encounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEncounters
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEncounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncounters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEncounters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEncounters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEncounters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncounters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEncounters
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEncounters
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEncounters
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEncounters        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEncounters          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEncounters = fmt.Errorf("proto: unexpected end of group")
)
