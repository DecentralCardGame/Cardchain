// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryQCardsRequest_Status int32

const (
	QueryQCardsRequest_scheme         QueryQCardsRequest_Status = 0
	QueryQCardsRequest_prototype      QueryQCardsRequest_Status = 1
	QueryQCardsRequest_trial          QueryQCardsRequest_Status = 2
	QueryQCardsRequest_permanent      QueryQCardsRequest_Status = 3
	QueryQCardsRequest_suspended      QueryQCardsRequest_Status = 4
	QueryQCardsRequest_banned         QueryQCardsRequest_Status = 5
	QueryQCardsRequest_bannedSoon     QueryQCardsRequest_Status = 6
	QueryQCardsRequest_bannedVerySoon QueryQCardsRequest_Status = 7
	QueryQCardsRequest_none           QueryQCardsRequest_Status = 8
	QueryQCardsRequest_playable       QueryQCardsRequest_Status = 9
	QueryQCardsRequest_unplayable     QueryQCardsRequest_Status = 10
)

var QueryQCardsRequest_Status_name = map[int32]string{
	0:  "scheme",
	1:  "prototype",
	2:  "trial",
	3:  "permanent",
	4:  "suspended",
	5:  "banned",
	6:  "bannedSoon",
	7:  "bannedVerySoon",
	8:  "none",
	9:  "playable",
	10: "unplayable",
}

var QueryQCardsRequest_Status_value = map[string]int32{
	"scheme":         0,
	"prototype":      1,
	"trial":          2,
	"permanent":      3,
	"suspended":      4,
	"banned":         5,
	"bannedSoon":     6,
	"bannedVerySoon": 7,
	"none":           8,
	"playable":       9,
	"unplayable":     10,
}

func (x QueryQCardsRequest_Status) String() string {
	return proto.EnumName(QueryQCardsRequest_Status_name, int32(x))
}

func (QueryQCardsRequest_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{12, 0}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryQCardRequest struct {
	CardId string `protobuf:"bytes,1,opt,name=cardId,proto3" json:"cardId,omitempty"`
}

func (m *QueryQCardRequest) Reset()         { *m = QueryQCardRequest{} }
func (m *QueryQCardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCardRequest) ProtoMessage()    {}
func (*QueryQCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{2}
}
func (m *QueryQCardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardRequest.Merge(m, src)
}
func (m *QueryQCardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardRequest proto.InternalMessageInfo

func (m *QueryQCardRequest) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

type QueryQCardContentRequest struct {
	CardId string `protobuf:"bytes,1,opt,name=cardId,proto3" json:"cardId,omitempty"`
}

func (m *QueryQCardContentRequest) Reset()         { *m = QueryQCardContentRequest{} }
func (m *QueryQCardContentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCardContentRequest) ProtoMessage()    {}
func (*QueryQCardContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{3}
}
func (m *QueryQCardContentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardContentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardContentRequest.Merge(m, src)
}
func (m *QueryQCardContentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardContentRequest proto.InternalMessageInfo

func (m *QueryQCardContentRequest) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

type QueryQCardContentResponse struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Hash    string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryQCardContentResponse) Reset()         { *m = QueryQCardContentResponse{} }
func (m *QueryQCardContentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQCardContentResponse) ProtoMessage()    {}
func (*QueryQCardContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{4}
}
func (m *QueryQCardContentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardContentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardContentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardContentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardContentResponse.Merge(m, src)
}
func (m *QueryQCardContentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardContentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardContentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardContentResponse proto.InternalMessageInfo

func (m *QueryQCardContentResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *QueryQCardContentResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type QueryQUserRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryQUserRequest) Reset()         { *m = QueryQUserRequest{} }
func (m *QueryQUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQUserRequest) ProtoMessage()    {}
func (*QueryQUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{5}
}
func (m *QueryQUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQUserRequest.Merge(m, src)
}
func (m *QueryQUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQUserRequest proto.InternalMessageInfo

func (m *QueryQUserRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryQCardchainInfoRequest struct {
}

func (m *QueryQCardchainInfoRequest) Reset()         { *m = QueryQCardchainInfoRequest{} }
func (m *QueryQCardchainInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCardchainInfoRequest) ProtoMessage()    {}
func (*QueryQCardchainInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{6}
}
func (m *QueryQCardchainInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardchainInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardchainInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardchainInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardchainInfoRequest.Merge(m, src)
}
func (m *QueryQCardchainInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardchainInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardchainInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardchainInfoRequest proto.InternalMessageInfo

type QueryQCardchainInfoResponse struct {
	CardAuctionPrice  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=cardAuctionPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"cardAuctionPrice"`
	ActiveCollections []uint64                                `protobuf:"varint,2,rep,packed,name=activeCollections,proto3" json:"activeCollections,omitempty"`
	CardsNumber       uint64                                  `protobuf:"varint,3,opt,name=cardsNumber,proto3" json:"cardsNumber,omitempty"`
	MatchesNumber     uint64                                  `protobuf:"varint,4,opt,name=matchesNumber,proto3" json:"matchesNumber,omitempty"`
	SellOffersNumber  uint64                                  `protobuf:"varint,5,opt,name=sellOffersNumber,proto3" json:"sellOffersNumber,omitempty"`
	CouncilsNumber    uint64                                  `protobuf:"varint,6,opt,name=councilsNumber,proto3" json:"councilsNumber,omitempty"`
}

func (m *QueryQCardchainInfoResponse) Reset()         { *m = QueryQCardchainInfoResponse{} }
func (m *QueryQCardchainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQCardchainInfoResponse) ProtoMessage()    {}
func (*QueryQCardchainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{7}
}
func (m *QueryQCardchainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardchainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardchainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardchainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardchainInfoResponse.Merge(m, src)
}
func (m *QueryQCardchainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardchainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardchainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardchainInfoResponse proto.InternalMessageInfo

func (m *QueryQCardchainInfoResponse) GetActiveCollections() []uint64 {
	if m != nil {
		return m.ActiveCollections
	}
	return nil
}

func (m *QueryQCardchainInfoResponse) GetCardsNumber() uint64 {
	if m != nil {
		return m.CardsNumber
	}
	return 0
}

func (m *QueryQCardchainInfoResponse) GetMatchesNumber() uint64 {
	if m != nil {
		return m.MatchesNumber
	}
	return 0
}

func (m *QueryQCardchainInfoResponse) GetSellOffersNumber() uint64 {
	if m != nil {
		return m.SellOffersNumber
	}
	return 0
}

func (m *QueryQCardchainInfoResponse) GetCouncilsNumber() uint64 {
	if m != nil {
		return m.CouncilsNumber
	}
	return 0
}

type QueryQVotingResultsRequest struct {
}

func (m *QueryQVotingResultsRequest) Reset()         { *m = QueryQVotingResultsRequest{} }
func (m *QueryQVotingResultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQVotingResultsRequest) ProtoMessage()    {}
func (*QueryQVotingResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{8}
}
func (m *QueryQVotingResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVotingResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVotingResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVotingResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVotingResultsRequest.Merge(m, src)
}
func (m *QueryQVotingResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVotingResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVotingResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVotingResultsRequest proto.InternalMessageInfo

type QueryQVotingResultsResponse struct {
	LastVotingResults *VotingResults `protobuf:"bytes,1,opt,name=lastVotingResults,proto3" json:"lastVotingResults,omitempty"`
}

func (m *QueryQVotingResultsResponse) Reset()         { *m = QueryQVotingResultsResponse{} }
func (m *QueryQVotingResultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQVotingResultsResponse) ProtoMessage()    {}
func (*QueryQVotingResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{9}
}
func (m *QueryQVotingResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVotingResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVotingResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVotingResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVotingResultsResponse.Merge(m, src)
}
func (m *QueryQVotingResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVotingResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVotingResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVotingResultsResponse proto.InternalMessageInfo

func (m *QueryQVotingResultsResponse) GetLastVotingResults() *VotingResults {
	if m != nil {
		return m.LastVotingResults
	}
	return nil
}

type QueryQVotableCardsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryQVotableCardsRequest) Reset()         { *m = QueryQVotableCardsRequest{} }
func (m *QueryQVotableCardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQVotableCardsRequest) ProtoMessage()    {}
func (*QueryQVotableCardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{10}
}
func (m *QueryQVotableCardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVotableCardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVotableCardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVotableCardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVotableCardsRequest.Merge(m, src)
}
func (m *QueryQVotableCardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVotableCardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVotableCardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVotableCardsRequest proto.InternalMessageInfo

func (m *QueryQVotableCardsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryQVotableCardsResponse struct {
	Unregistered bool         `protobuf:"varint,1,opt,name=unregistered,proto3" json:"unregistered,omitempty"`
	NoVoteRights bool         `protobuf:"varint,2,opt,name=noVoteRights,proto3" json:"noVoteRights,omitempty"`
	VoteRights   []*VoteRight `protobuf:"bytes,3,rep,name=voteRights,proto3" json:"voteRights,omitempty"`
}

func (m *QueryQVotableCardsResponse) Reset()         { *m = QueryQVotableCardsResponse{} }
func (m *QueryQVotableCardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQVotableCardsResponse) ProtoMessage()    {}
func (*QueryQVotableCardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{11}
}
func (m *QueryQVotableCardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVotableCardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVotableCardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVotableCardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVotableCardsResponse.Merge(m, src)
}
func (m *QueryQVotableCardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVotableCardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVotableCardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVotableCardsResponse proto.InternalMessageInfo

func (m *QueryQVotableCardsResponse) GetUnregistered() bool {
	if m != nil {
		return m.Unregistered
	}
	return false
}

func (m *QueryQVotableCardsResponse) GetNoVoteRights() bool {
	if m != nil {
		return m.NoVoteRights
	}
	return false
}

func (m *QueryQVotableCardsResponse) GetVoteRights() []*VoteRight {
	if m != nil {
		return m.VoteRights
	}
	return nil
}

type QueryQCardsRequest struct {
	Owner            string                    `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Status           QueryQCardsRequest_Status `protobuf:"varint,2,opt,name=status,proto3,enum=DecentralCardGame.cardchain.cardchain.QueryQCardsRequest_Status" json:"status,omitempty"`
	CardType         string                    `protobuf:"bytes,3,opt,name=cardType,proto3" json:"cardType,omitempty"`
	Classes          string                    `protobuf:"bytes,4,opt,name=classes,proto3" json:"classes,omitempty"`
	SortBy           string                    `protobuf:"bytes,5,opt,name=sortBy,proto3" json:"sortBy,omitempty"`
	NameContains     string                    `protobuf:"bytes,6,opt,name=nameContains,proto3" json:"nameContains,omitempty"`
	KeywordsContains string                    `protobuf:"bytes,7,opt,name=keywordsContains,proto3" json:"keywordsContains,omitempty"`
	NotesContains    string                    `protobuf:"bytes,8,opt,name=notesContains,proto3" json:"notesContains,omitempty"`
}

func (m *QueryQCardsRequest) Reset()         { *m = QueryQCardsRequest{} }
func (m *QueryQCardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCardsRequest) ProtoMessage()    {}
func (*QueryQCardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{12}
}
func (m *QueryQCardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardsRequest.Merge(m, src)
}
func (m *QueryQCardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardsRequest proto.InternalMessageInfo

func (m *QueryQCardsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryQCardsRequest) GetStatus() QueryQCardsRequest_Status {
	if m != nil {
		return m.Status
	}
	return QueryQCardsRequest_scheme
}

func (m *QueryQCardsRequest) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *QueryQCardsRequest) GetClasses() string {
	if m != nil {
		return m.Classes
	}
	return ""
}

func (m *QueryQCardsRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *QueryQCardsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *QueryQCardsRequest) GetKeywordsContains() string {
	if m != nil {
		return m.KeywordsContains
	}
	return ""
}

func (m *QueryQCardsRequest) GetNotesContains() string {
	if m != nil {
		return m.NotesContains
	}
	return ""
}

type QueryQCardsResponse struct {
	CardsList []uint64 `protobuf:"varint,1,rep,packed,name=cardsList,proto3" json:"cardsList,omitempty"`
}

func (m *QueryQCardsResponse) Reset()         { *m = QueryQCardsResponse{} }
func (m *QueryQCardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQCardsResponse) ProtoMessage()    {}
func (*QueryQCardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{13}
}
func (m *QueryQCardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardsResponse.Merge(m, src)
}
func (m *QueryQCardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardsResponse proto.InternalMessageInfo

func (m *QueryQCardsResponse) GetCardsList() []uint64 {
	if m != nil {
		return m.CardsList
	}
	return nil
}

type QueryQMatchRequest struct {
	MatchId uint64 `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
}

func (m *QueryQMatchRequest) Reset()         { *m = QueryQMatchRequest{} }
func (m *QueryQMatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQMatchRequest) ProtoMessage()    {}
func (*QueryQMatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{14}
}
func (m *QueryQMatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQMatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQMatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQMatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQMatchRequest.Merge(m, src)
}
func (m *QueryQMatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQMatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQMatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQMatchRequest proto.InternalMessageInfo

func (m *QueryQMatchRequest) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type QueryQCollectionRequest struct {
	CollectionId uint64 `protobuf:"varint,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
}

func (m *QueryQCollectionRequest) Reset()         { *m = QueryQCollectionRequest{} }
func (m *QueryQCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCollectionRequest) ProtoMessage()    {}
func (*QueryQCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{15}
}
func (m *QueryQCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCollectionRequest.Merge(m, src)
}
func (m *QueryQCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCollectionRequest proto.InternalMessageInfo

func (m *QueryQCollectionRequest) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

type QueryQSellOfferRequest struct {
	SellOfferId uint64 `protobuf:"varint,1,opt,name=sellOfferId,proto3" json:"sellOfferId,omitempty"`
}

func (m *QueryQSellOfferRequest) Reset()         { *m = QueryQSellOfferRequest{} }
func (m *QueryQSellOfferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQSellOfferRequest) ProtoMessage()    {}
func (*QueryQSellOfferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{16}
}
func (m *QueryQSellOfferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQSellOfferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQSellOfferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQSellOfferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQSellOfferRequest.Merge(m, src)
}
func (m *QueryQSellOfferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQSellOfferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQSellOfferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQSellOfferRequest proto.InternalMessageInfo

func (m *QueryQSellOfferRequest) GetSellOfferId() uint64 {
	if m != nil {
		return m.SellOfferId
	}
	return 0
}

type QueryQCouncilRequest struct {
	CouncilId uint64 `protobuf:"varint,1,opt,name=councilId,proto3" json:"councilId,omitempty"`
}

func (m *QueryQCouncilRequest) Reset()         { *m = QueryQCouncilRequest{} }
func (m *QueryQCouncilRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCouncilRequest) ProtoMessage()    {}
func (*QueryQCouncilRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{17}
}
func (m *QueryQCouncilRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCouncilRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCouncilRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCouncilRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCouncilRequest.Merge(m, src)
}
func (m *QueryQCouncilRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCouncilRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCouncilRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCouncilRequest proto.InternalMessageInfo

func (m *QueryQCouncilRequest) GetCouncilId() uint64 {
	if m != nil {
		return m.CouncilId
	}
	return 0
}

type QueryQMatchesRequest struct {
	TimestampDown uint64         `protobuf:"varint,1,opt,name=timestampDown,proto3" json:"timestampDown,omitempty"`
	TimestampUp   uint64         `protobuf:"varint,2,opt,name=timestampUp,proto3" json:"timestampUp,omitempty"`
	ContainsUsers []string       `protobuf:"bytes,3,rep,name=containsUsers,proto3" json:"containsUsers,omitempty"`
	Reporter      string         `protobuf:"bytes,4,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Outcome       Outcome        `protobuf:"varint,5,opt,name=outcome,proto3,enum=DecentralCardGame.cardchain.cardchain.Outcome" json:"outcome,omitempty"`
	CardsPlayed   []uint64       `protobuf:"varint,6,rep,packed,name=cardsPlayed,proto3" json:"cardsPlayed,omitempty"`
	Ignore        *IgnoreMatches `protobuf:"bytes,7,opt,name=ignore,proto3" json:"ignore,omitempty"`
}

func (m *QueryQMatchesRequest) Reset()         { *m = QueryQMatchesRequest{} }
func (m *QueryQMatchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQMatchesRequest) ProtoMessage()    {}
func (*QueryQMatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{18}
}
func (m *QueryQMatchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQMatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQMatchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQMatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQMatchesRequest.Merge(m, src)
}
func (m *QueryQMatchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQMatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQMatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQMatchesRequest proto.InternalMessageInfo

func (m *QueryQMatchesRequest) GetTimestampDown() uint64 {
	if m != nil {
		return m.TimestampDown
	}
	return 0
}

func (m *QueryQMatchesRequest) GetTimestampUp() uint64 {
	if m != nil {
		return m.TimestampUp
	}
	return 0
}

func (m *QueryQMatchesRequest) GetContainsUsers() []string {
	if m != nil {
		return m.ContainsUsers
	}
	return nil
}

func (m *QueryQMatchesRequest) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *QueryQMatchesRequest) GetOutcome() Outcome {
	if m != nil {
		return m.Outcome
	}
	return Outcome_AWon
}

func (m *QueryQMatchesRequest) GetCardsPlayed() []uint64 {
	if m != nil {
		return m.CardsPlayed
	}
	return nil
}

func (m *QueryQMatchesRequest) GetIgnore() *IgnoreMatches {
	if m != nil {
		return m.Ignore
	}
	return nil
}

type IgnoreMatches struct {
	Outcome bool `protobuf:"varint,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (m *IgnoreMatches) Reset()         { *m = IgnoreMatches{} }
func (m *IgnoreMatches) String() string { return proto.CompactTextString(m) }
func (*IgnoreMatches) ProtoMessage()    {}
func (*IgnoreMatches) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{19}
}
func (m *IgnoreMatches) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IgnoreMatches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IgnoreMatches.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IgnoreMatches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IgnoreMatches.Merge(m, src)
}
func (m *IgnoreMatches) XXX_Size() int {
	return m.Size()
}
func (m *IgnoreMatches) XXX_DiscardUnknown() {
	xxx_messageInfo_IgnoreMatches.DiscardUnknown(m)
}

var xxx_messageInfo_IgnoreMatches proto.InternalMessageInfo

func (m *IgnoreMatches) GetOutcome() bool {
	if m != nil {
		return m.Outcome
	}
	return false
}

type QueryQMatchesResponse struct {
	MatchesList []uint64 `protobuf:"varint,1,rep,packed,name=matchesList,proto3" json:"matchesList,omitempty"`
	Matches     []*Match `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (m *QueryQMatchesResponse) Reset()         { *m = QueryQMatchesResponse{} }
func (m *QueryQMatchesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQMatchesResponse) ProtoMessage()    {}
func (*QueryQMatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{20}
}
func (m *QueryQMatchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQMatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQMatchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQMatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQMatchesResponse.Merge(m, src)
}
func (m *QueryQMatchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQMatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQMatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQMatchesResponse proto.InternalMessageInfo

func (m *QueryQMatchesResponse) GetMatchesList() []uint64 {
	if m != nil {
		return m.MatchesList
	}
	return nil
}

func (m *QueryQMatchesResponse) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type QueryQSellOffersRequest struct {
	PriceDown string            `protobuf:"bytes,1,opt,name=priceDown,proto3" json:"priceDown,omitempty"`
	PriceUp   string            `protobuf:"bytes,2,opt,name=priceUp,proto3" json:"priceUp,omitempty"`
	Seller    string            `protobuf:"bytes,3,opt,name=seller,proto3" json:"seller,omitempty"`
	Buyer     string            `protobuf:"bytes,4,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Card      uint64            `protobuf:"varint,5,opt,name=card,proto3" json:"card,omitempty"`
	Status    SellOfferStatus   `protobuf:"varint,6,opt,name=status,proto3,enum=DecentralCardGame.cardchain.cardchain.SellOfferStatus" json:"status,omitempty"`
	Ignore    *IgnoreSellOffers `protobuf:"bytes,7,opt,name=ignore,proto3" json:"ignore,omitempty"`
}

func (m *QueryQSellOffersRequest) Reset()         { *m = QueryQSellOffersRequest{} }
func (m *QueryQSellOffersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQSellOffersRequest) ProtoMessage()    {}
func (*QueryQSellOffersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{21}
}
func (m *QueryQSellOffersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQSellOffersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQSellOffersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQSellOffersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQSellOffersRequest.Merge(m, src)
}
func (m *QueryQSellOffersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQSellOffersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQSellOffersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQSellOffersRequest proto.InternalMessageInfo

func (m *QueryQSellOffersRequest) GetPriceDown() string {
	if m != nil {
		return m.PriceDown
	}
	return ""
}

func (m *QueryQSellOffersRequest) GetPriceUp() string {
	if m != nil {
		return m.PriceUp
	}
	return ""
}

func (m *QueryQSellOffersRequest) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *QueryQSellOffersRequest) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *QueryQSellOffersRequest) GetCard() uint64 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *QueryQSellOffersRequest) GetStatus() SellOfferStatus {
	if m != nil {
		return m.Status
	}
	return SellOfferStatus_open
}

func (m *QueryQSellOffersRequest) GetIgnore() *IgnoreSellOffers {
	if m != nil {
		return m.Ignore
	}
	return nil
}

type IgnoreSellOffers struct {
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Card   bool `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (m *IgnoreSellOffers) Reset()         { *m = IgnoreSellOffers{} }
func (m *IgnoreSellOffers) String() string { return proto.CompactTextString(m) }
func (*IgnoreSellOffers) ProtoMessage()    {}
func (*IgnoreSellOffers) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{22}
}
func (m *IgnoreSellOffers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IgnoreSellOffers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IgnoreSellOffers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IgnoreSellOffers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IgnoreSellOffers.Merge(m, src)
}
func (m *IgnoreSellOffers) XXX_Size() int {
	return m.Size()
}
func (m *IgnoreSellOffers) XXX_DiscardUnknown() {
	xxx_messageInfo_IgnoreSellOffers.DiscardUnknown(m)
}

var xxx_messageInfo_IgnoreSellOffers proto.InternalMessageInfo

func (m *IgnoreSellOffers) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *IgnoreSellOffers) GetCard() bool {
	if m != nil {
		return m.Card
	}
	return false
}

type QueryQSellOffersResponse struct {
	SellOffersIds []uint64     `protobuf:"varint,1,rep,packed,name=sellOffersIds,proto3" json:"sellOffersIds,omitempty"`
	SellOffers    []*SellOffer `protobuf:"bytes,2,rep,name=sellOffers,proto3" json:"sellOffers,omitempty"`
}

func (m *QueryQSellOffersResponse) Reset()         { *m = QueryQSellOffersResponse{} }
func (m *QueryQSellOffersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQSellOffersResponse) ProtoMessage()    {}
func (*QueryQSellOffersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{23}
}
func (m *QueryQSellOffersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQSellOffersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQSellOffersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQSellOffersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQSellOffersResponse.Merge(m, src)
}
func (m *QueryQSellOffersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQSellOffersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQSellOffersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQSellOffersResponse proto.InternalMessageInfo

func (m *QueryQSellOffersResponse) GetSellOffersIds() []uint64 {
	if m != nil {
		return m.SellOffersIds
	}
	return nil
}

func (m *QueryQSellOffersResponse) GetSellOffers() []*SellOffer {
	if m != nil {
		return m.SellOffers
	}
	return nil
}

type QueryQServerRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryQServerRequest) Reset()         { *m = QueryQServerRequest{} }
func (m *QueryQServerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQServerRequest) ProtoMessage()    {}
func (*QueryQServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{24}
}
func (m *QueryQServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQServerRequest.Merge(m, src)
}
func (m *QueryQServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQServerRequest proto.InternalMessageInfo

func (m *QueryQServerRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryQServerResponse struct {
}

func (m *QueryQServerResponse) Reset()         { *m = QueryQServerResponse{} }
func (m *QueryQServerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQServerResponse) ProtoMessage()    {}
func (*QueryQServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{25}
}
func (m *QueryQServerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQServerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQServerResponse.Merge(m, src)
}
func (m *QueryQServerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQServerResponse proto.InternalMessageInfo

type QueryQCollectionsRequest struct {
	Status        CStatus  `protobuf:"varint,1,opt,name=status,proto3,enum=DecentralCardGame.cardchain.cardchain.CStatus" json:"status,omitempty"`
	IgnoreStatus  bool     `protobuf:"varint,2,opt,name=ignoreStatus,proto3" json:"ignoreStatus,omitempty"`
	Contributors  []string `protobuf:"bytes,3,rep,name=contributors,proto3" json:"contributors,omitempty"`
	ContainsCards []uint64 `protobuf:"varint,4,rep,packed,name=containsCards,proto3" json:"containsCards,omitempty"`
	Owner         string   `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryQCollectionsRequest) Reset()         { *m = QueryQCollectionsRequest{} }
func (m *QueryQCollectionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCollectionsRequest) ProtoMessage()    {}
func (*QueryQCollectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{26}
}
func (m *QueryQCollectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCollectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCollectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCollectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCollectionsRequest.Merge(m, src)
}
func (m *QueryQCollectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCollectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCollectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCollectionsRequest proto.InternalMessageInfo

func (m *QueryQCollectionsRequest) GetStatus() CStatus {
	if m != nil {
		return m.Status
	}
	return CStatus_design
}

func (m *QueryQCollectionsRequest) GetIgnoreStatus() bool {
	if m != nil {
		return m.IgnoreStatus
	}
	return false
}

func (m *QueryQCollectionsRequest) GetContributors() []string {
	if m != nil {
		return m.Contributors
	}
	return nil
}

func (m *QueryQCollectionsRequest) GetContainsCards() []uint64 {
	if m != nil {
		return m.ContainsCards
	}
	return nil
}

func (m *QueryQCollectionsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryQCollectionsResponse struct {
	CollectionIds []uint64 `protobuf:"varint,1,rep,packed,name=collectionIds,proto3" json:"collectionIds,omitempty"`
}

func (m *QueryQCollectionsResponse) Reset()         { *m = QueryQCollectionsResponse{} }
func (m *QueryQCollectionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQCollectionsResponse) ProtoMessage()    {}
func (*QueryQCollectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{27}
}
func (m *QueryQCollectionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCollectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCollectionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCollectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCollectionsResponse.Merge(m, src)
}
func (m *QueryQCollectionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCollectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCollectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCollectionsResponse proto.InternalMessageInfo

func (m *QueryQCollectionsResponse) GetCollectionIds() []uint64 {
	if m != nil {
		return m.CollectionIds
	}
	return nil
}

type QueryRarityDistributionRequest struct {
	CollectionId uint64 `protobuf:"varint,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
}

func (m *QueryRarityDistributionRequest) Reset()         { *m = QueryRarityDistributionRequest{} }
func (m *QueryRarityDistributionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRarityDistributionRequest) ProtoMessage()    {}
func (*QueryRarityDistributionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{28}
}
func (m *QueryRarityDistributionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRarityDistributionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRarityDistributionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRarityDistributionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRarityDistributionRequest.Merge(m, src)
}
func (m *QueryRarityDistributionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRarityDistributionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRarityDistributionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRarityDistributionRequest proto.InternalMessageInfo

func (m *QueryRarityDistributionRequest) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

type QueryRarityDistributionResponse struct {
	Current []uint64 `protobuf:"varint,1,rep,packed,name=current,proto3" json:"current,omitempty"`
	Wanted  []uint64 `protobuf:"varint,2,rep,packed,name=wanted,proto3" json:"wanted,omitempty"`
}

func (m *QueryRarityDistributionResponse) Reset()         { *m = QueryRarityDistributionResponse{} }
func (m *QueryRarityDistributionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRarityDistributionResponse) ProtoMessage()    {}
func (*QueryRarityDistributionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{29}
}
func (m *QueryRarityDistributionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRarityDistributionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRarityDistributionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRarityDistributionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRarityDistributionResponse.Merge(m, src)
}
func (m *QueryRarityDistributionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRarityDistributionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRarityDistributionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRarityDistributionResponse proto.InternalMessageInfo

func (m *QueryRarityDistributionResponse) GetCurrent() []uint64 {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *QueryRarityDistributionResponse) GetWanted() []uint64 {
	if m != nil {
		return m.Wanted
	}
	return nil
}

func init() {
	proto.RegisterEnum("DecentralCardGame.cardchain.cardchain.QueryQCardsRequest_Status", QueryQCardsRequest_Status_name, QueryQCardsRequest_Status_value)
	proto.RegisterType((*QueryParamsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryParamsResponse")
	proto.RegisterType((*QueryQCardRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardRequest")
	proto.RegisterType((*QueryQCardContentRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardContentRequest")
	proto.RegisterType((*QueryQCardContentResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardContentResponse")
	proto.RegisterType((*QueryQUserRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQUserRequest")
	proto.RegisterType((*QueryQCardchainInfoRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardchainInfoRequest")
	proto.RegisterType((*QueryQCardchainInfoResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardchainInfoResponse")
	proto.RegisterType((*QueryQVotingResultsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQVotingResultsRequest")
	proto.RegisterType((*QueryQVotingResultsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQVotingResultsResponse")
	proto.RegisterType((*QueryQVotableCardsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQVotableCardsRequest")
	proto.RegisterType((*QueryQVotableCardsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQVotableCardsResponse")
	proto.RegisterType((*QueryQCardsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardsRequest")
	proto.RegisterType((*QueryQCardsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardsResponse")
	proto.RegisterType((*QueryQMatchRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQMatchRequest")
	proto.RegisterType((*QueryQCollectionRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCollectionRequest")
	proto.RegisterType((*QueryQSellOfferRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQSellOfferRequest")
	proto.RegisterType((*QueryQCouncilRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCouncilRequest")
	proto.RegisterType((*QueryQMatchesRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQMatchesRequest")
	proto.RegisterType((*IgnoreMatches)(nil), "DecentralCardGame.cardchain.cardchain.IgnoreMatches")
	proto.RegisterType((*QueryQMatchesResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQMatchesResponse")
	proto.RegisterType((*QueryQSellOffersRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQSellOffersRequest")
	proto.RegisterType((*IgnoreSellOffers)(nil), "DecentralCardGame.cardchain.cardchain.IgnoreSellOffers")
	proto.RegisterType((*QueryQSellOffersResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQSellOffersResponse")
	proto.RegisterType((*QueryQServerRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQServerRequest")
	proto.RegisterType((*QueryQServerResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQServerResponse")
	proto.RegisterType((*QueryQCollectionsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCollectionsRequest")
	proto.RegisterType((*QueryQCollectionsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCollectionsResponse")
	proto.RegisterType((*QueryRarityDistributionRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryRarityDistributionRequest")
	proto.RegisterType((*QueryRarityDistributionResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryRarityDistributionResponse")
}

func init() { proto.RegisterFile("cardchain/query.proto", fileDescriptor_c26c5456fa123d9f) }

var fileDescriptor_c26c5456fa123d9f = []byte{
	// 2049 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0xcf, 0x6f, 0x1b, 0xc7,
	0xf5, 0xd7, 0x52, 0x14, 0x45, 0x8e, 0x7e, 0x80, 0x9e, 0xaf, 0xe2, 0xf0, 0xcb, 0x18, 0xb2, 0xb0,
	0x70, 0x5a, 0x37, 0x89, 0xb8, 0x8e, 0x62, 0x3b, 0x8a, 0x63, 0xeb, 0x77, 0xdc, 0xa8, 0x71, 0x6c,
	0x6b, 0x95, 0x18, 0x45, 0x7b, 0x10, 0x96, 0xe4, 0x98, 0x5a, 0x84, 0xdc, 0xa1, 0x77, 0x66, 0xe5,
	0x10, 0x02, 0x0f, 0xed, 0x5f, 0x50, 0xb4, 0x7f, 0x42, 0x7b, 0x2f, 0x90, 0x16, 0xb9, 0x15, 0xed,
	0xa1, 0x07, 0x1f, 0x0d, 0x14, 0x05, 0xd2, 0x1c, 0x8c, 0xc2, 0x2e, 0xda, 0x63, 0x6f, 0x3d, 0x17,
	0xf3, 0x66, 0x66, 0x77, 0x96, 0x54, 0xea, 0x5d, 0xfa, 0xa4, 0x9d, 0x37, 0xf3, 0xde, 0xbc, 0xcf,
	0x7b, 0x9f, 0x79, 0x33, 0x8f, 0x42, 0xaf, 0xb5, 0xbc, 0xb0, 0xdd, 0x3a, 0xf6, 0xfc, 0xc0, 0x79,
	0x14, 0x91, 0x70, 0xd0, 0xe8, 0x87, 0x94, 0x53, 0xfc, 0xe6, 0x1e, 0x69, 0x91, 0x80, 0x87, 0x5e,
	0x77, 0xd7, 0x0b, 0xdb, 0x3f, 0xf4, 0x7a, 0xa4, 0x11, 0x2f, 0x4c, 0xbe, 0xea, 0x4b, 0x1d, 0xda,
	0xa1, 0xa0, 0xe1, 0x88, 0x2f, 0xa9, 0x5c, 0xbf, 0xd0, 0xa1, 0xb4, 0xd3, 0x25, 0x8e, 0xd7, 0xf7,
	0x1d, 0x2f, 0x08, 0x28, 0xf7, 0xb8, 0x4f, 0x03, 0xa6, 0x66, 0xdf, 0x6a, 0x51, 0xd6, 0xa3, 0xcc,
	0x69, 0x7a, 0x8c, 0xc8, 0x3d, 0x9d, 0x93, 0x77, 0x9b, 0x84, 0x7b, 0xef, 0x3a, 0x7d, 0xaf, 0xe3,
	0x07, 0xb0, 0x58, 0xad, 0x3d, 0x9f, 0x78, 0xd7, 0xf7, 0x42, 0xaf, 0xa7, 0x6d, 0xd4, 0x13, 0xf9,
	0x09, 0xe5, 0xe4, 0x28, 0xf4, 0x3b, 0xc7, 0x5c, 0xcd, 0x2d, 0xa7, 0xe6, 0xfc, 0xa0, 0x73, 0x14,
	0x12, 0x16, 0x75, 0xb9, 0xd6, 0x5d, 0x4a, 0xe6, 0xc5, 0xd7, 0xb8, 0x34, 0x62, 0x24, 0x54, 0x52,
	0x23, 0x3a, 0x3d, 0x8f, 0xb7, 0x8e, 0xc7, 0xb7, 0x6f, 0xd1, 0x6e, 0x97, 0xb4, 0x0c, 0x97, 0x8d,
	0x39, 0x46, 0xba, 0xdd, 0x23, 0xfa, 0xf0, 0x61, 0x6c, 0xee, 0x75, 0x53, 0x2f, 0x0a, 0x5a, 0x7e,
	0x77, 0x1c, 0x27, 0x23, 0xe1, 0x49, 0xac, 0x80, 0x13, 0x39, 0xff, 0x52, 0xca, 0xec, 0x25, 0x84,
	0x0f, 0x44, 0xd4, 0xee, 0x43, 0x40, 0x5c, 0xf2, 0x28, 0x22, 0x8c, 0xdb, 0x4d, 0xf4, 0x7f, 0x29,
	0x29, 0xeb, 0xd3, 0x80, 0x11, 0xfc, 0x09, 0x2a, 0xc9, 0xc0, 0xd5, 0xac, 0x15, 0xeb, 0xf2, 0xdc,
	0xda, 0x6a, 0x23, 0x53, 0x62, 0x1b, 0xd2, 0xcc, 0x4e, 0xf1, 0xc9, 0xb3, 0x8b, 0x53, 0xae, 0x32,
	0x61, 0xbf, 0x8d, 0xce, 0xc1, 0x1e, 0x07, 0x42, 0x55, 0x6d, 0x8c, 0xcf, 0xa3, 0x92, 0x50, 0xdb,
	0x6f, 0xc3, 0x0e, 0x15, 0x57, 0x8d, 0xec, 0x35, 0x54, 0x4b, 0x16, 0xef, 0xd2, 0x80, 0x93, 0x80,
	0xbf, 0x4c, 0x67, 0x1f, 0xfd, 0xff, 0x19, 0x3a, 0x0a, 0x4a, 0x0d, 0xcd, 0xb6, 0xa4, 0x48, 0x69,
	0xe9, 0x21, 0xc6, 0xa8, 0x78, 0xec, 0xb1, 0xe3, 0x5a, 0x01, 0xc4, 0xf0, 0x6d, 0xaf, 0x6a, 0x5f,
	0x3f, 0x67, 0x24, 0xd4, 0xfb, 0xd6, 0xd0, 0xac, 0xd7, 0x6e, 0x87, 0x84, 0x31, 0x6d, 0x42, 0x0d,
	0xed, 0x0b, 0xa8, 0x9e, 0xec, 0x0c, 0x21, 0xd8, 0x0f, 0x1e, 0x52, 0x1d, 0xdc, 0x3f, 0x17, 0xd0,
	0x1b, 0x67, 0x4e, 0x2b, 0xd7, 0x7e, 0x8a, 0xaa, 0x02, 0xc1, 0x76, 0x04, 0x44, 0xb8, 0x1f, 0xfa,
	0x2d, 0x22, 0x37, 0xd8, 0x71, 0x44, 0x00, 0xbf, 0x7d, 0x76, 0xf1, 0xfb, 0x1d, 0x9f, 0x1f, 0x47,
	0xcd, 0x46, 0x8b, 0xf6, 0x1c, 0xc5, 0x7f, 0xf9, 0x67, 0x95, 0xb5, 0xbf, 0x70, 0xf8, 0xa0, 0x4f,
	0x58, 0x63, 0x97, 0xfa, 0x81, 0x3b, 0x66, 0x08, 0xbf, 0x83, 0xce, 0x79, 0x2d, 0xee, 0x9f, 0x90,
	0xdd, 0x98, 0x6a, 0xac, 0x56, 0x58, 0x99, 0xbe, 0x5c, 0x74, 0xc7, 0x27, 0xf0, 0x0a, 0x9a, 0x13,
	0x16, 0xd8, 0xdd, 0xa8, 0xd7, 0x24, 0x61, 0x6d, 0x7a, 0xc5, 0xba, 0x5c, 0x74, 0x4d, 0x11, 0xbe,
	0x84, 0x16, 0x80, 0xcb, 0x44, 0xaf, 0x29, 0xc2, 0x9a, 0xb4, 0x10, 0xbf, 0x85, 0xaa, 0x82, 0xbe,
	0xf7, 0x04, 0x7b, 0xf5, 0xc2, 0x19, 0x58, 0x38, 0x26, 0xc7, 0xdf, 0x43, 0x8b, 0x8a, 0xce, 0x7a,
	0x65, 0x09, 0x56, 0x8e, 0x48, 0x93, 0x20, 0x3f, 0x80, 0x73, 0xe9, 0xca, 0x63, 0xa9, 0x83, 0xfc,
	0x33, 0x4b, 0x07, 0x79, 0x64, 0x5a, 0x05, 0xb9, 0x89, 0xce, 0x75, 0x3d, 0xc6, 0x53, 0x93, 0x8a,
	0xd5, 0x57, 0x33, 0xb2, 0x3a, 0x6d, 0x78, 0xdc, 0x9c, 0x7d, 0x4d, 0x13, 0xf0, 0x01, 0xe5, 0x5e,
	0xb3, 0x4b, 0x84, 0x35, 0xf6, 0x72, 0xf6, 0x7c, 0x6d, 0x19, 0xc8, 0x0c, 0x3d, 0xe5, 0xb9, 0x8d,
	0xe6, 0xa3, 0x20, 0x24, 0x1d, 0x9f, 0x71, 0x12, 0x12, 0x49, 0xfa, 0xb2, 0x9b, 0x92, 0x89, 0x35,
	0x01, 0x7d, 0x40, 0x39, 0x71, 0x45, 0x29, 0x63, 0xc0, 0xe5, 0xb2, 0x9b, 0x92, 0xe1, 0xfb, 0x08,
	0x9d, 0x24, 0x2b, 0xa6, 0x57, 0xa6, 0x2f, 0xcf, 0xad, 0x5d, 0xc9, 0x0e, 0x5d, 0x2a, 0xba, 0x86,
	0x0d, 0xfb, 0xdf, 0xd3, 0xaa, 0x98, 0x1c, 0xa4, 0x90, 0x2e, 0xa1, 0x19, 0xfa, 0x38, 0x20, 0xa1,
	0xc2, 0x29, 0x07, 0xf8, 0xc7, 0xa8, 0xc4, 0xb8, 0xc7, 0x23, 0xe9, 0xdc, 0xe2, 0xda, 0x56, 0xc6,
	0xad, 0xc7, 0x37, 0x68, 0x1c, 0x82, 0x1d, 0x57, 0xd9, 0xc3, 0x75, 0x54, 0x16, 0xcb, 0x3f, 0x1b,
	0xf4, 0x09, 0x30, 0xb6, 0xe2, 0xc6, 0x63, 0x38, 0xf6, 0x5d, 0x8f, 0x31, 0xc2, 0x80, 0xa8, 0xe2,
	0xd8, 0xcb, 0xa1, 0xa8, 0x22, 0x8c, 0x86, 0x7c, 0x67, 0x00, 0xc4, 0xac, 0xb8, 0x6a, 0x04, 0xa1,
	0xf4, 0x7a, 0x44, 0xd4, 0x0f, 0xcf, 0x0f, 0x18, 0x90, 0xb1, 0xe2, 0xa6, 0x64, 0x82, 0xde, 0x5f,
	0x90, 0xc1, 0x63, 0x1a, 0xb6, 0x59, 0xbc, 0x6e, 0x16, 0xd6, 0x8d, 0xc9, 0xc5, 0x81, 0x09, 0x28,
	0x27, 0xc9, 0xc2, 0x32, 0x2c, 0x4c, 0x0b, 0xed, 0xdf, 0x58, 0xa8, 0x24, 0x61, 0x61, 0x84, 0x4a,
	0xac, 0x75, 0x4c, 0x7a, 0xa4, 0x3a, 0x85, 0x17, 0x50, 0x05, 0xca, 0xb6, 0x38, 0xe2, 0x55, 0x0b,
	0x57, 0xd0, 0x0c, 0x0f, 0x7d, 0xaf, 0x5b, 0x2d, 0xc0, 0x0c, 0x09, 0x7b, 0x5e, 0x40, 0x02, 0x5e,
	0x9d, 0x16, 0x43, 0x16, 0xb1, 0x3e, 0x09, 0xda, 0xa4, 0x5d, 0x2d, 0x0a, 0x1b, 0x4d, 0x2f, 0x08,
	0x48, 0xbb, 0x3a, 0x83, 0x17, 0x11, 0x92, 0xdf, 0x87, 0x94, 0x06, 0xd5, 0x12, 0xc6, 0x68, 0x51,
	0x8e, 0x1f, 0x90, 0x70, 0x00, 0xb2, 0x59, 0x5c, 0x46, 0xc5, 0x80, 0x06, 0xa4, 0x5a, 0xc6, 0xf3,
	0xa8, 0xdc, 0xef, 0x7a, 0x03, 0x41, 0xc3, 0x6a, 0x45, 0xe8, 0x46, 0x41, 0x3c, 0x46, 0xf6, 0x7b,
	0xea, 0x9e, 0x38, 0x48, 0x53, 0xf4, 0x02, 0xaa, 0x40, 0x8d, 0xb8, 0xe3, 0x33, 0x51, 0x5e, 0x45,
	0x71, 0x49, 0x04, 0x76, 0x43, 0xb3, 0xe4, 0x53, 0x51, 0x23, 0x8c, 0xf3, 0x00, 0x35, 0x43, 0x95,
	0xf1, 0xa2, 0xab, 0x87, 0xf6, 0x2d, 0xf4, 0xba, 0xda, 0x24, 0xae, 0x4c, 0x5a, 0xc9, 0x46, 0xf3,
	0xc9, 0x95, 0x19, 0x6b, 0xa6, 0x64, 0xf6, 0x0d, 0x74, 0x5e, 0xaa, 0x1f, 0xea, 0x4a, 0xa3, 0xb5,
	0x57, 0xd0, 0x5c, 0x5c, 0x7d, 0x62, 0x65, 0x53, 0x64, 0x5f, 0x45, 0x4b, 0x7a, 0x6b, 0xa8, 0x3d,
	0x5a, 0x53, 0x00, 0x94, 0x92, 0x58, 0x2f, 0x11, 0xd8, 0xdf, 0x16, 0xb4, 0xda, 0xa7, 0xb2, 0x0a,
	0x6a, 0xb5, 0x4b, 0x68, 0x81, 0xfb, 0x3d, 0xc2, 0xb8, 0xd7, 0xeb, 0xef, 0xd1, 0xc7, 0x81, 0x52,
	0x4d, 0x0b, 0x85, 0x5b, 0xb1, 0xe0, 0xf3, 0x3e, 0x1c, 0x8f, 0xa2, 0x6b, 0x8a, 0x84, 0x9d, 0x96,
	0x62, 0x8a, 0xb8, 0x90, 0xe4, 0xe9, 0xad, 0xb8, 0x69, 0xa1, 0x38, 0x07, 0x21, 0xe9, 0xd3, 0x90,
	0xab, 0xaa, 0x5c, 0x71, 0xe3, 0x31, 0xfe, 0x18, 0xcd, 0xd2, 0x88, 0xb7, 0x68, 0x8f, 0x00, 0xdd,
	0x17, 0xd7, 0x1a, 0x19, 0x8f, 0xdf, 0x3d, 0xa9, 0xe5, 0x6a, 0xf5, 0xf8, 0x8a, 0xb8, 0xdf, 0xf5,
	0x06, 0xa4, 0x5d, 0x2b, 0x41, 0xb6, 0x4d, 0x11, 0xbe, 0x83, 0x4a, 0x7e, 0x27, 0xa0, 0x21, 0x81,
	0x33, 0x91, 0xbd, 0xbe, 0xee, 0x83, 0x92, 0x0e, 0xa1, 0xb2, 0x61, 0xff, 0x00, 0x2d, 0xa4, 0x26,
	0x04, 0x71, 0x34, 0x14, 0x59, 0x0a, 0xf5, 0x50, 0xdc, 0x01, 0xaf, 0x8d, 0xe4, 0x41, 0x11, 0x74,
	0x05, 0xcd, 0xa9, 0x0b, 0xca, 0xa0, 0xa8, 0x29, 0xc2, 0xb7, 0x15, 0x1d, 0x89, 0xbc, 0x1d, 0xe7,
	0xd6, 0xde, 0xc9, 0xe8, 0xb5, 0x24, 0xb5, 0x56, 0xb6, 0x7f, 0x5f, 0xd0, 0xec, 0x8d, 0xe9, 0xc7,
	0x0c, 0x16, 0xf5, 0xc5, 0xa5, 0x1c, 0x53, 0xa1, 0xe2, 0x26, 0x02, 0x81, 0x0b, 0x06, 0x8a, 0x02,
	0x15, 0x57, 0x0f, 0xa1, 0x54, 0x91, 0x6e, 0x57, 0x5d, 0xc8, 0xa2, 0x54, 0xc1, 0x48, 0x14, 0xda,
	0x66, 0x34, 0x88, 0xb3, 0x2d, 0x07, 0xe2, 0x3d, 0x23, 0xbc, 0x53, 0xf7, 0x2d, 0x7c, 0xe3, 0xbb,
	0x71, 0xf1, 0x2d, 0x41, 0xf6, 0xaf, 0x67, 0x04, 0x17, 0x63, 0x18, 0x29, 0xb9, 0xf7, 0x46, 0x52,
	0xfc, 0x7e, 0xae, 0x14, 0x1b, 0x91, 0xd1, 0x59, 0xde, 0x40, 0xd5, 0xd1, 0x39, 0x80, 0x2d, 0x9d,
	0x96, 0x79, 0xd6, 0x9b, 0x6b, 0x80, 0xf2, 0x92, 0x83, 0x6f, 0xfb, 0x97, 0x96, 0x7e, 0x30, 0x9a,
	0x61, 0x57, 0xd9, 0xbf, 0x84, 0x16, 0x92, 0x57, 0xc7, 0x7e, 0x9b, 0xa9, 0xfc, 0xa7, 0x85, 0xe2,
	0x7e, 0x4c, 0x04, 0x8a, 0x04, 0x57, 0xf2, 0xc6, 0xc9, 0x35, 0x6c, 0xd8, 0x6f, 0xea, 0x6a, 0x79,
	0x08, 0xaf, 0x72, 0x4d, 0x83, 0x45, 0x54, 0xf0, 0x75, 0x15, 0x29, 0xf8, 0x6d, 0xfb, 0xbc, 0xae,
	0x1e, 0x7a, 0x99, 0x74, 0xdb, 0xfe, 0x67, 0x8c, 0xc9, 0x78, 0xa2, 0x69, 0x23, 0xb7, 0x53, 0xc1,
	0xc9, 0x7e, 0x9e, 0x77, 0x47, 0x32, 0x69, 0xa3, 0x79, 0x99, 0x82, 0xc3, 0xe4, 0x72, 0x2e, 0xbb,
	0x29, 0x99, 0xac, 0xba, 0x01, 0x0f, 0xfd, 0x66, 0xc4, 0x69, 0x5c, 0x7d, 0x52, 0x32, 0xb3, 0x44,
	0xc1, 0xdd, 0x50, 0x2b, 0xca, 0x18, 0xa7, 0x84, 0xc9, 0xd3, 0x60, 0xc6, 0x78, 0x1a, 0xd8, 0xdb,
	0xf1, 0xc3, 0xdd, 0xc4, 0x99, 0x24, 0xcf, 0x2c, 0xef, 0x71, 0xf2, 0x52, 0x42, 0x7b, 0x0f, 0x2d,
	0x83, 0x09, 0xd7, 0x0b, 0x7d, 0x3e, 0xd8, 0xf3, 0x99, 0xf4, 0x2c, 0xe7, 0xd5, 0x71, 0x88, 0x2e,
	0x7e, 0xa7, 0x15, 0xa3, 0x8f, 0x88, 0xc2, 0x50, 0xf6, 0x11, 0xc2, 0x11, 0x3d, 0x14, 0x74, 0x7d,
	0xec, 0x05, 0x9c, 0xb4, 0xd5, 0xf3, 0x5a, 0x8d, 0xd6, 0x7e, 0xfd, 0x06, 0x9a, 0x01, 0xab, 0xf8,
	0x6b, 0x0b, 0x95, 0x64, 0x6b, 0x84, 0x3f, 0xc8, 0xf3, 0xfa, 0x49, 0xf5, 0x6a, 0xf5, 0x1b, 0x93,
	0xa8, 0x2a, 0x4a, 0x5d, 0xfb, 0xf9, 0x5f, 0xfe, 0xf1, 0xab, 0x82, 0x83, 0x57, 0x9d, 0x31, 0x1b,
	0x4e, 0xba, 0xb1, 0x35, 0xdb, 0x66, 0xfc, 0x95, 0x85, 0x66, 0xe0, 0xca, 0xc7, 0xeb, 0xb9, 0x5f,
	0x6d, 0xda, 0x6d, 0x27, 0xfb, 0x85, 0xd3, 0x17, 0x0b, 0xec, 0x0d, 0xf0, 0x75, 0x1d, 0x5f, 0xcf,
	0xe8, 0xeb, 0xa3, 0x23, 0xf1, 0xed, 0x9c, 0xca, 0x6e, 0x70, 0x88, 0xff, 0x66, 0xa1, 0x79, 0xb3,
	0x15, 0xc4, 0x9b, 0xb9, 0x7d, 0x4f, 0x37, 0x9e, 0xf5, 0xad, 0xc9, 0x0d, 0xa8, 0xf8, 0xdf, 0x06,
	0x4c, 0x5b, 0x78, 0x23, 0x17, 0xa6, 0x23, 0xd5, 0xaa, 0x26, 0xd8, 0x7e, 0x2b, 0x12, 0x22, 0x6e,
	0xfd, 0x9c, 0x09, 0x31, 0xda, 0xd9, 0xfa, 0xdb, 0x19, 0x35, 0x85, 0x8e, 0xbd, 0x09, 0x8e, 0x7f,
	0x80, 0xdf, 0xcf, 0xec, 0x78, 0xc4, 0x48, 0xe8, 0x9c, 0xaa, 0x1e, 0x67, 0x88, 0xbf, 0xb1, 0xd0,
	0x62, 0xba, 0xff, 0xc5, 0xdb, 0xb9, 0xc3, 0x39, 0xda, 0x5a, 0xd7, 0x77, 0x5e, 0xc5, 0x84, 0xca,
	0x49, 0x7e, 0x68, 0xf1, 0xf7, 0x91, 0x2f, 0x70, 0x00, 0xb4, 0x54, 0x27, 0x98, 0x13, 0xda, 0x59,
	0x0d, 0x6d, 0x4e, 0x68, 0x67, 0x36, 0xbd, 0x13, 0x40, 0x4b, 0xff, 0xe6, 0x85, 0x9f, 0x59, 0x68,
	0x21, 0xd5, 0x95, 0xe2, 0xad, 0xbc, 0x6e, 0x8d, 0x36, 0xc2, 0xf5, 0xed, 0x57, 0xb0, 0xa0, 0x70,
	0x7d, 0x0c, 0xb8, 0x76, 0xf0, 0x56, 0x1e, 0x5c, 0xc2, 0x0c, 0xa4, 0x8e, 0x19, 0xb4, 0xfc, 0x93,
	0x85, 0x4a, 0xb2, 0x99, 0xc9, 0x57, 0x92, 0x53, 0x0d, 0x69, 0xbe, 0x92, 0x9c, 0xee, 0x9d, 0x26,
	0xa4, 0x1f, 0x73, 0x4e, 0xe5, 0x05, 0x3e, 0xc4, 0xbf, 0x13, 0x10, 0xe0, 0x15, 0x9a, 0x13, 0x82,
	0xd9, 0x8e, 0xd5, 0x73, 0x3d, 0x77, 0xed, 0x2d, 0x70, 0xfa, 0x06, 0x5e, 0xcf, 0xec, 0x34, 0xbc,
	0x8f, 0x9d, 0x53, 0xd5, 0xe3, 0x0d, 0xf1, 0x53, 0x0b, 0xcd, 0x19, 0xf7, 0x3d, 0xde, 0xc8, 0x17,
	0xc2, 0xd1, 0xce, 0xb0, 0x7e, 0x2d, 0xcf, 0xf5, 0x12, 0x6b, 0xdb, 0x3f, 0x02, 0x20, 0x7b, 0x78,
	0x27, 0x7b, 0xf4, 0x63, 0x65, 0xe7, 0xd4, 0x7c, 0x3c, 0x0c, 0xf1, 0x13, 0x0b, 0xa1, 0xe4, 0xf9,
	0x89, 0x6f, 0xe5, 0x42, 0x34, 0xda, 0xac, 0xd6, 0x73, 0x3f, 0x3d, 0xed, 0x7d, 0xc0, 0xb2, 0x8b,
	0xb7, 0x33, 0x63, 0x49, 0x7e, 0x62, 0x76, 0x4e, 0x8d, 0x36, 0x78, 0x88, 0xff, 0x60, 0xa1, 0xb2,
	0xee, 0x81, 0xf1, 0x87, 0x39, 0x53, 0x63, 0x76, 0xce, 0xf5, 0xcc, 0xef, 0x52, 0xa9, 0x66, 0xef,
	0x01, 0x88, 0x0d, 0x7c, 0x33, 0x47, 0x42, 0x40, 0x53, 0x64, 0x43, 0x35, 0xe4, 0x43, 0xfc, 0x47,
	0xe1, 0xbf, 0x6e, 0x18, 0x3f, 0xcc, 0x7f, 0x2a, 0xe2, 0x16, 0xbe, 0x7e, 0x73, 0x32, 0x65, 0x75,
	0xb8, 0xd7, 0x01, 0xcd, 0x1a, 0xbe, 0x92, 0xef, 0x9c, 0x10, 0x86, 0xff, 0x2a, 0xce, 0x87, 0xd1,
	0x0c, 0x6d, 0x4c, 0xc6, 0xa6, 0x18, 0xc7, 0xe6, 0xc4, 0xfa, 0x0a, 0xca, 0x47, 0x00, 0x65, 0x13,
	0xdf, 0x9a, 0x80, 0x5d, 0x46, 0xb5, 0xfa, 0xca, 0x42, 0xb3, 0xaa, 0xd1, 0xc1, 0x37, 0x72, 0xfa,
	0x64, 0x34, 0x51, 0xf5, 0xd5, 0xcc, 0xc7, 0x43, 0x68, 0xd9, 0x37, 0xc1, 0xfb, 0xeb, 0xf8, 0x6a,
	0x0e, 0xef, 0x85, 0xa2, 0x73, 0xea, 0xb7, 0x87, 0xf8, 0x5f, 0xf0, 0x94, 0x34, 0x7e, 0x27, 0xdf,
	0x9c, 0xb0, 0x5a, 0xb1, 0x09, 0x9f, 0x92, 0xe3, 0x7d, 0x91, 0xfd, 0x19, 0x20, 0xba, 0x8b, 0xef,
	0x9c, 0x81, 0x68, 0xf7, 0x25, 0x95, 0x2b, 0xc9, 0x87, 0x73, 0x6a, 0x76, 0x7a, 0x43, 0xfc, 0x1f,
	0x0b, 0xe1, 0xf1, 0xee, 0x07, 0x7f, 0x94, 0xc7, 0xdd, 0xef, 0xec, 0xc1, 0xea, 0xb7, 0x5f, 0xd5,
	0x8c, 0xc2, 0x7e, 0x00, 0xd8, 0x3f, 0xc1, 0xfb, 0x19, 0xb1, 0x87, 0x60, 0xea, 0xa8, 0x6d, 0xd8,
	0x1a, 0x29, 0xde, 0x3b, 0xee, 0x93, 0xe7, 0xcb, 0xd6, 0xd3, 0xe7, 0xcb, 0xd6, 0xdf, 0x9f, 0x2f,
	0x5b, 0xbf, 0x78, 0xb1, 0x3c, 0xf5, 0xf4, 0xc5, 0xf2, 0xd4, 0x37, 0x2f, 0x96, 0xa7, 0x7e, 0xb2,
	0x6e, 0xfc, 0xf3, 0xe5, 0x7f, 0x6d, 0xf7, 0xa5, 0xb1, 0x21, 0xfc, 0x4b, 0xa6, 0x59, 0x82, 0xdf,
	0x6e, 0xdf, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xf6, 0x86, 0x18, 0x26, 0x1d, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of QCard items.
	QCard(ctx context.Context, in *QueryQCardRequest, opts ...grpc.CallOption) (*OutpCard, error)
	// Queries a list of QCardContent items.
	QCardContent(ctx context.Context, in *QueryQCardContentRequest, opts ...grpc.CallOption) (*QueryQCardContentResponse, error)
	// Queries a list of QUser items.
	QUser(ctx context.Context, in *QueryQUserRequest, opts ...grpc.CallOption) (*User, error)
	// Queries a list of QCardchainInfo items.
	QCardchainInfo(ctx context.Context, in *QueryQCardchainInfoRequest, opts ...grpc.CallOption) (*QueryQCardchainInfoResponse, error)
	// Queries a list of QVotingResults items.
	QVotingResults(ctx context.Context, in *QueryQVotingResultsRequest, opts ...grpc.CallOption) (*QueryQVotingResultsResponse, error)
	// Queries a list of QVotableCards items.
	QVotableCards(ctx context.Context, in *QueryQVotableCardsRequest, opts ...grpc.CallOption) (*QueryQVotableCardsResponse, error)
	// Queries a list of QCards items.
	QCards(ctx context.Context, in *QueryQCardsRequest, opts ...grpc.CallOption) (*QueryQCardsResponse, error)
	// Queries a list of QMatch items.
	QMatch(ctx context.Context, in *QueryQMatchRequest, opts ...grpc.CallOption) (*Match, error)
	// Queries a list of QCollection items.
	QCollection(ctx context.Context, in *QueryQCollectionRequest, opts ...grpc.CallOption) (*OutpCollection, error)
	// Queries a list of QSellOffer items.
	QSellOffer(ctx context.Context, in *QueryQSellOfferRequest, opts ...grpc.CallOption) (*SellOffer, error)
	// Queries a list of QCouncil items.
	QCouncil(ctx context.Context, in *QueryQCouncilRequest, opts ...grpc.CallOption) (*Council, error)
	// Queries a list of QMatches items.
	QMatches(ctx context.Context, in *QueryQMatchesRequest, opts ...grpc.CallOption) (*QueryQMatchesResponse, error)
	// Queries a list of QSellOffers items.
	QSellOffers(ctx context.Context, in *QueryQSellOffersRequest, opts ...grpc.CallOption) (*QueryQSellOffersResponse, error)
	// Queries a list of QServer items.
	QServer(ctx context.Context, in *QueryQServerRequest, opts ...grpc.CallOption) (*Server, error)
	// Queries a list of QCollections items.
	QCollections(ctx context.Context, in *QueryQCollectionsRequest, opts ...grpc.CallOption) (*QueryQCollectionsResponse, error)
	// Queries a list of RarityDistribution items.
	RarityDistribution(ctx context.Context, in *QueryRarityDistributionRequest, opts ...grpc.CallOption) (*QueryRarityDistributionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCard(ctx context.Context, in *QueryQCardRequest, opts ...grpc.CallOption) (*OutpCard, error) {
	out := new(OutpCard)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCardContent(ctx context.Context, in *QueryQCardContentRequest, opts ...grpc.CallOption) (*QueryQCardContentResponse, error) {
	out := new(QueryQCardContentResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCardContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QUser(ctx context.Context, in *QueryQUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCardchainInfo(ctx context.Context, in *QueryQCardchainInfoRequest, opts ...grpc.CallOption) (*QueryQCardchainInfoResponse, error) {
	out := new(QueryQCardchainInfoResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCardchainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QVotingResults(ctx context.Context, in *QueryQVotingResultsRequest, opts ...grpc.CallOption) (*QueryQVotingResultsResponse, error) {
	out := new(QueryQVotingResultsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QVotingResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QVotableCards(ctx context.Context, in *QueryQVotableCardsRequest, opts ...grpc.CallOption) (*QueryQVotableCardsResponse, error) {
	out := new(QueryQVotableCardsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QVotableCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCards(ctx context.Context, in *QueryQCardsRequest, opts ...grpc.CallOption) (*QueryQCardsResponse, error) {
	out := new(QueryQCardsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QMatch(ctx context.Context, in *QueryQMatchRequest, opts ...grpc.CallOption) (*Match, error) {
	out := new(Match)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCollection(ctx context.Context, in *QueryQCollectionRequest, opts ...grpc.CallOption) (*OutpCollection, error) {
	out := new(OutpCollection)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QSellOffer(ctx context.Context, in *QueryQSellOfferRequest, opts ...grpc.CallOption) (*SellOffer, error) {
	out := new(SellOffer)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QSellOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCouncil(ctx context.Context, in *QueryQCouncilRequest, opts ...grpc.CallOption) (*Council, error) {
	out := new(Council)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCouncil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QMatches(ctx context.Context, in *QueryQMatchesRequest, opts ...grpc.CallOption) (*QueryQMatchesResponse, error) {
	out := new(QueryQMatchesResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QSellOffers(ctx context.Context, in *QueryQSellOffersRequest, opts ...grpc.CallOption) (*QueryQSellOffersResponse, error) {
	out := new(QueryQSellOffersResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QSellOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QServer(ctx context.Context, in *QueryQServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCollections(ctx context.Context, in *QueryQCollectionsRequest, opts ...grpc.CallOption) (*QueryQCollectionsResponse, error) {
	out := new(QueryQCollectionsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RarityDistribution(ctx context.Context, in *QueryRarityDistributionRequest, opts ...grpc.CallOption) (*QueryRarityDistributionResponse, error) {
	out := new(QueryRarityDistributionResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/RarityDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of QCard items.
	QCard(context.Context, *QueryQCardRequest) (*OutpCard, error)
	// Queries a list of QCardContent items.
	QCardContent(context.Context, *QueryQCardContentRequest) (*QueryQCardContentResponse, error)
	// Queries a list of QUser items.
	QUser(context.Context, *QueryQUserRequest) (*User, error)
	// Queries a list of QCardchainInfo items.
	QCardchainInfo(context.Context, *QueryQCardchainInfoRequest) (*QueryQCardchainInfoResponse, error)
	// Queries a list of QVotingResults items.
	QVotingResults(context.Context, *QueryQVotingResultsRequest) (*QueryQVotingResultsResponse, error)
	// Queries a list of QVotableCards items.
	QVotableCards(context.Context, *QueryQVotableCardsRequest) (*QueryQVotableCardsResponse, error)
	// Queries a list of QCards items.
	QCards(context.Context, *QueryQCardsRequest) (*QueryQCardsResponse, error)
	// Queries a list of QMatch items.
	QMatch(context.Context, *QueryQMatchRequest) (*Match, error)
	// Queries a list of QCollection items.
	QCollection(context.Context, *QueryQCollectionRequest) (*OutpCollection, error)
	// Queries a list of QSellOffer items.
	QSellOffer(context.Context, *QueryQSellOfferRequest) (*SellOffer, error)
	// Queries a list of QCouncil items.
	QCouncil(context.Context, *QueryQCouncilRequest) (*Council, error)
	// Queries a list of QMatches items.
	QMatches(context.Context, *QueryQMatchesRequest) (*QueryQMatchesResponse, error)
	// Queries a list of QSellOffers items.
	QSellOffers(context.Context, *QueryQSellOffersRequest) (*QueryQSellOffersResponse, error)
	// Queries a list of QServer items.
	QServer(context.Context, *QueryQServerRequest) (*Server, error)
	// Queries a list of QCollections items.
	QCollections(context.Context, *QueryQCollectionsRequest) (*QueryQCollectionsResponse, error)
	// Queries a list of RarityDistribution items.
	RarityDistribution(context.Context, *QueryRarityDistributionRequest) (*QueryRarityDistributionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QCard(ctx context.Context, req *QueryQCardRequest) (*OutpCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCard not implemented")
}
func (*UnimplementedQueryServer) QCardContent(ctx context.Context, req *QueryQCardContentRequest) (*QueryQCardContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCardContent not implemented")
}
func (*UnimplementedQueryServer) QUser(ctx context.Context, req *QueryQUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QUser not implemented")
}
func (*UnimplementedQueryServer) QCardchainInfo(ctx context.Context, req *QueryQCardchainInfoRequest) (*QueryQCardchainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCardchainInfo not implemented")
}
func (*UnimplementedQueryServer) QVotingResults(ctx context.Context, req *QueryQVotingResultsRequest) (*QueryQVotingResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QVotingResults not implemented")
}
func (*UnimplementedQueryServer) QVotableCards(ctx context.Context, req *QueryQVotableCardsRequest) (*QueryQVotableCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QVotableCards not implemented")
}
func (*UnimplementedQueryServer) QCards(ctx context.Context, req *QueryQCardsRequest) (*QueryQCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCards not implemented")
}
func (*UnimplementedQueryServer) QMatch(ctx context.Context, req *QueryQMatchRequest) (*Match, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QMatch not implemented")
}
func (*UnimplementedQueryServer) QCollection(ctx context.Context, req *QueryQCollectionRequest) (*OutpCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCollection not implemented")
}
func (*UnimplementedQueryServer) QSellOffer(ctx context.Context, req *QueryQSellOfferRequest) (*SellOffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QSellOffer not implemented")
}
func (*UnimplementedQueryServer) QCouncil(ctx context.Context, req *QueryQCouncilRequest) (*Council, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCouncil not implemented")
}
func (*UnimplementedQueryServer) QMatches(ctx context.Context, req *QueryQMatchesRequest) (*QueryQMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QMatches not implemented")
}
func (*UnimplementedQueryServer) QSellOffers(ctx context.Context, req *QueryQSellOffersRequest) (*QueryQSellOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QSellOffers not implemented")
}
func (*UnimplementedQueryServer) QServer(ctx context.Context, req *QueryQServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QServer not implemented")
}
func (*UnimplementedQueryServer) QCollections(ctx context.Context, req *QueryQCollectionsRequest) (*QueryQCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCollections not implemented")
}
func (*UnimplementedQueryServer) RarityDistribution(ctx context.Context, req *QueryRarityDistributionRequest) (*QueryRarityDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RarityDistribution not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCard(ctx, req.(*QueryQCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCardContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCardContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCardContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCardContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCardContent(ctx, req.(*QueryQCardContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QUser(ctx, req.(*QueryQUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCardchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCardchainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCardchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCardchainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCardchainInfo(ctx, req.(*QueryQCardchainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QVotingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQVotingResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QVotingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QVotingResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QVotingResults(ctx, req.(*QueryQVotingResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QVotableCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQVotableCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QVotableCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QVotableCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QVotableCards(ctx, req.(*QueryQVotableCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCards(ctx, req.(*QueryQCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QMatch(ctx, req.(*QueryQMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCollection(ctx, req.(*QueryQCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QSellOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQSellOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QSellOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QSellOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QSellOffer(ctx, req.(*QueryQSellOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCouncil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCouncil(ctx, req.(*QueryQCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QMatches(ctx, req.(*QueryQMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QSellOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQSellOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QSellOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QSellOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QSellOffers(ctx, req.(*QueryQSellOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QServer(ctx, req.(*QueryQServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCollections(ctx, req.(*QueryQCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RarityDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRarityDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RarityDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/RarityDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RarityDistribution(ctx, req.(*QueryRarityDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DecentralCardGame.cardchain.cardchain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QCard",
			Handler:    _Query_QCard_Handler,
		},
		{
			MethodName: "QCardContent",
			Handler:    _Query_QCardContent_Handler,
		},
		{
			MethodName: "QUser",
			Handler:    _Query_QUser_Handler,
		},
		{
			MethodName: "QCardchainInfo",
			Handler:    _Query_QCardchainInfo_Handler,
		},
		{
			MethodName: "QVotingResults",
			Handler:    _Query_QVotingResults_Handler,
		},
		{
			MethodName: "QVotableCards",
			Handler:    _Query_QVotableCards_Handler,
		},
		{
			MethodName: "QCards",
			Handler:    _Query_QCards_Handler,
		},
		{
			MethodName: "QMatch",
			Handler:    _Query_QMatch_Handler,
		},
		{
			MethodName: "QCollection",
			Handler:    _Query_QCollection_Handler,
		},
		{
			MethodName: "QSellOffer",
			Handler:    _Query_QSellOffer_Handler,
		},
		{
			MethodName: "QCouncil",
			Handler:    _Query_QCouncil_Handler,
		},
		{
			MethodName: "QMatches",
			Handler:    _Query_QMatches_Handler,
		},
		{
			MethodName: "QSellOffers",
			Handler:    _Query_QSellOffers_Handler,
		},
		{
			MethodName: "QServer",
			Handler:    _Query_QServer_Handler,
		},
		{
			MethodName: "QCollections",
			Handler:    _Query_QCollections_Handler,
		},
		{
			MethodName: "RarityDistribution",
			Handler:    _Query_RarityDistribution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cardchain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryQCardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardId) > 0 {
		i -= len(m.CardId)
		copy(dAtA[i:], m.CardId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardContentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardContentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardContentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardId) > 0 {
		i -= len(m.CardId)
		copy(dAtA[i:], m.CardId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardContentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardContentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardContentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardchainInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardchainInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardchainInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryQCardchainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardchainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardchainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CouncilsNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CouncilsNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.SellOffersNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SellOffersNumber))
		i--
		dAtA[i] = 0x28
	}
	if m.MatchesNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MatchesNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.CardsNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CardsNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ActiveCollections) > 0 {
		dAtA3 := make([]byte, len(m.ActiveCollections)*10)
		var j2 int
		for _, num := range m.ActiveCollections {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintQuery(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.CardAuctionPrice.Size()
		i -= size
		if _, err := m.CardAuctionPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryQVotingResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVotingResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVotingResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryQVotingResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVotingResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVotingResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastVotingResults != nil {
		{
			size, err := m.LastVotingResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQVotableCardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVotableCardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVotableCardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQVotableCardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVotableCardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVotableCardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteRights) > 0 {
		for iNdEx := len(m.VoteRights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteRights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NoVoteRights {
		i--
		if m.NoVoteRights {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Unregistered {
		i--
		if m.Unregistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotesContains) > 0 {
		i -= len(m.NotesContains)
		copy(dAtA[i:], m.NotesContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NotesContains)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeywordsContains) > 0 {
		i -= len(m.KeywordsContains)
		copy(dAtA[i:], m.KeywordsContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeywordsContains)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SortBy) > 0 {
		i -= len(m.SortBy)
		copy(dAtA[i:], m.SortBy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SortBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Classes) > 0 {
		i -= len(m.Classes)
		copy(dAtA[i:], m.Classes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Classes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardsList) > 0 {
		dAtA6 := make([]byte, len(m.CardsList)*10)
		var j5 int
		for _, num := range m.CardsList {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintQuery(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQMatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQMatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQMatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MatchId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MatchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQSellOfferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQSellOfferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQSellOfferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOfferId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SellOfferId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCouncilRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCouncilRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCouncilRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CouncilId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CouncilId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQMatchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQMatchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQMatchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ignore != nil {
		{
			size, err := m.Ignore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CardsPlayed) > 0 {
		dAtA9 := make([]byte, len(m.CardsPlayed)*10)
		var j8 int
		for _, num := range m.CardsPlayed {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintQuery(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x32
	}
	if m.Outcome != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Outcome))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContainsUsers) > 0 {
		for iNdEx := len(m.ContainsUsers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContainsUsers[iNdEx])
			copy(dAtA[i:], m.ContainsUsers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ContainsUsers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TimestampUp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimestampUp))
		i--
		dAtA[i] = 0x10
	}
	if m.TimestampDown != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimestampDown))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IgnoreMatches) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IgnoreMatches) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IgnoreMatches) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Outcome {
		i--
		if m.Outcome {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQMatchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQMatchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQMatchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for iNdEx := len(m.Matches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Matches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MatchesList) > 0 {
		dAtA11 := make([]byte, len(m.MatchesList)*10)
		var j10 int
		for _, num := range m.MatchesList {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintQuery(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQSellOffersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQSellOffersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQSellOffersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ignore != nil {
		{
			size, err := m.Ignore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Card != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Card))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PriceUp) > 0 {
		i -= len(m.PriceUp)
		copy(dAtA[i:], m.PriceUp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceUp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PriceDown) > 0 {
		i -= len(m.PriceDown)
		copy(dAtA[i:], m.PriceDown)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceDown)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IgnoreSellOffers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IgnoreSellOffers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IgnoreSellOffers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Card {
		i--
		if m.Card {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQSellOffersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQSellOffersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQSellOffersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellOffers) > 0 {
		for iNdEx := len(m.SellOffers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellOffers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SellOffersIds) > 0 {
		dAtA14 := make([]byte, len(m.SellOffersIds)*10)
		var j13 int
		for _, num := range m.SellOffersIds {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintQuery(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQServerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQServerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQServerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQServerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQServerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryQCollectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCollectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCollectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContainsCards) > 0 {
		dAtA16 := make([]byte, len(m.ContainsCards)*10)
		var j15 int
		for _, num := range m.ContainsCards {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintQuery(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contributors) > 0 {
		for iNdEx := len(m.Contributors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contributors[iNdEx])
			copy(dAtA[i:], m.Contributors[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Contributors[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IgnoreStatus {
		i--
		if m.IgnoreStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCollectionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCollectionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCollectionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollectionIds) > 0 {
		dAtA18 := make([]byte, len(m.CollectionIds)*10)
		var j17 int
		for _, num := range m.CollectionIds {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintQuery(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRarityDistributionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRarityDistributionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRarityDistributionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRarityDistributionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRarityDistributionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRarityDistributionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wanted) > 0 {
		dAtA20 := make([]byte, len(m.Wanted)*10)
		var j19 int
		for _, num := range m.Wanted {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintQuery(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Current) > 0 {
		dAtA22 := make([]byte, len(m.Current)*10)
		var j21 int
		for _, num := range m.Current {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintQuery(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryQCardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQCardContentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQCardContentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQCardchainInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryQCardchainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CardAuctionPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.ActiveCollections) > 0 {
		l = 0
		for _, e := range m.ActiveCollections {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.CardsNumber != 0 {
		n += 1 + sovQuery(uint64(m.CardsNumber))
	}
	if m.MatchesNumber != 0 {
		n += 1 + sovQuery(uint64(m.MatchesNumber))
	}
	if m.SellOffersNumber != 0 {
		n += 1 + sovQuery(uint64(m.SellOffersNumber))
	}
	if m.CouncilsNumber != 0 {
		n += 1 + sovQuery(uint64(m.CouncilsNumber))
	}
	return n
}

func (m *QueryQVotingResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryQVotingResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastVotingResults != nil {
		l = m.LastVotingResults.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQVotableCardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQVotableCardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unregistered {
		n += 2
	}
	if m.NoVoteRights {
		n += 2
	}
	if len(m.VoteRights) > 0 {
		for _, e := range m.VoteRights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryQCardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Classes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SortBy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.KeywordsContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NotesContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQCardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CardsList) > 0 {
		l = 0
		for _, e := range m.CardsList {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryQMatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatchId != 0 {
		n += 1 + sovQuery(uint64(m.MatchId))
	}
	return n
}

func (m *QueryQCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionId != 0 {
		n += 1 + sovQuery(uint64(m.CollectionId))
	}
	return n
}

func (m *QueryQSellOfferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOfferId != 0 {
		n += 1 + sovQuery(uint64(m.SellOfferId))
	}
	return n
}

func (m *QueryQCouncilRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CouncilId != 0 {
		n += 1 + sovQuery(uint64(m.CouncilId))
	}
	return n
}

func (m *QueryQMatchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimestampDown != 0 {
		n += 1 + sovQuery(uint64(m.TimestampDown))
	}
	if m.TimestampUp != 0 {
		n += 1 + sovQuery(uint64(m.TimestampUp))
	}
	if len(m.ContainsUsers) > 0 {
		for _, s := range m.ContainsUsers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Outcome != 0 {
		n += 1 + sovQuery(uint64(m.Outcome))
	}
	if len(m.CardsPlayed) > 0 {
		l = 0
		for _, e := range m.CardsPlayed {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.Ignore != nil {
		l = m.Ignore.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IgnoreMatches) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Outcome {
		n += 2
	}
	return n
}

func (m *QueryQMatchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchesList) > 0 {
		l = 0
		for _, e := range m.MatchesList {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryQSellOffersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PriceDown)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceUp)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Card != 0 {
		n += 1 + sovQuery(uint64(m.Card))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Ignore != nil {
		l = m.Ignore.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IgnoreSellOffers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.Card {
		n += 2
	}
	return n
}

func (m *QueryQSellOffersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SellOffersIds) > 0 {
		l = 0
		for _, e := range m.SellOffersIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.SellOffers) > 0 {
		for _, e := range m.SellOffers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryQServerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryQServerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryQCollectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.IgnoreStatus {
		n += 2
	}
	if len(m.Contributors) > 0 {
		for _, s := range m.Contributors {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ContainsCards) > 0 {
		l = 0
		for _, e := range m.ContainsCards {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQCollectionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CollectionIds) > 0 {
		l = 0
		for _, e := range m.CollectionIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryRarityDistributionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionId != 0 {
		n += 1 + sovQuery(uint64(m.CollectionId))
	}
	return n
}

func (m *QueryRarityDistributionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Current) > 0 {
		l = 0
		for _, e := range m.Current {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.Wanted) > 0 {
		l = 0
		for _, e := range m.Wanted {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardContentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardContentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardContentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardContentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardContentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardContentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardchainInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardchainInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardchainInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardchainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardchainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardchainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardAuctionPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CardAuctionPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveCollections = append(m.ActiveCollections, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveCollections) == 0 {
					m.ActiveCollections = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveCollections = append(m.ActiveCollections, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCollections", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsNumber", wireType)
			}
			m.CardsNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardsNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchesNumber", wireType)
			}
			m.MatchesNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchesNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOffersNumber", wireType)
			}
			m.SellOffersNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOffersNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouncilsNumber", wireType)
			}
			m.CouncilsNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouncilsNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVotingResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVotingResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVotingResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVotingResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVotingResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVotingResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastVotingResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastVotingResults == nil {
				m.LastVotingResults = &VotingResults{}
			}
			if err := m.LastVotingResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVotableCardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVotableCardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVotableCardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVotableCardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVotableCardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVotableCardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unregistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unregistered = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoVoteRights", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoVoteRights = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteRights = append(m.VoteRights, &VoteRight{})
			if err := m.VoteRights[len(m.VoteRights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= QueryQCardsRequest_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeywordsContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeywordsContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotesContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotesContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardsList = append(m.CardsList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardsList) == 0 {
					m.CardsList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardsList = append(m.CardsList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQMatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQMatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQMatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQSellOfferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQSellOfferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQSellOfferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOfferId", wireType)
			}
			m.SellOfferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOfferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCouncilRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCouncilRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCouncilRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouncilId", wireType)
			}
			m.CouncilId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouncilId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQMatchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQMatchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQMatchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampDown", wireType)
			}
			m.TimestampDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampDown |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampUp", wireType)
			}
			m.TimestampUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampUp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainsUsers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainsUsers = append(m.ContainsUsers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			m.Outcome = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Outcome |= Outcome(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardsPlayed = append(m.CardsPlayed, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardsPlayed) == 0 {
					m.CardsPlayed = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardsPlayed = append(m.CardsPlayed, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsPlayed", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ignore == nil {
				m.Ignore = &IgnoreMatches{}
			}
			if err := m.Ignore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IgnoreMatches) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IgnoreMatches: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IgnoreMatches: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Outcome = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQMatchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQMatchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQMatchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MatchesList = append(m.MatchesList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MatchesList) == 0 {
					m.MatchesList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MatchesList = append(m.MatchesList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchesList", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, &Match{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQSellOffersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQSellOffersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQSellOffersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceUp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceUp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SellOfferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ignore == nil {
				m.Ignore = &IgnoreSellOffers{}
			}
			if err := m.Ignore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IgnoreSellOffers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IgnoreSellOffers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IgnoreSellOffers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Card = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQSellOffersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQSellOffersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQSellOffersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SellOffersIds = append(m.SellOffersIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SellOffersIds) == 0 {
					m.SellOffersIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SellOffersIds = append(m.SellOffersIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOffersIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOffers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOffers = append(m.SellOffers, &SellOffer{})
			if err := m.SellOffers[len(m.SellOffers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQServerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQServerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQServerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCollectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCollectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCollectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreStatus = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contributors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contributors = append(m.Contributors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ContainsCards = append(m.ContainsCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ContainsCards) == 0 {
					m.ContainsCards = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ContainsCards = append(m.ContainsCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainsCards", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCollectionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCollectionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCollectionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CollectionIds = append(m.CollectionIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CollectionIds) == 0 {
					m.CollectionIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CollectionIds = append(m.CollectionIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRarityDistributionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRarityDistributionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRarityDistributionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRarityDistributionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRarityDistributionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRarityDistributionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Current = append(m.Current, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Current) == 0 {
					m.Current = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Current = append(m.Current, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Wanted = append(m.Wanted, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Wanted) == 0 {
					m.Wanted = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Wanted = append(m.Wanted, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Wanted", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
