// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryQCardRequest struct {
	CardId string `protobuf:"bytes,1,opt,name=cardId,proto3" json:"cardId,omitempty"`
}

func (m *QueryQCardRequest) Reset()         { *m = QueryQCardRequest{} }
func (m *QueryQCardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCardRequest) ProtoMessage()    {}
func (*QueryQCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{2}
}
func (m *QueryQCardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardRequest.Merge(m, src)
}
func (m *QueryQCardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardRequest proto.InternalMessageInfo

func (m *QueryQCardRequest) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

type QueryQCardResponse struct {
	Owner              string                                  `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Content            string                                  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Artist             string                                  `protobuf:"bytes,3,opt,name=artist,proto3" json:"artist,omitempty"`
	Image              string                                  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	FullArt            bool                                    `protobuf:"varint,5,opt,name=fullArt,proto3" json:"fullArt,omitempty"`
	Notes              string                                  `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
	Status             Status                                  `protobuf:"varint,7,opt,name=status,proto3,enum=DecentralCardGame.cardchain.cardchain.Status" json:"status,omitempty"`
	VotePool           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,8,opt,name=votePool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"votePool"`
	FairEnoughVotes    uint64                                  `protobuf:"varint,9,opt,name=fairEnoughVotes,proto3" json:"fairEnoughVotes,omitempty"`
	OverpoweredVotes   uint64                                  `protobuf:"varint,10,opt,name=overpoweredVotes,proto3" json:"overpoweredVotes,omitempty"`
	UnderpoweredVotes  uint64                                  `protobuf:"varint,11,opt,name=underpoweredVotes,proto3" json:"underpoweredVotes,omitempty"`
	InappropriateVotes uint64                                  `protobuf:"varint,12,opt,name=inappropriateVotes,proto3" json:"inappropriateVotes,omitempty"`
	Nerflevel          int64                                   `protobuf:"varint,13,opt,name=nerflevel,proto3" json:"nerflevel,omitempty"`
}

func (m *QueryQCardResponse) Reset()         { *m = QueryQCardResponse{} }
func (m *QueryQCardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQCardResponse) ProtoMessage()    {}
func (*QueryQCardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{3}
}
func (m *QueryQCardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardResponse.Merge(m, src)
}
func (m *QueryQCardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardResponse proto.InternalMessageInfo

func (m *QueryQCardResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryQCardResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *QueryQCardResponse) GetArtist() string {
	if m != nil {
		return m.Artist
	}
	return ""
}

func (m *QueryQCardResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *QueryQCardResponse) GetFullArt() bool {
	if m != nil {
		return m.FullArt
	}
	return false
}

func (m *QueryQCardResponse) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *QueryQCardResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_scheme
}

func (m *QueryQCardResponse) GetFairEnoughVotes() uint64 {
	if m != nil {
		return m.FairEnoughVotes
	}
	return 0
}

func (m *QueryQCardResponse) GetOverpoweredVotes() uint64 {
	if m != nil {
		return m.OverpoweredVotes
	}
	return 0
}

func (m *QueryQCardResponse) GetUnderpoweredVotes() uint64 {
	if m != nil {
		return m.UnderpoweredVotes
	}
	return 0
}

func (m *QueryQCardResponse) GetInappropriateVotes() uint64 {
	if m != nil {
		return m.InappropriateVotes
	}
	return 0
}

func (m *QueryQCardResponse) GetNerflevel() int64 {
	if m != nil {
		return m.Nerflevel
	}
	return 0
}

type QueryQCardContentRequest struct {
	CardId string `protobuf:"bytes,1,opt,name=cardId,proto3" json:"cardId,omitempty"`
}

func (m *QueryQCardContentRequest) Reset()         { *m = QueryQCardContentRequest{} }
func (m *QueryQCardContentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCardContentRequest) ProtoMessage()    {}
func (*QueryQCardContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{4}
}
func (m *QueryQCardContentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardContentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardContentRequest.Merge(m, src)
}
func (m *QueryQCardContentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardContentRequest proto.InternalMessageInfo

func (m *QueryQCardContentRequest) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

type QueryQCardContentResponse struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *QueryQCardContentResponse) Reset()         { *m = QueryQCardContentResponse{} }
func (m *QueryQCardContentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQCardContentResponse) ProtoMessage()    {}
func (*QueryQCardContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{5}
}
func (m *QueryQCardContentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardContentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardContentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardContentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardContentResponse.Merge(m, src)
}
func (m *QueryQCardContentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardContentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardContentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardContentResponse proto.InternalMessageInfo

func (m *QueryQCardContentResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type QueryQUserRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryQUserRequest) Reset()         { *m = QueryQUserRequest{} }
func (m *QueryQUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQUserRequest) ProtoMessage()    {}
func (*QueryQUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{6}
}
func (m *QueryQUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQUserRequest.Merge(m, src)
}
func (m *QueryQUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQUserRequest proto.InternalMessageInfo

func (m *QueryQUserRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryQUserResponse struct {
	Alias            string        `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	OwnedCardSchemes []uint64      `protobuf:"varint,2,rep,packed,name=ownedCardSchemes,proto3" json:"ownedCardSchemes,omitempty"`
	OwnedCards       []uint64      `protobuf:"varint,3,rep,packed,name=ownedCards,proto3" json:"ownedCards,omitempty"`
	VoteRights       []*VoteRight  `protobuf:"bytes,4,rep,name=voteRights,proto3" json:"voteRights,omitempty"`
	CouncilStatus    CouncilStatus `protobuf:"varint,5,opt,name=councilStatus,proto3,enum=DecentralCardGame.cardchain.cardchain.CouncilStatus" json:"councilStatus,omitempty"`
	ReportMatches    bool          `protobuf:"varint,6,opt,name=reportMatches,proto3" json:"reportMatches,omitempty"`
}

func (m *QueryQUserResponse) Reset()         { *m = QueryQUserResponse{} }
func (m *QueryQUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQUserResponse) ProtoMessage()    {}
func (*QueryQUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{7}
}
func (m *QueryQUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQUserResponse.Merge(m, src)
}
func (m *QueryQUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQUserResponse proto.InternalMessageInfo

func (m *QueryQUserResponse) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *QueryQUserResponse) GetOwnedCardSchemes() []uint64 {
	if m != nil {
		return m.OwnedCardSchemes
	}
	return nil
}

func (m *QueryQUserResponse) GetOwnedCards() []uint64 {
	if m != nil {
		return m.OwnedCards
	}
	return nil
}

func (m *QueryQUserResponse) GetVoteRights() []*VoteRight {
	if m != nil {
		return m.VoteRights
	}
	return nil
}

func (m *QueryQUserResponse) GetCouncilStatus() CouncilStatus {
	if m != nil {
		return m.CouncilStatus
	}
	return CouncilStatus_available
}

func (m *QueryQUserResponse) GetReportMatches() bool {
	if m != nil {
		return m.ReportMatches
	}
	return false
}

type QueryQCardchainInfoRequest struct {
}

func (m *QueryQCardchainInfoRequest) Reset()         { *m = QueryQCardchainInfoRequest{} }
func (m *QueryQCardchainInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCardchainInfoRequest) ProtoMessage()    {}
func (*QueryQCardchainInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{8}
}
func (m *QueryQCardchainInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardchainInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardchainInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardchainInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardchainInfoRequest.Merge(m, src)
}
func (m *QueryQCardchainInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardchainInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardchainInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardchainInfoRequest proto.InternalMessageInfo

type QueryQCardchainInfoResponse struct {
	CardAuctionPrice github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=cardAuctionPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"cardAuctionPrice"`
}

func (m *QueryQCardchainInfoResponse) Reset()         { *m = QueryQCardchainInfoResponse{} }
func (m *QueryQCardchainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQCardchainInfoResponse) ProtoMessage()    {}
func (*QueryQCardchainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{9}
}
func (m *QueryQCardchainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardchainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardchainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardchainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardchainInfoResponse.Merge(m, src)
}
func (m *QueryQCardchainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardchainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardchainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardchainInfoResponse proto.InternalMessageInfo

type QueryQVotingResultsRequest struct {
}

func (m *QueryQVotingResultsRequest) Reset()         { *m = QueryQVotingResultsRequest{} }
func (m *QueryQVotingResultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQVotingResultsRequest) ProtoMessage()    {}
func (*QueryQVotingResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{10}
}
func (m *QueryQVotingResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVotingResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVotingResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVotingResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVotingResultsRequest.Merge(m, src)
}
func (m *QueryQVotingResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVotingResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVotingResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVotingResultsRequest proto.InternalMessageInfo

type QueryQVotingResultsResponse struct {
	LastVotingResults *VotingResults `protobuf:"bytes,1,opt,name=lastVotingResults,proto3" json:"lastVotingResults,omitempty"`
}

func (m *QueryQVotingResultsResponse) Reset()         { *m = QueryQVotingResultsResponse{} }
func (m *QueryQVotingResultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQVotingResultsResponse) ProtoMessage()    {}
func (*QueryQVotingResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{11}
}
func (m *QueryQVotingResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVotingResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVotingResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVotingResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVotingResultsResponse.Merge(m, src)
}
func (m *QueryQVotingResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVotingResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVotingResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVotingResultsResponse proto.InternalMessageInfo

func (m *QueryQVotingResultsResponse) GetLastVotingResults() *VotingResults {
	if m != nil {
		return m.LastVotingResults
	}
	return nil
}

type QueryQVotableCardsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryQVotableCardsRequest) Reset()         { *m = QueryQVotableCardsRequest{} }
func (m *QueryQVotableCardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQVotableCardsRequest) ProtoMessage()    {}
func (*QueryQVotableCardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{12}
}
func (m *QueryQVotableCardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVotableCardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVotableCardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVotableCardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVotableCardsRequest.Merge(m, src)
}
func (m *QueryQVotableCardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVotableCardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVotableCardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVotableCardsRequest proto.InternalMessageInfo

func (m *QueryQVotableCardsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryQVotableCardsResponse struct {
	Unregistered bool         `protobuf:"varint,1,opt,name=unregistered,proto3" json:"unregistered,omitempty"`
	NoVoteRights bool         `protobuf:"varint,2,opt,name=noVoteRights,proto3" json:"noVoteRights,omitempty"`
	VoteRights   []*VoteRight `protobuf:"bytes,3,rep,name=voteRights,proto3" json:"voteRights,omitempty"`
}

func (m *QueryQVotableCardsResponse) Reset()         { *m = QueryQVotableCardsResponse{} }
func (m *QueryQVotableCardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQVotableCardsResponse) ProtoMessage()    {}
func (*QueryQVotableCardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{13}
}
func (m *QueryQVotableCardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVotableCardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVotableCardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVotableCardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVotableCardsResponse.Merge(m, src)
}
func (m *QueryQVotableCardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVotableCardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVotableCardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVotableCardsResponse proto.InternalMessageInfo

func (m *QueryQVotableCardsResponse) GetUnregistered() bool {
	if m != nil {
		return m.Unregistered
	}
	return false
}

func (m *QueryQVotableCardsResponse) GetNoVoteRights() bool {
	if m != nil {
		return m.NoVoteRights
	}
	return false
}

func (m *QueryQVotableCardsResponse) GetVoteRights() []*VoteRight {
	if m != nil {
		return m.VoteRights
	}
	return nil
}

type QueryQCardsRequest struct {
	Owner            string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Status           Status `protobuf:"varint,2,opt,name=status,proto3,enum=DecentralCardGame.cardchain.cardchain.Status" json:"status,omitempty"`
	CardType         string `protobuf:"bytes,3,opt,name=cardType,proto3" json:"cardType,omitempty"`
	Classes          string `protobuf:"bytes,4,opt,name=classes,proto3" json:"classes,omitempty"`
	SortBy           string `protobuf:"bytes,5,opt,name=sortBy,proto3" json:"sortBy,omitempty"`
	NameContains     string `protobuf:"bytes,6,opt,name=nameContains,proto3" json:"nameContains,omitempty"`
	KeywordsContains string `protobuf:"bytes,7,opt,name=keywordsContains,proto3" json:"keywordsContains,omitempty"`
	NotesContains    string `protobuf:"bytes,8,opt,name=notesContains,proto3" json:"notesContains,omitempty"`
}

func (m *QueryQCardsRequest) Reset()         { *m = QueryQCardsRequest{} }
func (m *QueryQCardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQCardsRequest) ProtoMessage()    {}
func (*QueryQCardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{14}
}
func (m *QueryQCardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardsRequest.Merge(m, src)
}
func (m *QueryQCardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardsRequest proto.InternalMessageInfo

func (m *QueryQCardsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryQCardsRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_scheme
}

func (m *QueryQCardsRequest) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *QueryQCardsRequest) GetClasses() string {
	if m != nil {
		return m.Classes
	}
	return ""
}

func (m *QueryQCardsRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *QueryQCardsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *QueryQCardsRequest) GetKeywordsContains() string {
	if m != nil {
		return m.KeywordsContains
	}
	return ""
}

func (m *QueryQCardsRequest) GetNotesContains() string {
	if m != nil {
		return m.NotesContains
	}
	return ""
}

type QueryQCardsResponse struct {
	CardsList []uint64 `protobuf:"varint,1,rep,packed,name=cardsList,proto3" json:"cardsList,omitempty"`
}

func (m *QueryQCardsResponse) Reset()         { *m = QueryQCardsResponse{} }
func (m *QueryQCardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQCardsResponse) ProtoMessage()    {}
func (*QueryQCardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26c5456fa123d9f, []int{15}
}
func (m *QueryQCardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQCardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQCardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQCardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQCardsResponse.Merge(m, src)
}
func (m *QueryQCardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQCardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQCardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQCardsResponse proto.InternalMessageInfo

func (m *QueryQCardsResponse) GetCardsList() []uint64 {
	if m != nil {
		return m.CardsList
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryParamsResponse")
	proto.RegisterType((*QueryQCardRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardRequest")
	proto.RegisterType((*QueryQCardResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardResponse")
	proto.RegisterType((*QueryQCardContentRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardContentRequest")
	proto.RegisterType((*QueryQCardContentResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardContentResponse")
	proto.RegisterType((*QueryQUserRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQUserRequest")
	proto.RegisterType((*QueryQUserResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQUserResponse")
	proto.RegisterType((*QueryQCardchainInfoRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardchainInfoRequest")
	proto.RegisterType((*QueryQCardchainInfoResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardchainInfoResponse")
	proto.RegisterType((*QueryQVotingResultsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQVotingResultsRequest")
	proto.RegisterType((*QueryQVotingResultsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQVotingResultsResponse")
	proto.RegisterType((*QueryQVotableCardsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQVotableCardsRequest")
	proto.RegisterType((*QueryQVotableCardsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQVotableCardsResponse")
	proto.RegisterType((*QueryQCardsRequest)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardsRequest")
	proto.RegisterType((*QueryQCardsResponse)(nil), "DecentralCardGame.cardchain.cardchain.QueryQCardsResponse")
}

func init() { proto.RegisterFile("cardchain/query.proto", fileDescriptor_c26c5456fa123d9f) }

var fileDescriptor_c26c5456fa123d9f = []byte{
	// 1277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xda, 0x89, 0xe3, 0x4c, 0x9b, 0xd2, 0x0e, 0xa1, 0x5a, 0x4c, 0xe4, 0x5a, 0x2b, 0x10,
	0x56, 0x21, 0x5e, 0x9a, 0xb6, 0xd0, 0x72, 0x68, 0x13, 0x87, 0x02, 0x55, 0x41, 0x4a, 0xb7, 0x90,
	0x43, 0x39, 0x44, 0xe3, 0xf5, 0xc4, 0x5e, 0x75, 0xbd, 0xb3, 0x9d, 0x99, 0x4d, 0x08, 0x96, 0x0f,
	0x70, 0xe2, 0x06, 0x82, 0x13, 0xe2, 0x73, 0xd0, 0x13, 0xdc, 0x2b, 0x4e, 0x91, 0xb8, 0x14, 0x0e,
	0x11, 0x4a, 0xf8, 0x20, 0x68, 0xfe, 0xac, 0x77, 0xd7, 0xb6, 0x54, 0xaf, 0x73, 0xf2, 0xbe, 0xf7,
	0x7e, 0xef, 0xcd, 0x7b, 0x33, 0x6f, 0xde, 0x6f, 0x0c, 0x5e, 0x73, 0x11, 0x6d, 0xbb, 0x5d, 0xe4,
	0x05, 0xf6, 0xd3, 0x08, 0xd3, 0xc3, 0x46, 0x48, 0x09, 0x27, 0xf0, 0xad, 0x8f, 0xb0, 0x8b, 0x03,
	0x4e, 0x91, 0xbf, 0x85, 0x68, 0xfb, 0x13, 0xd4, 0xc3, 0x8d, 0x21, 0x30, 0xf9, 0xaa, 0xac, 0x74,
	0x48, 0x87, 0x48, 0x0f, 0x5b, 0x7c, 0x29, 0xe7, 0xca, 0x6a, 0x87, 0x90, 0x8e, 0x8f, 0x6d, 0x14,
	0x7a, 0x36, 0x0a, 0x02, 0xc2, 0x11, 0xf7, 0x48, 0xc0, 0xb4, 0xf5, 0xaa, 0x4b, 0x58, 0x8f, 0x30,
	0xbb, 0x85, 0x18, 0x56, 0x6b, 0xda, 0xfb, 0xd7, 0x5a, 0x98, 0xa3, 0x6b, 0x76, 0x88, 0x3a, 0x5e,
	0x20, 0xc1, 0x1a, 0x7b, 0x39, 0xc9, 0x2e, 0x44, 0x14, 0xf5, 0xe2, 0x18, 0x95, 0x44, 0xbf, 0x4f,
	0x38, 0xde, 0xa5, 0x5e, 0xa7, 0xcb, 0xb5, 0xad, 0x9a, 0xb1, 0x79, 0x41, 0x67, 0x97, 0x62, 0x16,
	0xf9, 0x3c, 0xf6, 0x5d, 0x49, 0xec, 0xe2, 0x6b, 0x5c, 0x1b, 0x31, 0x4c, 0x95, 0xd6, 0x5a, 0x01,
	0xf0, 0xa1, 0xc8, 0x70, 0x5b, 0x2e, 0xee, 0xe0, 0xa7, 0x11, 0x66, 0xdc, 0x6a, 0x81, 0x57, 0x33,
	0x5a, 0x16, 0x92, 0x80, 0x61, 0xf8, 0x00, 0x94, 0x54, 0x92, 0xa6, 0x51, 0x33, 0xea, 0xe7, 0xd6,
	0xd7, 0x1a, 0x53, 0x6d, 0x62, 0x43, 0x85, 0x69, 0xce, 0x3f, 0x3f, 0xbe, 0x32, 0xe7, 0xe8, 0x10,
	0xd6, 0x3b, 0xe0, 0x92, 0x5c, 0xe3, 0xa1, 0x70, 0xd5, 0x0b, 0xc3, 0xcb, 0xa0, 0x24, 0xdc, 0xee,
	0xb7, 0xe5, 0x0a, 0x4b, 0x8e, 0x96, 0xac, 0xef, 0xe7, 0x75, 0x9e, 0x1a, 0xad, 0x13, 0x5a, 0x01,
	0x0b, 0xe4, 0x20, 0xc0, 0x54, 0xa3, 0x95, 0x00, 0x4d, 0xb0, 0xe8, 0x92, 0x80, 0xe3, 0x80, 0x9b,
	0x05, 0xa9, 0x8f, 0x45, 0x11, 0x1e, 0x51, 0xee, 0x31, 0x6e, 0x16, 0x55, 0x78, 0x25, 0x89, 0x38,
	0x5e, 0x0f, 0x75, 0xb0, 0x39, 0xaf, 0xe2, 0x48, 0x41, 0xc4, 0xd9, 0x8b, 0x7c, 0x7f, 0x93, 0x72,
	0x73, 0xa1, 0x66, 0xd4, 0xcb, 0x4e, 0x2c, 0x0a, 0x7c, 0x40, 0x38, 0x66, 0x66, 0x49, 0xe1, 0xa5,
	0x00, 0xef, 0x81, 0x12, 0xe3, 0x88, 0x47, 0xcc, 0x5c, 0xac, 0x19, 0xf5, 0x0b, 0x53, 0x6f, 0xcf,
	0x23, 0xe9, 0xe4, 0x68, 0x67, 0xf8, 0x00, 0x94, 0xc5, 0x91, 0x6f, 0x13, 0xe2, 0x9b, 0x65, 0x11,
	0xbf, 0x69, 0x8b, 0x8d, 0xfb, 0xe7, 0xf8, 0xca, 0xdb, 0x1d, 0x8f, 0x77, 0xa3, 0x56, 0xc3, 0x25,
	0x3d, 0x5b, 0xf7, 0x98, 0xfa, 0x59, 0x63, 0xed, 0x27, 0x36, 0x3f, 0x0c, 0x31, 0x6b, 0x6c, 0x11,
	0x2f, 0x70, 0x86, 0x01, 0x60, 0x1d, 0xbc, 0xb2, 0x87, 0x3c, 0x7a, 0x2f, 0x20, 0x51, 0xa7, 0xbb,
	0x23, 0x73, 0x5e, 0xaa, 0x19, 0xf5, 0x79, 0x67, 0x54, 0x0d, 0xaf, 0x82, 0x8b, 0x64, 0x1f, 0xd3,
	0x90, 0x1c, 0x60, 0x8a, 0xdb, 0x0a, 0x0a, 0x24, 0x74, 0x4c, 0x0f, 0xdf, 0x05, 0x97, 0xa2, 0xa0,
	0x3d, 0x02, 0x3e, 0x27, 0xc1, 0xe3, 0x06, 0xd8, 0x00, 0xd0, 0x0b, 0x50, 0x18, 0x52, 0x12, 0x52,
	0x0f, 0x71, 0xac, 0xe0, 0xe7, 0x25, 0x7c, 0x82, 0x05, 0xae, 0x82, 0xa5, 0x00, 0xd3, 0x3d, 0x1f,
	0xef, 0x63, 0xdf, 0x5c, 0xae, 0x19, 0xf5, 0xa2, 0x93, 0x28, 0xac, 0x75, 0x60, 0x26, 0x9d, 0xb0,
	0xa5, 0x0e, 0xf6, 0x65, 0xed, 0x73, 0x13, 0xbc, 0x3e, 0xc1, 0x47, 0x37, 0x51, 0xaa, 0x5d, 0x8c,
	0x4c, 0xbb, 0x58, 0x6b, 0x71, 0x8b, 0x7e, 0xc9, 0x30, 0x8d, 0xd7, 0x30, 0xc1, 0x22, 0x6a, 0xb7,
	0x29, 0x66, 0x2c, 0x86, 0x6b, 0xd1, 0xfa, 0xb3, 0x10, 0x37, 0xa9, 0xc2, 0x27, 0x4d, 0x8a, 0x7c,
	0x0f, 0xc5, 0x70, 0x25, 0xc8, 0xed, 0x3e, 0x08, 0x70, 0x5b, 0x64, 0xf4, 0xc8, 0xed, 0xe2, 0x1e,
	0x66, 0x66, 0xa1, 0x56, 0x94, 0xdb, 0x3d, 0xa2, 0x87, 0x55, 0x00, 0x86, 0x3a, 0x66, 0x16, 0x25,
	0x2a, 0xa5, 0x81, 0xdb, 0x00, 0x88, 0x03, 0x77, 0xc4, 0x8c, 0x60, 0xe6, 0x7c, 0xad, 0x58, 0x3f,
	0xb7, 0xfe, 0xde, 0x94, 0xcd, 0xb7, 0x13, 0x3b, 0x3a, 0xa9, 0x18, 0xf0, 0x31, 0x58, 0x76, 0x49,
	0x14, 0xb8, 0x9e, 0xaf, 0x9a, 0x53, 0x5e, 0x80, 0x0b, 0xeb, 0x37, 0xa6, 0x0c, 0xba, 0x95, 0xf6,
	0x75, 0xb2, 0xa1, 0xe0, 0x9b, 0x60, 0x99, 0xe2, 0x90, 0x50, 0xfe, 0x39, 0xe2, 0x6e, 0x57, 0x5f,
	0xa2, 0xb2, 0x93, 0x55, 0x5a, 0xab, 0xa0, 0x92, 0x1c, 0x99, 0x8c, 0x7a, 0x3f, 0xd8, 0x23, 0xf1,
	0x80, 0xfa, 0x06, 0xbc, 0x31, 0xd1, 0xaa, 0xb7, 0xfc, 0x2b, 0x70, 0x51, 0x24, 0xb3, 0x19, 0xb9,
	0x62, 0xd4, 0x6e, 0x53, 0xcf, 0xc5, 0x6a, 0xf7, 0xf3, 0x5f, 0xa5, 0xb1, 0x40, 0x49, 0x66, 0x3b,
	0x72, 0xf8, 0x3a, 0x6a, 0xf6, 0xc6, 0x99, 0x7d, 0x6b, 0xc4, 0xa9, 0x8d, 0x98, 0x75, 0x6a, 0x2d,
	0x70, 0xc9, 0x47, 0x8c, 0x67, 0x8c, 0x7a, 0x9c, 0xde, 0x98, 0xfe, 0xc8, 0x52, 0x81, 0xc7, 0xc3,
	0x25, 0xed, 0xbe, 0x43, 0x38, 0x6a, 0xf9, 0x58, 0x76, 0xc9, 0xcb, 0xfb, 0xf7, 0x99, 0x91, 0xaa,
	0x2c, 0xe5, 0xa7, 0x33, 0xb7, 0xc0, 0xf9, 0x28, 0xa0, 0xb8, 0xe3, 0x31, 0x2e, 0xee, 0xb6, 0xf4,
	0x2e, 0x3b, 0x19, 0x9d, 0xc0, 0x04, 0x64, 0x27, 0xe9, 0xc5, 0x82, 0xc2, 0xa4, 0x75, 0x23, 0xdd,
	0x5a, 0x3c, 0x7b, 0xb7, 0x5a, 0xbf, 0x15, 0xd2, 0xec, 0x30, 0xac, 0x74, 0x32, 0x3b, 0x24, 0x53,
	0xba, 0x70, 0x96, 0x29, 0x5d, 0x01, 0x65, 0x61, 0xfb, 0xe2, 0x30, 0xc4, 0x9a, 0x4c, 0x86, 0xb2,
	0x9c, 0x28, 0x3e, 0x62, 0x0c, 0x33, 0x4d, 0x28, 0xb1, 0x28, 0x06, 0x14, 0x23, 0x94, 0x37, 0x0f,
	0xe5, 0x85, 0x5a, 0x72, 0xb4, 0x24, 0xf7, 0x0d, 0xf5, 0xb0, 0x18, 0x4d, 0xc8, 0x0b, 0x62, 0x5e,
	0xc9, 0xe8, 0xc4, 0xc4, 0x78, 0x82, 0x0f, 0x0f, 0x08, 0x6d, 0xb3, 0x21, 0x6e, 0x51, 0xe2, 0xc6,
	0xf4, 0xe2, 0x8e, 0x49, 0x4e, 0x1a, 0x02, 0x25, 0x91, 0x38, 0x59, 0xa5, 0x75, 0x5d, 0xd3, 0xfc,
	0xc3, 0xec, 0x41, 0xaf, 0x82, 0x25, 0x51, 0x0a, 0xfb, 0x4c, 0x10, 0xa5, 0x21, 0xa7, 0x4d, 0xa2,
	0x58, 0x3f, 0x5a, 0x06, 0x0b, 0xd2, 0x0b, 0x3e, 0x33, 0x40, 0x49, 0x51, 0x3b, 0xbc, 0x3d, 0xe5,
	0x26, 0x8e, 0xbf, 0x35, 0x2a, 0x1f, 0xce, 0xe2, 0xaa, 0x32, 0xb5, 0x6e, 0x7e, 0xf7, 0xd7, 0x7f,
	0x3f, 0x17, 0x6c, 0xb8, 0x66, 0x8f, 0xc5, 0xb0, 0xb3, 0x8f, 0xa0, 0xf4, 0x13, 0x0b, 0xfe, 0x6e,
	0x80, 0x05, 0x59, 0x33, 0xbc, 0x95, 0x67, 0xf1, 0xf4, 0x4b, 0xa5, 0x72, 0x7b, 0x06, 0x4f, 0x9d,
	0xf5, 0x1d, 0x99, 0xf5, 0x2d, 0xf8, 0xfe, 0x94, 0x59, 0x3f, 0xdd, 0x15, 0xdf, 0x76, 0x5f, 0x91,
	0xd9, 0x00, 0xfe, 0x6d, 0x80, 0xf3, 0x69, 0x26, 0x83, 0x77, 0x73, 0xe7, 0x92, 0xe5, 0xcd, 0xca,
	0xc6, 0xec, 0x01, 0x74, 0x4d, 0x1f, 0xcb, 0x9a, 0x36, 0xe0, 0x9d, 0x5c, 0x35, 0xed, 0x6a, 0xa6,
	0x4d, 0x6a, 0xfb, 0x43, 0x1c, 0x8d, 0xa0, 0xcf, 0x9c, 0x47, 0x93, 0x62, 0xe8, 0x9c, 0x47, 0x93,
	0xe6, 0x6a, 0xeb, 0xae, 0x2c, 0xe3, 0x36, 0xfc, 0x60, 0xea, 0x32, 0xc4, 0x5b, 0xda, 0xee, 0xeb,
	0x11, 0x3a, 0x80, 0x2f, 0x0c, 0x70, 0x21, 0x4b, 0x4a, 0x70, 0x33, 0xf7, 0xe6, 0x8e, 0xd2, 0x5d,
	0xa5, 0x79, 0x96, 0x10, 0x33, 0x97, 0x36, 0xfc, 0xde, 0xf5, 0x44, 0x1d, 0xb2, 0xb4, 0x0c, 0xd1,
	0xe4, 0x2c, 0x6d, 0x12, 0x5f, 0xe6, 0x2c, 0x6d, 0x22, 0xa7, 0xce, 0x50, 0x5a, 0xf6, 0x7f, 0x13,
	0x3c, 0x36, 0xc0, 0x72, 0x86, 0xf4, 0xe0, 0x46, 0xde, 0xb4, 0x46, 0x79, 0xb6, 0xb2, 0x79, 0x86,
	0x08, 0xba, 0xae, 0x4f, 0x65, 0x5d, 0x4d, 0xb8, 0x91, 0xa7, 0x2e, 0x11, 0x46, 0x1e, 0x1d, 0x4b,
	0xb5, 0xe5, 0xaf, 0x05, 0x50, 0x52, 0x53, 0x1e, 0xe6, 0x1f, 0x5c, 0xb3, 0x8d, 0xea, 0x2c, 0xa9,
	0x58, 0xbf, 0x18, 0xb2, 0x98, 0x9f, 0x0c, 0xf8, 0x83, 0x91, 0xab, 0x03, 0x99, 0xdd, 0x97, 0xc4,
	0x3d, 0xb0, 0xfb, 0x8a, 0x7a, 0x07, 0x6a, 0x5a, 0x08, 0xa6, 0x15, 0x9f, 0x8a, 0x59, 0x85, 0x55,
	0x52, 0xe9, 0xc0, 0xee, 0xa7, 0x59, 0x73, 0x60, 0xf7, 0x47, 0xc9, 0x51, 0x20, 0xd2, 0x34, 0x38,
	0x68, 0x3a, 0xcf, 0x4f, 0xaa, 0xc6, 0xd1, 0x49, 0xd5, 0xf8, 0xf7, 0xa4, 0x6a, 0xfc, 0x78, 0x5a,
	0x9d, 0x3b, 0x3a, 0xad, 0xce, 0xbd, 0x38, 0xad, 0xce, 0x3d, 0xbe, 0x95, 0x7a, 0x26, 0x8e, 0x27,
	0x3d, 0xbc, 0x68, 0xf6, 0xd7, 0xa9, 0xb4, 0xe5, 0xe3, 0xb1, 0x55, 0x92, 0xff, 0xaf, 0xaf, 0xff,
	0x1f, 0x00, 0x00, 0xff, 0xff, 0x58, 0x01, 0x7d, 0x21, 0x7f, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of QCard items.
	QCard(ctx context.Context, in *QueryQCardRequest, opts ...grpc.CallOption) (*QueryQCardResponse, error)
	// Queries a list of QCardContent items.
	QCardContent(ctx context.Context, in *QueryQCardContentRequest, opts ...grpc.CallOption) (*QueryQCardContentResponse, error)
	// Queries a list of QUser items.
	QUser(ctx context.Context, in *QueryQUserRequest, opts ...grpc.CallOption) (*QueryQUserResponse, error)
	// Queries a list of QCardchainInfo items.
	QCardchainInfo(ctx context.Context, in *QueryQCardchainInfoRequest, opts ...grpc.CallOption) (*QueryQCardchainInfoResponse, error)
	// Queries a list of QVotingResults items.
	QVotingResults(ctx context.Context, in *QueryQVotingResultsRequest, opts ...grpc.CallOption) (*QueryQVotingResultsResponse, error)
	// Queries a list of QVotableCards items.
	QVotableCards(ctx context.Context, in *QueryQVotableCardsRequest, opts ...grpc.CallOption) (*QueryQVotableCardsResponse, error)
	// Queries a list of QCards items.
	QCards(ctx context.Context, in *QueryQCardsRequest, opts ...grpc.CallOption) (*QueryQCardsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCard(ctx context.Context, in *QueryQCardRequest, opts ...grpc.CallOption) (*QueryQCardResponse, error) {
	out := new(QueryQCardResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCardContent(ctx context.Context, in *QueryQCardContentRequest, opts ...grpc.CallOption) (*QueryQCardContentResponse, error) {
	out := new(QueryQCardContentResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCardContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QUser(ctx context.Context, in *QueryQUserRequest, opts ...grpc.CallOption) (*QueryQUserResponse, error) {
	out := new(QueryQUserResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCardchainInfo(ctx context.Context, in *QueryQCardchainInfoRequest, opts ...grpc.CallOption) (*QueryQCardchainInfoResponse, error) {
	out := new(QueryQCardchainInfoResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCardchainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QVotingResults(ctx context.Context, in *QueryQVotingResultsRequest, opts ...grpc.CallOption) (*QueryQVotingResultsResponse, error) {
	out := new(QueryQVotingResultsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QVotingResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QVotableCards(ctx context.Context, in *QueryQVotableCardsRequest, opts ...grpc.CallOption) (*QueryQVotableCardsResponse, error) {
	out := new(QueryQVotableCardsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QVotableCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QCards(ctx context.Context, in *QueryQCardsRequest, opts ...grpc.CallOption) (*QueryQCardsResponse, error) {
	out := new(QueryQCardsResponse)
	err := c.cc.Invoke(ctx, "/DecentralCardGame.cardchain.cardchain.Query/QCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of QCard items.
	QCard(context.Context, *QueryQCardRequest) (*QueryQCardResponse, error)
	// Queries a list of QCardContent items.
	QCardContent(context.Context, *QueryQCardContentRequest) (*QueryQCardContentResponse, error)
	// Queries a list of QUser items.
	QUser(context.Context, *QueryQUserRequest) (*QueryQUserResponse, error)
	// Queries a list of QCardchainInfo items.
	QCardchainInfo(context.Context, *QueryQCardchainInfoRequest) (*QueryQCardchainInfoResponse, error)
	// Queries a list of QVotingResults items.
	QVotingResults(context.Context, *QueryQVotingResultsRequest) (*QueryQVotingResultsResponse, error)
	// Queries a list of QVotableCards items.
	QVotableCards(context.Context, *QueryQVotableCardsRequest) (*QueryQVotableCardsResponse, error)
	// Queries a list of QCards items.
	QCards(context.Context, *QueryQCardsRequest) (*QueryQCardsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QCard(ctx context.Context, req *QueryQCardRequest) (*QueryQCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCard not implemented")
}
func (*UnimplementedQueryServer) QCardContent(ctx context.Context, req *QueryQCardContentRequest) (*QueryQCardContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCardContent not implemented")
}
func (*UnimplementedQueryServer) QUser(ctx context.Context, req *QueryQUserRequest) (*QueryQUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QUser not implemented")
}
func (*UnimplementedQueryServer) QCardchainInfo(ctx context.Context, req *QueryQCardchainInfoRequest) (*QueryQCardchainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCardchainInfo not implemented")
}
func (*UnimplementedQueryServer) QVotingResults(ctx context.Context, req *QueryQVotingResultsRequest) (*QueryQVotingResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QVotingResults not implemented")
}
func (*UnimplementedQueryServer) QVotableCards(ctx context.Context, req *QueryQVotableCardsRequest) (*QueryQVotableCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QVotableCards not implemented")
}
func (*UnimplementedQueryServer) QCards(ctx context.Context, req *QueryQCardsRequest) (*QueryQCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QCards not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCard(ctx, req.(*QueryQCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCardContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCardContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCardContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCardContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCardContent(ctx, req.(*QueryQCardContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QUser(ctx, req.(*QueryQUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCardchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCardchainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCardchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCardchainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCardchainInfo(ctx, req.(*QueryQCardchainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QVotingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQVotingResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QVotingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QVotingResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QVotingResults(ctx, req.(*QueryQVotingResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QVotableCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQVotableCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QVotableCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QVotableCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QVotableCards(ctx, req.(*QueryQVotableCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DecentralCardGame.cardchain.cardchain.Query/QCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QCards(ctx, req.(*QueryQCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DecentralCardGame.cardchain.cardchain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QCard",
			Handler:    _Query_QCard_Handler,
		},
		{
			MethodName: "QCardContent",
			Handler:    _Query_QCardContent_Handler,
		},
		{
			MethodName: "QUser",
			Handler:    _Query_QUser_Handler,
		},
		{
			MethodName: "QCardchainInfo",
			Handler:    _Query_QCardchainInfo_Handler,
		},
		{
			MethodName: "QVotingResults",
			Handler:    _Query_QVotingResults_Handler,
		},
		{
			MethodName: "QVotableCards",
			Handler:    _Query_QVotableCards_Handler,
		},
		{
			MethodName: "QCards",
			Handler:    _Query_QCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cardchain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryQCardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardId) > 0 {
		i -= len(m.CardId)
		copy(dAtA[i:], m.CardId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nerflevel != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nerflevel))
		i--
		dAtA[i] = 0x68
	}
	if m.InappropriateVotes != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InappropriateVotes))
		i--
		dAtA[i] = 0x60
	}
	if m.UnderpoweredVotes != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnderpoweredVotes))
		i--
		dAtA[i] = 0x58
	}
	if m.OverpoweredVotes != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OverpoweredVotes))
		i--
		dAtA[i] = 0x50
	}
	if m.FairEnoughVotes != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FairEnoughVotes))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.VotePool.Size()
		i -= size
		if _, err := m.VotePool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x32
	}
	if m.FullArt {
		i--
		if m.FullArt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Artist) > 0 {
		i -= len(m.Artist)
		copy(dAtA[i:], m.Artist)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Artist)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardContentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardContentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardContentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardId) > 0 {
		i -= len(m.CardId)
		copy(dAtA[i:], m.CardId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardContentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardContentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardContentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportMatches {
		i--
		if m.ReportMatches {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CouncilStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CouncilStatus))
		i--
		dAtA[i] = 0x28
	}
	if len(m.VoteRights) > 0 {
		for iNdEx := len(m.VoteRights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteRights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.OwnedCards) > 0 {
		dAtA3 := make([]byte, len(m.OwnedCards)*10)
		var j2 int
		for _, num := range m.OwnedCards {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintQuery(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnedCardSchemes) > 0 {
		dAtA5 := make([]byte, len(m.OwnedCardSchemes)*10)
		var j4 int
		for _, num := range m.OwnedCardSchemes {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardchainInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardchainInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardchainInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryQCardchainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardchainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardchainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CardAuctionPrice.Size()
		i -= size
		if _, err := m.CardAuctionPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryQVotingResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVotingResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVotingResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryQVotingResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVotingResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVotingResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastVotingResults != nil {
		{
			size, err := m.LastVotingResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQVotableCardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVotableCardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVotableCardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQVotableCardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVotableCardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVotableCardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteRights) > 0 {
		for iNdEx := len(m.VoteRights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteRights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NoVoteRights {
		i--
		if m.NoVoteRights {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Unregistered {
		i--
		if m.Unregistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotesContains) > 0 {
		i -= len(m.NotesContains)
		copy(dAtA[i:], m.NotesContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NotesContains)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeywordsContains) > 0 {
		i -= len(m.KeywordsContains)
		copy(dAtA[i:], m.KeywordsContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeywordsContains)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SortBy) > 0 {
		i -= len(m.SortBy)
		copy(dAtA[i:], m.SortBy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SortBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Classes) > 0 {
		i -= len(m.Classes)
		copy(dAtA[i:], m.Classes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Classes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQCardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQCardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQCardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardsList) > 0 {
		dAtA8 := make([]byte, len(m.CardsList)*10)
		var j7 int
		for _, num := range m.CardsList {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintQuery(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryQCardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQCardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Artist)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FullArt {
		n += 2
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = m.VotePool.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.FairEnoughVotes != 0 {
		n += 1 + sovQuery(uint64(m.FairEnoughVotes))
	}
	if m.OverpoweredVotes != 0 {
		n += 1 + sovQuery(uint64(m.OverpoweredVotes))
	}
	if m.UnderpoweredVotes != 0 {
		n += 1 + sovQuery(uint64(m.UnderpoweredVotes))
	}
	if m.InappropriateVotes != 0 {
		n += 1 + sovQuery(uint64(m.InappropriateVotes))
	}
	if m.Nerflevel != 0 {
		n += 1 + sovQuery(uint64(m.Nerflevel))
	}
	return n
}

func (m *QueryQCardContentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQCardContentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.OwnedCardSchemes) > 0 {
		l = 0
		for _, e := range m.OwnedCardSchemes {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.OwnedCards) > 0 {
		l = 0
		for _, e := range m.OwnedCards {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.VoteRights) > 0 {
		for _, e := range m.VoteRights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.CouncilStatus != 0 {
		n += 1 + sovQuery(uint64(m.CouncilStatus))
	}
	if m.ReportMatches {
		n += 2
	}
	return n
}

func (m *QueryQCardchainInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryQCardchainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CardAuctionPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryQVotingResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryQVotingResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastVotingResults != nil {
		l = m.LastVotingResults.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQVotableCardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQVotableCardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unregistered {
		n += 2
	}
	if m.NoVoteRights {
		n += 2
	}
	if len(m.VoteRights) > 0 {
		for _, e := range m.VoteRights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryQCardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Classes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SortBy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.KeywordsContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NotesContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQCardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CardsList) > 0 {
		l = 0
		for _, e := range m.CardsList {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullArt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullArt = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FairEnoughVotes", wireType)
			}
			m.FairEnoughVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FairEnoughVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverpoweredVotes", wireType)
			}
			m.OverpoweredVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverpoweredVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderpoweredVotes", wireType)
			}
			m.UnderpoweredVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnderpoweredVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InappropriateVotes", wireType)
			}
			m.InappropriateVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InappropriateVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nerflevel", wireType)
			}
			m.Nerflevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nerflevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardContentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardContentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardContentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardContentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardContentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardContentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OwnedCardSchemes = append(m.OwnedCardSchemes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OwnedCardSchemes) == 0 {
					m.OwnedCardSchemes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OwnedCardSchemes = append(m.OwnedCardSchemes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnedCardSchemes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OwnedCards = append(m.OwnedCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OwnedCards) == 0 {
					m.OwnedCards = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OwnedCards = append(m.OwnedCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnedCards", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteRights = append(m.VoteRights, &VoteRight{})
			if err := m.VoteRights[len(m.VoteRights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouncilStatus", wireType)
			}
			m.CouncilStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouncilStatus |= CouncilStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportMatches", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReportMatches = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardchainInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardchainInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardchainInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardchainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardchainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardchainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardAuctionPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CardAuctionPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVotingResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVotingResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVotingResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVotingResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVotingResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVotingResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastVotingResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastVotingResults == nil {
				m.LastVotingResults = &VotingResults{}
			}
			if err := m.LastVotingResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVotableCardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVotableCardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVotableCardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVotableCardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVotableCardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVotableCardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unregistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unregistered = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoVoteRights", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoVoteRights = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteRights = append(m.VoteRights, &VoteRight{})
			if err := m.VoteRights[len(m.VoteRights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeywordsContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeywordsContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotesContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotesContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQCardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQCardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQCardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardsList = append(m.CardsList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardsList) == 0 {
					m.CardsList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardsList = append(m.CardsList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
