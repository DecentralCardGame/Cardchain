// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/cardchain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetProductDetailsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetProductDetailsRequest) Reset()         { *m = QueryGetProductDetailsRequest{} }
func (m *QueryGetProductDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProductDetailsRequest) ProtoMessage()    {}
func (*QueryGetProductDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{2}
}
func (m *QueryGetProductDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProductDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProductDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProductDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProductDetailsRequest.Merge(m, src)
}
func (m *QueryGetProductDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProductDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProductDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProductDetailsRequest proto.InternalMessageInfo

func (m *QueryGetProductDetailsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetProductDetailsResponse struct {
	ProductDetails ProductDetails `protobuf:"bytes,1,opt,name=ProductDetails,proto3" json:"ProductDetails"`
}

func (m *QueryGetProductDetailsResponse) Reset()         { *m = QueryGetProductDetailsResponse{} }
func (m *QueryGetProductDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProductDetailsResponse) ProtoMessage()    {}
func (*QueryGetProductDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{3}
}
func (m *QueryGetProductDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProductDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProductDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProductDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProductDetailsResponse.Merge(m, src)
}
func (m *QueryGetProductDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProductDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProductDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProductDetailsResponse proto.InternalMessageInfo

func (m *QueryGetProductDetailsResponse) GetProductDetails() ProductDetails {
	if m != nil {
		return m.ProductDetails
	}
	return ProductDetails{}
}

type QueryAllProductDetailsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProductDetailsRequest) Reset()         { *m = QueryAllProductDetailsRequest{} }
func (m *QueryAllProductDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProductDetailsRequest) ProtoMessage()    {}
func (*QueryAllProductDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{4}
}
func (m *QueryAllProductDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProductDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProductDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProductDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProductDetailsRequest.Merge(m, src)
}
func (m *QueryAllProductDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProductDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProductDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProductDetailsRequest proto.InternalMessageInfo

func (m *QueryAllProductDetailsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProductDetailsResponse struct {
	ProductDetails []ProductDetails    `protobuf:"bytes,1,rep,name=ProductDetails,proto3" json:"ProductDetails"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProductDetailsResponse) Reset()         { *m = QueryAllProductDetailsResponse{} }
func (m *QueryAllProductDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProductDetailsResponse) ProtoMessage()    {}
func (*QueryAllProductDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{5}
}
func (m *QueryAllProductDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProductDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProductDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProductDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProductDetailsResponse.Merge(m, src)
}
func (m *QueryAllProductDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProductDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProductDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProductDetailsResponse proto.InternalMessageInfo

func (m *QueryAllProductDetailsResponse) GetProductDetails() []ProductDetails {
	if m != nil {
		return m.ProductDetails
	}
	return nil
}

func (m *QueryAllProductDetailsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCardRequest struct {
	CardId uint64 `protobuf:"varint,1,opt,name=cardId,proto3" json:"cardId,omitempty"`
}

func (m *QueryCardRequest) Reset()         { *m = QueryCardRequest{} }
func (m *QueryCardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCardRequest) ProtoMessage()    {}
func (*QueryCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{6}
}
func (m *QueryCardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCardRequest.Merge(m, src)
}
func (m *QueryCardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCardRequest proto.InternalMessageInfo

func (m *QueryCardRequest) GetCardId() uint64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

type QueryCardResponse struct {
	Card *CardWithImage `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
}

func (m *QueryCardResponse) Reset()         { *m = QueryCardResponse{} }
func (m *QueryCardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCardResponse) ProtoMessage()    {}
func (*QueryCardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{7}
}
func (m *QueryCardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCardResponse.Merge(m, src)
}
func (m *QueryCardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCardResponse proto.InternalMessageInfo

func (m *QueryCardResponse) GetCard() *CardWithImage {
	if m != nil {
		return m.Card
	}
	return nil
}

type QueryUserRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUserRequest) Reset()         { *m = QueryUserRequest{} }
func (m *QueryUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserRequest) ProtoMessage()    {}
func (*QueryUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{8}
}
func (m *QueryUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserRequest.Merge(m, src)
}
func (m *QueryUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserRequest proto.InternalMessageInfo

func (m *QueryUserRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryUserResponse) Reset()         { *m = QueryUserResponse{} }
func (m *QueryUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserResponse) ProtoMessage()    {}
func (*QueryUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{9}
}
func (m *QueryUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserResponse.Merge(m, src)
}
func (m *QueryUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserResponse proto.InternalMessageInfo

func (m *QueryUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type QueryCardsRequest struct {
	Owner              string       `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Status             []CardStatus `protobuf:"varint,2,rep,packed,name=status,proto3,enum=cardchain.cardchain.CardStatus" json:"status,omitempty"`
	CardType           []CardType   `protobuf:"varint,3,rep,packed,name=cardType,proto3,enum=cardchain.cardchain.CardType" json:"cardType,omitempty"`
	Class              []CardClass  `protobuf:"varint,4,rep,packed,name=class,proto3,enum=cardchain.cardchain.CardClass" json:"class,omitempty"`
	SortBy             string       `protobuf:"bytes,5,opt,name=sortBy,proto3" json:"sortBy,omitempty"`
	NameContains       string       `protobuf:"bytes,6,opt,name=nameContains,proto3" json:"nameContains,omitempty"`
	KeywordsContains   string       `protobuf:"bytes,7,opt,name=keywordsContains,proto3" json:"keywordsContains,omitempty"`
	NotesContains      string       `protobuf:"bytes,8,opt,name=notesContains,proto3" json:"notesContains,omitempty"`
	OnlyStarterCard    bool         `protobuf:"varint,9,opt,name=onlyStarterCard,proto3" json:"onlyStarterCard,omitempty"`
	OnlyBalanceAnchors bool         `protobuf:"varint,10,opt,name=onlyBalanceAnchors,proto3" json:"onlyBalanceAnchors,omitempty"`
	Rarities           []CardRarity `protobuf:"varint,11,rep,packed,name=rarities,proto3,enum=cardchain.cardchain.CardRarity" json:"rarities,omitempty"`
	MultiClassOnly     bool         `protobuf:"varint,12,opt,name=multiClassOnly,proto3" json:"multiClassOnly,omitempty"`
}

func (m *QueryCardsRequest) Reset()         { *m = QueryCardsRequest{} }
func (m *QueryCardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCardsRequest) ProtoMessage()    {}
func (*QueryCardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{10}
}
func (m *QueryCardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCardsRequest.Merge(m, src)
}
func (m *QueryCardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCardsRequest proto.InternalMessageInfo

func (m *QueryCardsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryCardsRequest) GetStatus() []CardStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueryCardsRequest) GetCardType() []CardType {
	if m != nil {
		return m.CardType
	}
	return nil
}

func (m *QueryCardsRequest) GetClass() []CardClass {
	if m != nil {
		return m.Class
	}
	return nil
}

func (m *QueryCardsRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *QueryCardsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *QueryCardsRequest) GetKeywordsContains() string {
	if m != nil {
		return m.KeywordsContains
	}
	return ""
}

func (m *QueryCardsRequest) GetNotesContains() string {
	if m != nil {
		return m.NotesContains
	}
	return ""
}

func (m *QueryCardsRequest) GetOnlyStarterCard() bool {
	if m != nil {
		return m.OnlyStarterCard
	}
	return false
}

func (m *QueryCardsRequest) GetOnlyBalanceAnchors() bool {
	if m != nil {
		return m.OnlyBalanceAnchors
	}
	return false
}

func (m *QueryCardsRequest) GetRarities() []CardRarity {
	if m != nil {
		return m.Rarities
	}
	return nil
}

func (m *QueryCardsRequest) GetMultiClassOnly() bool {
	if m != nil {
		return m.MultiClassOnly
	}
	return false
}

type QueryCardsResponse struct {
	CardIds []uint64 `protobuf:"varint,1,rep,packed,name=cardIds,proto3" json:"cardIds,omitempty"`
}

func (m *QueryCardsResponse) Reset()         { *m = QueryCardsResponse{} }
func (m *QueryCardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCardsResponse) ProtoMessage()    {}
func (*QueryCardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{11}
}
func (m *QueryCardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCardsResponse.Merge(m, src)
}
func (m *QueryCardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCardsResponse proto.InternalMessageInfo

func (m *QueryCardsResponse) GetCardIds() []uint64 {
	if m != nil {
		return m.CardIds
	}
	return nil
}

type QueryMatchRequest struct {
	MatchId uint64 `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
}

func (m *QueryMatchRequest) Reset()         { *m = QueryMatchRequest{} }
func (m *QueryMatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMatchRequest) ProtoMessage()    {}
func (*QueryMatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{12}
}
func (m *QueryMatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMatchRequest.Merge(m, src)
}
func (m *QueryMatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMatchRequest proto.InternalMessageInfo

func (m *QueryMatchRequest) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type QueryMatchResponse struct {
	Match *Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (m *QueryMatchResponse) Reset()         { *m = QueryMatchResponse{} }
func (m *QueryMatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMatchResponse) ProtoMessage()    {}
func (*QueryMatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{13}
}
func (m *QueryMatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMatchResponse.Merge(m, src)
}
func (m *QueryMatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMatchResponse proto.InternalMessageInfo

func (m *QueryMatchResponse) GetMatch() *Match {
	if m != nil {
		return m.Match
	}
	return nil
}

type QuerySetRequest struct {
	SetId uint64 `protobuf:"varint,1,opt,name=setId,proto3" json:"setId,omitempty"`
}

func (m *QuerySetRequest) Reset()         { *m = QuerySetRequest{} }
func (m *QuerySetRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySetRequest) ProtoMessage()    {}
func (*QuerySetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{14}
}
func (m *QuerySetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySetRequest.Merge(m, src)
}
func (m *QuerySetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySetRequest proto.InternalMessageInfo

func (m *QuerySetRequest) GetSetId() uint64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

type QuerySetResponse struct {
	Match *SetWithArtwork `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (m *QuerySetResponse) Reset()         { *m = QuerySetResponse{} }
func (m *QuerySetResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySetResponse) ProtoMessage()    {}
func (*QuerySetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{15}
}
func (m *QuerySetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySetResponse.Merge(m, src)
}
func (m *QuerySetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySetResponse proto.InternalMessageInfo

func (m *QuerySetResponse) GetMatch() *SetWithArtwork {
	if m != nil {
		return m.Match
	}
	return nil
}

type QuerySellOfferRequest struct {
	SellOfferId uint64 `protobuf:"varint,1,opt,name=sellOfferId,proto3" json:"sellOfferId,omitempty"`
}

func (m *QuerySellOfferRequest) Reset()         { *m = QuerySellOfferRequest{} }
func (m *QuerySellOfferRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySellOfferRequest) ProtoMessage()    {}
func (*QuerySellOfferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{16}
}
func (m *QuerySellOfferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellOfferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellOfferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellOfferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellOfferRequest.Merge(m, src)
}
func (m *QuerySellOfferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellOfferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellOfferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellOfferRequest proto.InternalMessageInfo

func (m *QuerySellOfferRequest) GetSellOfferId() uint64 {
	if m != nil {
		return m.SellOfferId
	}
	return 0
}

type QuerySellOfferResponse struct {
	SellOffer *SellOffer `protobuf:"bytes,1,opt,name=sellOffer,proto3" json:"sellOffer,omitempty"`
}

func (m *QuerySellOfferResponse) Reset()         { *m = QuerySellOfferResponse{} }
func (m *QuerySellOfferResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySellOfferResponse) ProtoMessage()    {}
func (*QuerySellOfferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{17}
}
func (m *QuerySellOfferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellOfferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellOfferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellOfferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellOfferResponse.Merge(m, src)
}
func (m *QuerySellOfferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellOfferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellOfferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellOfferResponse proto.InternalMessageInfo

func (m *QuerySellOfferResponse) GetSellOffer() *SellOffer {
	if m != nil {
		return m.SellOffer
	}
	return nil
}

type QueryCouncilRequest struct {
	CouncilId uint64 `protobuf:"varint,1,opt,name=councilId,proto3" json:"councilId,omitempty"`
}

func (m *QueryCouncilRequest) Reset()         { *m = QueryCouncilRequest{} }
func (m *QueryCouncilRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCouncilRequest) ProtoMessage()    {}
func (*QueryCouncilRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{18}
}
func (m *QueryCouncilRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCouncilRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCouncilRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCouncilRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCouncilRequest.Merge(m, src)
}
func (m *QueryCouncilRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCouncilRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCouncilRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCouncilRequest proto.InternalMessageInfo

func (m *QueryCouncilRequest) GetCouncilId() uint64 {
	if m != nil {
		return m.CouncilId
	}
	return 0
}

type QueryCouncilResponse struct {
	Council *Council `protobuf:"bytes,1,opt,name=council,proto3" json:"council,omitempty"`
}

func (m *QueryCouncilResponse) Reset()         { *m = QueryCouncilResponse{} }
func (m *QueryCouncilResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCouncilResponse) ProtoMessage()    {}
func (*QueryCouncilResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{19}
}
func (m *QueryCouncilResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCouncilResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCouncilResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCouncilResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCouncilResponse.Merge(m, src)
}
func (m *QueryCouncilResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCouncilResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCouncilResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCouncilResponse proto.InternalMessageInfo

func (m *QueryCouncilResponse) GetCouncil() *Council {
	if m != nil {
		return m.Council
	}
	return nil
}

type QueryServerRequest struct {
	ServerId uint64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (m *QueryServerRequest) Reset()         { *m = QueryServerRequest{} }
func (m *QueryServerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServerRequest) ProtoMessage()    {}
func (*QueryServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{20}
}
func (m *QueryServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServerRequest.Merge(m, src)
}
func (m *QueryServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServerRequest proto.InternalMessageInfo

func (m *QueryServerRequest) GetServerId() uint64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type QueryServerResponse struct {
	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (m *QueryServerResponse) Reset()         { *m = QueryServerResponse{} }
func (m *QueryServerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServerResponse) ProtoMessage()    {}
func (*QueryServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{21}
}
func (m *QueryServerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServerResponse.Merge(m, src)
}
func (m *QueryServerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServerResponse proto.InternalMessageInfo

func (m *QueryServerResponse) GetServer() *Server {
	if m != nil {
		return m.Server
	}
	return nil
}

type QueryEncounterRequest struct {
	EncounterId uint64 `protobuf:"varint,1,opt,name=encounterId,proto3" json:"encounterId,omitempty"`
}

func (m *QueryEncounterRequest) Reset()         { *m = QueryEncounterRequest{} }
func (m *QueryEncounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncounterRequest) ProtoMessage()    {}
func (*QueryEncounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{22}
}
func (m *QueryEncounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncounterRequest.Merge(m, src)
}
func (m *QueryEncounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncounterRequest proto.InternalMessageInfo

func (m *QueryEncounterRequest) GetEncounterId() uint64 {
	if m != nil {
		return m.EncounterId
	}
	return 0
}

type QueryEncounterResponse struct {
	Encounter *Encounter `protobuf:"bytes,1,opt,name=encounter,proto3" json:"encounter,omitempty"`
}

func (m *QueryEncounterResponse) Reset()         { *m = QueryEncounterResponse{} }
func (m *QueryEncounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncounterResponse) ProtoMessage()    {}
func (*QueryEncounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{23}
}
func (m *QueryEncounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncounterResponse.Merge(m, src)
}
func (m *QueryEncounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncounterResponse proto.InternalMessageInfo

func (m *QueryEncounterResponse) GetEncounter() *Encounter {
	if m != nil {
		return m.Encounter
	}
	return nil
}

type QueryEncountersRequest struct {
}

func (m *QueryEncountersRequest) Reset()         { *m = QueryEncountersRequest{} }
func (m *QueryEncountersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncountersRequest) ProtoMessage()    {}
func (*QueryEncountersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{24}
}
func (m *QueryEncountersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncountersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncountersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncountersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncountersRequest.Merge(m, src)
}
func (m *QueryEncountersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncountersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncountersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncountersRequest proto.InternalMessageInfo

type QueryEncountersResponse struct {
	Encounters []*Encounter `protobuf:"bytes,1,rep,name=encounters,proto3" json:"encounters,omitempty"`
}

func (m *QueryEncountersResponse) Reset()         { *m = QueryEncountersResponse{} }
func (m *QueryEncountersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncountersResponse) ProtoMessage()    {}
func (*QueryEncountersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{25}
}
func (m *QueryEncountersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncountersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncountersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncountersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncountersResponse.Merge(m, src)
}
func (m *QueryEncountersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncountersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncountersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncountersResponse proto.InternalMessageInfo

func (m *QueryEncountersResponse) GetEncounters() []*Encounter {
	if m != nil {
		return m.Encounters
	}
	return nil
}

type QueryEncounterWithImageRequest struct {
}

func (m *QueryEncounterWithImageRequest) Reset()         { *m = QueryEncounterWithImageRequest{} }
func (m *QueryEncounterWithImageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncounterWithImageRequest) ProtoMessage()    {}
func (*QueryEncounterWithImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{26}
}
func (m *QueryEncounterWithImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncounterWithImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncounterWithImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncounterWithImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncounterWithImageRequest.Merge(m, src)
}
func (m *QueryEncounterWithImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncounterWithImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncounterWithImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncounterWithImageRequest proto.InternalMessageInfo

type QueryEncounterWithImageResponse struct {
	Encounter *EncounterWithImage `protobuf:"bytes,1,opt,name=encounter,proto3" json:"encounter,omitempty"`
}

func (m *QueryEncounterWithImageResponse) Reset()         { *m = QueryEncounterWithImageResponse{} }
func (m *QueryEncounterWithImageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncounterWithImageResponse) ProtoMessage()    {}
func (*QueryEncounterWithImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{27}
}
func (m *QueryEncounterWithImageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncounterWithImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncounterWithImageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncounterWithImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncounterWithImageResponse.Merge(m, src)
}
func (m *QueryEncounterWithImageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncounterWithImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncounterWithImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncounterWithImageResponse proto.InternalMessageInfo

func (m *QueryEncounterWithImageResponse) GetEncounter() *EncounterWithImage {
	if m != nil {
		return m.Encounter
	}
	return nil
}

type QueryEncountersWithImageRequest struct {
}

func (m *QueryEncountersWithImageRequest) Reset()         { *m = QueryEncountersWithImageRequest{} }
func (m *QueryEncountersWithImageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncountersWithImageRequest) ProtoMessage()    {}
func (*QueryEncountersWithImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{28}
}
func (m *QueryEncountersWithImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncountersWithImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncountersWithImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncountersWithImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncountersWithImageRequest.Merge(m, src)
}
func (m *QueryEncountersWithImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncountersWithImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncountersWithImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncountersWithImageRequest proto.InternalMessageInfo

type QueryEncountersWithImageResponse struct {
	Encounters []*EncounterWithImage `protobuf:"bytes,1,rep,name=encounters,proto3" json:"encounters,omitempty"`
}

func (m *QueryEncountersWithImageResponse) Reset()         { *m = QueryEncountersWithImageResponse{} }
func (m *QueryEncountersWithImageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncountersWithImageResponse) ProtoMessage()    {}
func (*QueryEncountersWithImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{29}
}
func (m *QueryEncountersWithImageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncountersWithImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncountersWithImageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncountersWithImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncountersWithImageResponse.Merge(m, src)
}
func (m *QueryEncountersWithImageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncountersWithImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncountersWithImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncountersWithImageResponse proto.InternalMessageInfo

func (m *QueryEncountersWithImageResponse) GetEncounters() []*EncounterWithImage {
	if m != nil {
		return m.Encounters
	}
	return nil
}

type QueryCardchainInfoRequest struct {
}

func (m *QueryCardchainInfoRequest) Reset()         { *m = QueryCardchainInfoRequest{} }
func (m *QueryCardchainInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCardchainInfoRequest) ProtoMessage()    {}
func (*QueryCardchainInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{30}
}
func (m *QueryCardchainInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCardchainInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCardchainInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCardchainInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCardchainInfoRequest.Merge(m, src)
}
func (m *QueryCardchainInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCardchainInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCardchainInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCardchainInfoRequest proto.InternalMessageInfo

type QueryCardchainInfoResponse struct {
	CardAuctionPrice types.Coin `protobuf:"bytes,1,opt,name=cardAuctionPrice,proto3" json:"cardAuctionPrice"`
	ActiveSets       []uint64   `protobuf:"varint,2,rep,packed,name=activeSets,proto3" json:"activeSets,omitempty"`
	CardsNumber      uint64     `protobuf:"varint,3,opt,name=cardsNumber,proto3" json:"cardsNumber,omitempty"`
	MatchesNumber    uint64     `protobuf:"varint,4,opt,name=matchesNumber,proto3" json:"matchesNumber,omitempty"`
	SellOffersNumber uint64     `protobuf:"varint,5,opt,name=sellOffersNumber,proto3" json:"sellOffersNumber,omitempty"`
	CouncilsNumber   uint64     `protobuf:"varint,6,opt,name=councilsNumber,proto3" json:"councilsNumber,omitempty"`
	LastCardModified uint64     `protobuf:"varint,7,opt,name=lastCardModified,proto3" json:"lastCardModified,omitempty"`
}

func (m *QueryCardchainInfoResponse) Reset()         { *m = QueryCardchainInfoResponse{} }
func (m *QueryCardchainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCardchainInfoResponse) ProtoMessage()    {}
func (*QueryCardchainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{31}
}
func (m *QueryCardchainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCardchainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCardchainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCardchainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCardchainInfoResponse.Merge(m, src)
}
func (m *QueryCardchainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCardchainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCardchainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCardchainInfoResponse proto.InternalMessageInfo

func (m *QueryCardchainInfoResponse) GetCardAuctionPrice() types.Coin {
	if m != nil {
		return m.CardAuctionPrice
	}
	return types.Coin{}
}

func (m *QueryCardchainInfoResponse) GetActiveSets() []uint64 {
	if m != nil {
		return m.ActiveSets
	}
	return nil
}

func (m *QueryCardchainInfoResponse) GetCardsNumber() uint64 {
	if m != nil {
		return m.CardsNumber
	}
	return 0
}

func (m *QueryCardchainInfoResponse) GetMatchesNumber() uint64 {
	if m != nil {
		return m.MatchesNumber
	}
	return 0
}

func (m *QueryCardchainInfoResponse) GetSellOffersNumber() uint64 {
	if m != nil {
		return m.SellOffersNumber
	}
	return 0
}

func (m *QueryCardchainInfoResponse) GetCouncilsNumber() uint64 {
	if m != nil {
		return m.CouncilsNumber
	}
	return 0
}

func (m *QueryCardchainInfoResponse) GetLastCardModified() uint64 {
	if m != nil {
		return m.LastCardModified
	}
	return 0
}

type QuerySetRarityDistributionRequest struct {
	SetId string `protobuf:"bytes,1,opt,name=setId,proto3" json:"setId,omitempty"`
}

func (m *QuerySetRarityDistributionRequest) Reset()         { *m = QuerySetRarityDistributionRequest{} }
func (m *QuerySetRarityDistributionRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySetRarityDistributionRequest) ProtoMessage()    {}
func (*QuerySetRarityDistributionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{32}
}
func (m *QuerySetRarityDistributionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySetRarityDistributionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySetRarityDistributionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySetRarityDistributionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySetRarityDistributionRequest.Merge(m, src)
}
func (m *QuerySetRarityDistributionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySetRarityDistributionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySetRarityDistributionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySetRarityDistributionRequest proto.InternalMessageInfo

func (m *QuerySetRarityDistributionRequest) GetSetId() string {
	if m != nil {
		return m.SetId
	}
	return ""
}

type QuerySetRarityDistributionResponse struct {
	Current []uint64 `protobuf:"varint,1,rep,packed,name=current,proto3" json:"current,omitempty"`
	Wanted  []uint64 `protobuf:"varint,2,rep,packed,name=wanted,proto3" json:"wanted,omitempty"`
}

func (m *QuerySetRarityDistributionResponse) Reset()         { *m = QuerySetRarityDistributionResponse{} }
func (m *QuerySetRarityDistributionResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySetRarityDistributionResponse) ProtoMessage()    {}
func (*QuerySetRarityDistributionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{33}
}
func (m *QuerySetRarityDistributionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySetRarityDistributionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySetRarityDistributionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySetRarityDistributionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySetRarityDistributionResponse.Merge(m, src)
}
func (m *QuerySetRarityDistributionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySetRarityDistributionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySetRarityDistributionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySetRarityDistributionResponse proto.InternalMessageInfo

func (m *QuerySetRarityDistributionResponse) GetCurrent() []uint64 {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *QuerySetRarityDistributionResponse) GetWanted() []uint64 {
	if m != nil {
		return m.Wanted
	}
	return nil
}

type QueryAccountFromZealyRequest struct {
	ZealyId string `protobuf:"bytes,1,opt,name=zealyId,proto3" json:"zealyId,omitempty"`
}

func (m *QueryAccountFromZealyRequest) Reset()         { *m = QueryAccountFromZealyRequest{} }
func (m *QueryAccountFromZealyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountFromZealyRequest) ProtoMessage()    {}
func (*QueryAccountFromZealyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{34}
}
func (m *QueryAccountFromZealyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountFromZealyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountFromZealyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountFromZealyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountFromZealyRequest.Merge(m, src)
}
func (m *QueryAccountFromZealyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountFromZealyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountFromZealyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountFromZealyRequest proto.InternalMessageInfo

func (m *QueryAccountFromZealyRequest) GetZealyId() string {
	if m != nil {
		return m.ZealyId
	}
	return ""
}

type QueryAccountFromZealyResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountFromZealyResponse) Reset()         { *m = QueryAccountFromZealyResponse{} }
func (m *QueryAccountFromZealyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountFromZealyResponse) ProtoMessage()    {}
func (*QueryAccountFromZealyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{35}
}
func (m *QueryAccountFromZealyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountFromZealyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountFromZealyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountFromZealyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountFromZealyResponse.Merge(m, src)
}
func (m *QueryAccountFromZealyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountFromZealyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountFromZealyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountFromZealyResponse proto.InternalMessageInfo

func (m *QueryAccountFromZealyResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryVotingResultsRequest struct {
}

func (m *QueryVotingResultsRequest) Reset()         { *m = QueryVotingResultsRequest{} }
func (m *QueryVotingResultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotingResultsRequest) ProtoMessage()    {}
func (*QueryVotingResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{36}
}
func (m *QueryVotingResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotingResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotingResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotingResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotingResultsRequest.Merge(m, src)
}
func (m *QueryVotingResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotingResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotingResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotingResultsRequest proto.InternalMessageInfo

type QueryVotingResultsResponse struct {
	LastVotingResults *VotingResults `protobuf:"bytes,1,opt,name=lastVotingResults,proto3" json:"lastVotingResults,omitempty"`
}

func (m *QueryVotingResultsResponse) Reset()         { *m = QueryVotingResultsResponse{} }
func (m *QueryVotingResultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVotingResultsResponse) ProtoMessage()    {}
func (*QueryVotingResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1bdbfeb9d7f6cfd, []int{37}
}
func (m *QueryVotingResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotingResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotingResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotingResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotingResultsResponse.Merge(m, src)
}
func (m *QueryVotingResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotingResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotingResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotingResultsResponse proto.InternalMessageInfo

func (m *QueryVotingResultsResponse) GetLastVotingResults() *VotingResults {
	if m != nil {
		return m.LastVotingResults
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "cardchain.cardchain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cardchain.cardchain.QueryParamsResponse")
	proto.RegisterType((*QueryGetProductDetailsRequest)(nil), "cardchain.cardchain.QueryGetProductDetailsRequest")
	proto.RegisterType((*QueryGetProductDetailsResponse)(nil), "cardchain.cardchain.QueryGetProductDetailsResponse")
	proto.RegisterType((*QueryAllProductDetailsRequest)(nil), "cardchain.cardchain.QueryAllProductDetailsRequest")
	proto.RegisterType((*QueryAllProductDetailsResponse)(nil), "cardchain.cardchain.QueryAllProductDetailsResponse")
	proto.RegisterType((*QueryCardRequest)(nil), "cardchain.cardchain.QueryCardRequest")
	proto.RegisterType((*QueryCardResponse)(nil), "cardchain.cardchain.QueryCardResponse")
	proto.RegisterType((*QueryUserRequest)(nil), "cardchain.cardchain.QueryUserRequest")
	proto.RegisterType((*QueryUserResponse)(nil), "cardchain.cardchain.QueryUserResponse")
	proto.RegisterType((*QueryCardsRequest)(nil), "cardchain.cardchain.QueryCardsRequest")
	proto.RegisterType((*QueryCardsResponse)(nil), "cardchain.cardchain.QueryCardsResponse")
	proto.RegisterType((*QueryMatchRequest)(nil), "cardchain.cardchain.QueryMatchRequest")
	proto.RegisterType((*QueryMatchResponse)(nil), "cardchain.cardchain.QueryMatchResponse")
	proto.RegisterType((*QuerySetRequest)(nil), "cardchain.cardchain.QuerySetRequest")
	proto.RegisterType((*QuerySetResponse)(nil), "cardchain.cardchain.QuerySetResponse")
	proto.RegisterType((*QuerySellOfferRequest)(nil), "cardchain.cardchain.QuerySellOfferRequest")
	proto.RegisterType((*QuerySellOfferResponse)(nil), "cardchain.cardchain.QuerySellOfferResponse")
	proto.RegisterType((*QueryCouncilRequest)(nil), "cardchain.cardchain.QueryCouncilRequest")
	proto.RegisterType((*QueryCouncilResponse)(nil), "cardchain.cardchain.QueryCouncilResponse")
	proto.RegisterType((*QueryServerRequest)(nil), "cardchain.cardchain.QueryServerRequest")
	proto.RegisterType((*QueryServerResponse)(nil), "cardchain.cardchain.QueryServerResponse")
	proto.RegisterType((*QueryEncounterRequest)(nil), "cardchain.cardchain.QueryEncounterRequest")
	proto.RegisterType((*QueryEncounterResponse)(nil), "cardchain.cardchain.QueryEncounterResponse")
	proto.RegisterType((*QueryEncountersRequest)(nil), "cardchain.cardchain.QueryEncountersRequest")
	proto.RegisterType((*QueryEncountersResponse)(nil), "cardchain.cardchain.QueryEncountersResponse")
	proto.RegisterType((*QueryEncounterWithImageRequest)(nil), "cardchain.cardchain.QueryEncounterWithImageRequest")
	proto.RegisterType((*QueryEncounterWithImageResponse)(nil), "cardchain.cardchain.QueryEncounterWithImageResponse")
	proto.RegisterType((*QueryEncountersWithImageRequest)(nil), "cardchain.cardchain.QueryEncountersWithImageRequest")
	proto.RegisterType((*QueryEncountersWithImageResponse)(nil), "cardchain.cardchain.QueryEncountersWithImageResponse")
	proto.RegisterType((*QueryCardchainInfoRequest)(nil), "cardchain.cardchain.QueryCardchainInfoRequest")
	proto.RegisterType((*QueryCardchainInfoResponse)(nil), "cardchain.cardchain.QueryCardchainInfoResponse")
	proto.RegisterType((*QuerySetRarityDistributionRequest)(nil), "cardchain.cardchain.QuerySetRarityDistributionRequest")
	proto.RegisterType((*QuerySetRarityDistributionResponse)(nil), "cardchain.cardchain.QuerySetRarityDistributionResponse")
	proto.RegisterType((*QueryAccountFromZealyRequest)(nil), "cardchain.cardchain.QueryAccountFromZealyRequest")
	proto.RegisterType((*QueryAccountFromZealyResponse)(nil), "cardchain.cardchain.QueryAccountFromZealyResponse")
	proto.RegisterType((*QueryVotingResultsRequest)(nil), "cardchain.cardchain.QueryVotingResultsRequest")
	proto.RegisterType((*QueryVotingResultsResponse)(nil), "cardchain.cardchain.QueryVotingResultsResponse")
}

func init() { proto.RegisterFile("cardchain/cardchain/query.proto", fileDescriptor_e1bdbfeb9d7f6cfd) }

var fileDescriptor_e1bdbfeb9d7f6cfd = []byte{
	// 2024 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0xf7, 0x4a, 0x14, 0x25, 0x3e, 0x27, 0x8e, 0x3d, 0x76, 0x52, 0x9a, 0x71, 0x68, 0x79, 0xe3,
	0xd8, 0x8a, 0x1a, 0x73, 0x63, 0xc9, 0xff, 0xe4, 0x38, 0x6e, 0x24, 0xd9, 0x52, 0x5d, 0xc3, 0x8e,
	0xb2, 0x6a, 0x5c, 0x34, 0x17, 0x62, 0x45, 0x8e, 0xa8, 0x85, 0x97, 0xbb, 0xca, 0xce, 0x50, 0x2a,
	0x4b, 0xf0, 0xd2, 0x0f, 0x50, 0x14, 0x4d, 0x51, 0xf4, 0x52, 0xa0, 0xe8, 0xa9, 0x87, 0x16, 0xed,
	0x07, 0x08, 0x7a, 0x2a, 0x0a, 0x1f, 0x53, 0xf4, 0x92, 0x53, 0x51, 0xd8, 0x05, 0x7a, 0xee, 0x37,
	0x28, 0x66, 0xe6, 0xed, 0x70, 0x97, 0x5c, 0xae, 0x96, 0xf6, 0x45, 0xd8, 0x99, 0xf9, 0xbd, 0xf7,
	0x7e, 0x33, 0xef, 0xcd, 0xbc, 0xf7, 0x28, 0x38, 0xdf, 0x70, 0xc2, 0x66, 0x63, 0xcf, 0x71, 0x7d,
	0x6b, 0xf0, 0xf5, 0x65, 0x87, 0x86, 0xdd, 0xda, 0x7e, 0x18, 0xf0, 0x80, 0x9c, 0xd6, 0xd3, 0x35,
	0xfd, 0x55, 0x39, 0xe5, 0xb4, 0x5d, 0x3f, 0xb0, 0xe4, 0x5f, 0x85, 0xab, 0x9c, 0x69, 0x05, 0xad,
	0x40, 0x7e, 0x5a, 0xe2, 0x0b, 0x67, 0xcf, 0xb5, 0x82, 0xa0, 0xe5, 0x51, 0xcb, 0xd9, 0x77, 0x2d,
	0xc7, 0xf7, 0x03, 0xee, 0x70, 0x37, 0xf0, 0x19, 0xae, 0x2e, 0x36, 0x02, 0xd6, 0x0e, 0x98, 0xb5,
	0xe3, 0x30, 0xaa, 0x8c, 0x5a, 0x07, 0x57, 0x77, 0x28, 0x77, 0xae, 0x5a, 0xfb, 0x4e, 0xcb, 0xf5,
	0x25, 0x18, 0xb1, 0xf3, 0x69, 0x44, 0xf7, 0x9d, 0xd0, 0x69, 0x47, 0xda, 0xde, 0x4f, 0x45, 0x84,
	0x41, 0xb3, 0xd3, 0xe0, 0xf5, 0x26, 0xe5, 0x8e, 0xeb, 0x65, 0x42, 0xc5, 0x57, 0xfd, 0xd0, 0xe5,
	0x7b, 0x75, 0xb7, 0xed, 0xb4, 0x28, 0x42, 0xab, 0x69, 0xd0, 0x0e, 0xa3, 0x61, 0xd6, 0xba, 0xf8,
	0xc2, 0xf5, 0xd4, 0x03, 0x6e, 0x3b, 0xbc, 0xb1, 0xa7, 0x0f, 0x21, 0x05, 0xc0, 0x28, 0x57, 0x54,
	0x9c, 0x90, 0x1f, 0x06, 0xe1, 0x53, 0xc4, 0x5e, 0x4c, 0xc7, 0x7a, 0x5e, 0x3d, 0xd8, 0xdd, 0xd5,
	0x94, 0x2e, 0xa4, 0x52, 0x0a, 0x3a, 0x7e, 0xc3, 0xf5, 0xb2, 0x4e, 0x93, 0xd1, 0xf0, 0x40, 0x2b,
	0x79, 0x37, 0x0d, 0x41, 0x7d, 0xa1, 0x86, 0x6b, 0x50, 0x2d, 0x13, 0x94, 0x76, 0x98, 0x31, 0x87,
	0x47, 0xae, 0x6e, 0x04, 0x6e, 0xe4, 0xe4, 0x85, 0x34, 0x7d, 0x07, 0x01, 0x77, 0xfd, 0x56, 0x3d,
	0xa4, 0xac, 0xe3, 0x71, 0xf4, 0xa0, 0x79, 0x06, 0xc8, 0x67, 0x22, 0x60, 0xb6, 0x64, 0x04, 0xd8,
	0xf4, 0xcb, 0x0e, 0x65, 0xdc, 0xfc, 0x1c, 0x4e, 0x27, 0x66, 0xd9, 0x7e, 0xe0, 0x33, 0x4a, 0xee,
	0x42, 0x51, 0x45, 0x4a, 0xd9, 0x98, 0x37, 0x16, 0x8e, 0x2f, 0xbd, 0x5d, 0x4b, 0x09, 0xea, 0x9a,
	0x12, 0x5a, 0x2b, 0x3d, 0xfb, 0xd7, 0xf9, 0x63, 0x7f, 0xf8, 0xef, 0x5f, 0x16, 0x0d, 0x1b, 0xa5,
	0x4c, 0x0b, 0xde, 0x91, 0x6a, 0x37, 0x29, 0xdf, 0x52, 0xf1, 0x74, 0x4f, 0x85, 0x13, 0xda, 0x25,
	0x27, 0x60, 0xca, 0x6d, 0x4a, 0xe5, 0x05, 0x7b, 0xca, 0x6d, 0x9a, 0x0c, 0xaa, 0xe3, 0x04, 0x90,
	0xd2, 0x67, 0x70, 0x22, 0xb9, 0x82, 0xd4, 0xde, 0x4d, 0xa7, 0x96, 0x80, 0xae, 0x15, 0x04, 0x45,
	0x7b, 0x48, 0x81, 0xd9, 0x42, 0x96, 0xab, 0x9e, 0x97, 0xce, 0x72, 0x03, 0x60, 0x70, 0xad, 0xd0,
	0xde, 0xa5, 0x9a, 0x72, 0x49, 0x4d, 0xb8, 0xa4, 0xa6, 0x2e, 0x3e, 0x3a, 0xa6, 0xb6, 0xe5, 0xb4,
	0x28, 0xca, 0xda, 0x31, 0x49, 0xf3, 0x6b, 0x03, 0xb7, 0x97, 0x62, 0x29, 0x63, 0x7b, 0xd3, 0xaf,
	0xb4, 0x3d, 0xb2, 0x99, 0x60, 0x3f, 0x25, 0xd9, 0x5f, 0x3e, 0x92, 0xbd, 0xe2, 0x93, 0xa0, 0xbf,
	0x08, 0x27, 0x25, 0xfb, 0x75, 0x27, 0x6c, 0x46, 0x47, 0xf3, 0x16, 0x14, 0x05, 0x9d, 0x07, 0x91,
	0x13, 0x71, 0x64, 0x3e, 0x84, 0x53, 0x31, 0x2c, 0x6e, 0xee, 0x06, 0x14, 0xc4, 0x32, 0x9e, 0xa0,
	0x99, 0xba, 0x25, 0x21, 0xf0, 0x23, 0x97, 0xef, 0x3d, 0x10, 0xd1, 0x6f, 0x4b, 0xbc, 0xf9, 0x01,
	0x1a, 0xfe, 0x9c, 0xd1, 0x30, 0x32, 0x5c, 0x86, 0x59, 0xa7, 0xd9, 0x0c, 0x29, 0x53, 0x01, 0x50,
	0xb2, 0xa3, 0xa1, 0xb9, 0x86, 0xa6, 0x15, 0x1a, 0x4d, 0x5f, 0x81, 0x82, 0x78, 0x7b, 0xd0, 0xf4,
	0xd9, 0x54, 0xd3, 0x52, 0x40, 0xc2, 0xcc, 0xdf, 0x15, 0x62, 0xfc, 0x75, 0x1c, 0x9c, 0x81, 0x99,
	0xe0, 0xd0, 0x47, 0x2d, 0x25, 0x5b, 0x0d, 0xc8, 0x4d, 0x28, 0x32, 0xee, 0xf0, 0x0e, 0x2b, 0x4f,
	0xcd, 0x4f, 0x2f, 0x9c, 0x58, 0x3a, 0x3f, 0x76, 0x5f, 0xdb, 0x12, 0x66, 0x23, 0x9c, 0xac, 0xc0,
	0x9c, 0x58, 0xff, 0x61, 0x77, 0x9f, 0x96, 0xa7, 0xa5, 0xe8, 0x3b, 0x63, 0x45, 0x05, 0xc8, 0xd6,
	0x70, 0x72, 0x0d, 0x66, 0x1a, 0x9e, 0xc3, 0x58, 0xb9, 0x20, 0xe5, 0xaa, 0x63, 0xe5, 0xd6, 0x05,
	0xca, 0x56, 0x60, 0xe1, 0x2c, 0x16, 0x84, 0x7c, 0xad, 0x5b, 0x9e, 0x91, 0x1b, 0xc0, 0x11, 0x31,
	0xe1, 0x35, 0xdf, 0x69, 0xd3, 0xf5, 0xc0, 0xe7, 0x8e, 0xeb, 0xb3, 0x72, 0x51, 0xae, 0x26, 0xe6,
	0xc8, 0x22, 0x9c, 0x7c, 0x4a, 0xbb, 0x87, 0x41, 0xd8, 0x64, 0x1a, 0x37, 0x2b, 0x71, 0x23, 0xf3,
	0xe4, 0x22, 0xbc, 0xee, 0x07, 0x9c, 0x0e, 0x80, 0x73, 0x12, 0x98, 0x9c, 0x24, 0x0b, 0xf0, 0x46,
	0xe0, 0x7b, 0xdd, 0x6d, 0xee, 0x84, 0x9c, 0x86, 0x82, 0x6c, 0xb9, 0x34, 0x6f, 0x2c, 0xcc, 0xd9,
	0xc3, 0xd3, 0xa4, 0x06, 0x44, 0x4c, 0xad, 0x39, 0x9e, 0xe3, 0x37, 0xe8, 0xaa, 0xdf, 0xd8, 0x0b,
	0x42, 0x56, 0x06, 0x09, 0x4e, 0x59, 0x21, 0x1f, 0xc1, 0x5c, 0xe8, 0x84, 0x2e, 0x77, 0x29, 0x2b,
	0x1f, 0x3f, 0xc2, 0x27, 0xb6, 0x00, 0x76, 0x6d, 0x2d, 0x40, 0x2e, 0xc1, 0x89, 0x76, 0xc7, 0xe3,
	0xae, 0x3c, 0xb9, 0x4f, 0x7d, 0xaf, 0x5b, 0x7e, 0x4d, 0x1a, 0x1a, 0x9a, 0x35, 0x6b, 0xf8, 0x90,
	0x62, 0x84, 0x60, 0x9c, 0x95, 0x61, 0x56, 0xdd, 0x00, 0x75, 0x71, 0x0b, 0x76, 0x34, 0x34, 0xaf,
	0x60, 0x44, 0x3d, 0x12, 0x29, 0x2c, 0x16, 0xc5, 0x32, 0xa5, 0xe9, 0xfb, 0x13, 0x0d, 0xcd, 0x0d,
	0x54, 0x8f, 0x70, 0x54, 0xff, 0x21, 0xcc, 0x48, 0x00, 0xc6, 0x71, 0x25, 0x75, 0x5b, 0x4a, 0x44,
	0x01, 0xcd, 0xcb, 0xf0, 0x86, 0xd4, 0xb3, 0x4d, 0x79, 0x2c, 0x8c, 0x19, 0xe5, 0xda, 0xa4, 0x1a,
	0x98, 0x8f, 0xf0, 0x92, 0x49, 0x20, 0x9a, 0x5b, 0x49, 0x9a, 0x4b, 0x7f, 0x84, 0xb6, 0x29, 0x17,
	0x17, 0x76, 0x55, 0x25, 0xdc, 0xc8, 0xee, 0x0a, 0xbc, 0x89, 0xea, 0x3c, 0xef, 0x53, 0x91, 0x63,
	0x23, 0xeb, 0xf3, 0x70, 0x9c, 0x45, 0x73, 0x9a, 0x43, 0x7c, 0xca, 0x7c, 0x02, 0x6f, 0x0d, 0x8b,
	0x22, 0x9f, 0x3b, 0x50, 0xd2, 0x40, 0xe4, 0x54, 0x1d, 0xc3, 0x29, 0x12, 0x1d, 0x08, 0x98, 0xcb,
	0x98, 0xe4, 0xd6, 0x55, 0x46, 0x8f, 0x08, 0x9d, 0x83, 0x12, 0xe6, 0x78, 0x4d, 0x67, 0x30, 0x61,
	0x3e, 0x86, 0x33, 0x49, 0x21, 0xfd, 0x96, 0xcd, 0x22, 0x08, 0x89, 0x9c, 0x4b, 0x0f, 0x31, 0x14,
	0x8b, 0xc0, 0xe6, 0x87, 0xe8, 0xd7, 0x6d, 0x59, 0x33, 0x44, 0x1c, 0x2a, 0x30, 0xa7, 0x8a, 0x08,
	0x4d, 0x41, 0x8f, 0xcd, 0x1f, 0x20, 0xed, 0x48, 0x02, 0x09, 0x2c, 0x43, 0x51, 0x41, 0x32, 0x73,
	0x33, 0x0a, 0x21, 0x54, 0x7b, 0xe5, 0x7e, 0x54, 0x6a, 0xc4, 0xbc, 0xa2, 0xcb, 0x8f, 0x81, 0x57,
	0x62, 0x53, 0xda, 0x2b, 0x31, 0xd1, 0x81, 0x57, 0x34, 0x30, 0xd3, 0x2b, 0x03, 0xd1, 0x81, 0x80,
	0x59, 0x1e, 0xd6, 0xab, 0x8b, 0x92, 0x1f, 0xc3, 0x77, 0x46, 0x56, 0x74, 0x61, 0x02, 0x5a, 0x43,
	0x94, 0x22, 0x8f, 0xb2, 0x19, 0x93, 0x30, 0xe7, 0x31, 0x11, 0xeb, 0xd5, 0x41, 0xca, 0x41, 0xe3,
	0x7b, 0x70, 0x7e, 0x2c, 0x02, 0x49, 0xdc, 0x1f, 0xdd, 0xf7, 0xe5, 0x6c, 0x0e, 0x03, 0x1d, 0xb1,
	0x03, 0xb8, 0x30, 0x6c, 0x89, 0x8d, 0x90, 0x79, 0x0a, 0xf3, 0xe3, 0x21, 0xc8, 0x66, 0x33, 0xe5,
	0x48, 0x72, 0xd3, 0x89, 0x9f, 0xcd, 0xdb, 0x70, 0x56, 0x3f, 0x6c, 0x52, 0xe0, 0x81, 0xbf, 0x1b,
	0x44, 0x4c, 0xfe, 0x31, 0x05, 0x95, 0xb4, 0x55, 0x24, 0xf1, 0x10, 0x4e, 0x0a, 0x3b, 0xab, 0x9d,
	0x86, 0xa8, 0x18, 0xb6, 0x42, 0xb7, 0x41, 0x07, 0x29, 0x37, 0x56, 0x71, 0x44, 0xb5, 0xc6, 0x7a,
	0xe0, 0xfa, 0x58, 0xb6, 0x8c, 0x08, 0x92, 0x2a, 0x80, 0xd3, 0xe0, 0xee, 0x01, 0xdd, 0xa6, 0x5c,
	0x25, 0xd7, 0x82, 0x1d, 0x9b, 0x11, 0x31, 0x2b, 0x64, 0xd8, 0xe3, 0x4e, 0x7b, 0x87, 0x86, 0xe5,
	0x69, 0x15, 0xb3, 0xb1, 0x29, 0x91, 0x88, 0xe4, 0x6b, 0x44, 0x23, 0x4c, 0x41, 0x62, 0x92, 0x93,
	0x22, 0xb5, 0xe9, 0x47, 0x22, 0x02, 0xce, 0x48, 0xe0, 0xc8, 0xbc, 0xc8, 0x0e, 0x78, 0x93, 0x23,
	0x64, 0x51, 0x22, 0x87, 0x66, 0x85, 0x4e, 0xcf, 0x61, 0x5c, 0x9c, 0xd2, 0xa3, 0xa0, 0xe9, 0xee,
	0xba, 0xb4, 0x29, 0xd3, 0x65, 0xc1, 0x1e, 0x99, 0x37, 0x57, 0xe0, 0x82, 0x7e, 0x79, 0x65, 0x36,
	0xba, 0xe7, 0x32, 0x1e, 0xba, 0x3b, 0x1d, 0x71, 0x14, 0xa9, 0x8f, 0x76, 0x29, 0x7a, 0xb4, 0x9f,
	0x80, 0x99, 0x25, 0x1a, 0x4b, 0x4a, 0x9d, 0x30, 0xa4, 0x3e, 0xd7, 0x49, 0x49, 0x0d, 0x45, 0x45,
	0x70, 0xe8, 0xf8, 0x9c, 0x36, 0xf1, 0x78, 0x71, 0x64, 0xde, 0x82, 0x73, 0xaa, 0x50, 0x6d, 0xc8,
	0xb0, 0xd8, 0x08, 0x83, 0xf6, 0x17, 0xd4, 0xf1, 0xba, 0xb1, 0xbc, 0xf5, 0x53, 0x31, 0xd6, 0x7c,
	0xa2, 0xa1, 0xb9, 0x12, 0x15, 0xd3, 0x23, 0x92, 0x03, 0x32, 0x63, 0x0a, 0xb7, 0x28, 0xf0, 0x9e,
	0xc8, 0xbe, 0xc5, 0x56, 0x6d, 0x4b, 0x14, 0x78, 0x3e, 0xc6, 0xdd, 0xd0, 0x22, 0x2a, 0xdd, 0x82,
	0x53, 0xe2, 0x58, 0x13, 0x8b, 0x99, 0x65, 0x66, 0x52, 0xcd, 0xa8, 0xf0, 0xd2, 0xff, 0xce, 0xc2,
	0x8c, 0x34, 0x48, 0x7e, 0x69, 0x40, 0x51, 0xb5, 0x38, 0x24, 0xfd, 0x3e, 0x8d, 0xf6, 0x53, 0x95,
	0x85, 0xa3, 0x81, 0x8a, 0xb9, 0x79, 0xfd, 0x67, 0xff, 0xfc, 0xcf, 0x57, 0x53, 0x16, 0xb9, 0x62,
	0xdd, 0xa3, 0x0d, 0xea, 0xf3, 0xd0, 0xf1, 0x44, 0x70, 0x6c, 0x3a, 0x6d, 0x6a, 0x8d, 0xef, 0xdc,
	0xc9, 0x5f, 0x8d, 0xe1, 0x46, 0x81, 0x2c, 0x8d, 0xb7, 0x39, 0xae, 0xff, 0xaa, 0x2c, 0x4f, 0x24,
	0x83, 0x94, 0xd7, 0x25, 0xe5, 0x8f, 0xc9, 0x47, 0x79, 0x29, 0x27, 0x7f, 0x4a, 0xb0, 0x7a, 0x6e,
	0xb3, 0x4f, 0xbe, 0x36, 0xe0, 0x54, 0x52, 0xff, 0xaa, 0xe7, 0x65, 0xed, 0x61, 0x5c, 0x77, 0x96,
	0xb5, 0x87, 0xb1, 0x7d, 0x96, 0x79, 0x57, 0xee, 0xe1, 0x16, 0xb9, 0xf1, 0x72, 0x7b, 0x20, 0x5f,
	0x19, 0x50, 0x90, 0xb5, 0xe9, 0x7b, 0xe3, 0xad, 0xc7, 0xfa, 0xa4, 0xca, 0xa5, 0xa3, 0x60, 0xc8,
	0xeb, 0x8e, 0xe4, 0x75, 0x83, 0x5c, 0xcb, 0xc9, 0x4b, 0x7c, 0x59, 0x3d, 0x55, 0x63, 0xf6, 0xc9,
	0xaf, 0x0c, 0x28, 0x88, 0x2e, 0x26, 0x8b, 0x55, 0xac, 0x89, 0xca, 0x62, 0x15, 0xef, 0x9e, 0xcc,
	0x8f, 0x25, 0xab, 0x9b, 0xe4, 0x7a, 0x4e, 0x56, 0xa2, 0x87, 0xb2, 0x7a, 0x78, 0xaf, 0xfb, 0xe4,
	0xd7, 0x06, 0xcc, 0xc8, 0x32, 0x99, 0x1c, 0x71, 0x0c, 0xda, 0xa7, 0x97, 0x8f, 0xc4, 0xbd, 0xc2,
	0x79, 0x31, 0xab, 0x27, 0x3b, 0xb7, 0x3e, 0xf9, 0x8d, 0x01, 0x33, 0xb2, 0x5a, 0xce, 0x22, 0x16,
	0x2f, 0xd8, 0xb3, 0x88, 0x25, 0x2a, 0xf5, 0x89, 0x03, 0x4c, 0xa6, 0x24, 0xab, 0x87, 0xe5, 0x7f,
	0x9f, 0xfc, 0xdc, 0x80, 0xe9, 0x6d, 0xca, 0xc9, 0xc5, 0xf1, 0x06, 0x07, 0x25, 0x7d, 0xe5, 0xbd,
	0x23, 0x50, 0x48, 0xea, 0xb6, 0x24, 0x75, 0x8d, 0x2c, 0xe5, 0x24, 0xc5, 0x28, 0xb7, 0x7a, 0x32,
	0xd3, 0xf4, 0xc9, 0x9f, 0x0c, 0x28, 0xe9, 0xb2, 0x9a, 0x2c, 0x66, 0x19, 0x4c, 0x56, 0xfc, 0x95,
	0xef, 0xe6, 0xc2, 0x22, 0xc5, 0x4d, 0x49, 0x71, 0x95, 0x7c, 0x2f, 0x37, 0xc5, 0xe8, 0x47, 0x3c,
	0xc1, 0x54, 0x37, 0x11, 0x7d, 0xf2, 0x7b, 0x03, 0x66, 0xb1, 0xfa, 0x26, 0x19, 0xcf, 0x71, 0xb2,
	0x19, 0xa8, 0xbc, 0x9f, 0x03, 0x89, 0x4c, 0xd7, 0x24, 0xd3, 0x3b, 0xe4, 0x76, 0xde, 0xd0, 0x53,
	0xf2, 0x56, 0x4f, 0x37, 0x17, 0x7d, 0xf2, 0x5b, 0x03, 0x8a, 0xaa, 0x44, 0xcf, 0xca, 0x2d, 0x89,
	0x5e, 0x21, 0x2b, 0xb7, 0x24, 0x5b, 0x04, 0xf3, 0x13, 0xc9, 0xf0, 0x36, 0xb9, 0x95, 0xfb, 0x2c,
	0x85, 0xb8, 0x38, 0x47, 0xd5, 0x7a, 0xf4, 0xc9, 0x1f, 0x0d, 0x28, 0xe9, 0x72, 0x31, 0xcb, 0xe9,
	0xc3, 0x0d, 0x45, 0x96, 0xd3, 0x47, 0x3a, 0x08, 0x73, 0x43, 0x12, 0xfd, 0x84, 0xdc, 0xcd, 0x49,
	0x54, 0x57, 0xab, 0x56, 0x2f, 0xd6, 0xa2, 0x48, 0x9f, 0xc3, 0xa0, 0x46, 0x26, 0x79, 0x38, 0xe8,
	0x27, 0xe7, 0x83, 0x7c, 0x60, 0x64, 0xbc, 0x22, 0x19, 0x2f, 0x93, 0xab, 0x93, 0x32, 0x66, 0xe4,
	0x6f, 0x06, 0x90, 0xd1, 0x12, 0x9c, 0x2c, 0xe7, 0xb0, 0x3f, 0xdc, 0x18, 0x54, 0xae, 0x4d, 0x26,
	0xf4, 0x92, 0x09, 0x3c, 0xed, 0x87, 0x69, 0xf2, 0xcc, 0x80, 0xd3, 0x29, 0xfd, 0x08, 0xc9, 0x43,
	0x69, 0xa4, 0xc3, 0xa9, 0x5c, 0x9f, 0x50, 0x0a, 0x77, 0x72, 0x4f, 0xee, 0xe4, 0x2e, 0xb9, 0x33,
	0xb1, 0x1b, 0xe2, 0x5b, 0xf9, 0xb3, 0x01, 0xaf, 0x27, 0xfa, 0x19, 0x52, 0xcb, 0xce, 0x3f, 0xc3,
	0x6d, 0x51, 0xc5, 0xca, 0x8d, 0x7f, 0xc9, 0x8c, 0xaa, 0xbf, 0xea, 0xae, 0xe0, 0xf7, 0xad, 0x01,
	0x6f, 0xa6, 0xd6, 0xfc, 0xe4, 0x46, 0x76, 0x26, 0x18, 0xd7, 0x5f, 0x54, 0x6e, 0x4e, 0x2c, 0x87,
	0x3b, 0x79, 0x2c, 0x77, 0xf2, 0x7d, 0xb2, 0x91, 0x3f, 0xa7, 0xd4, 0xe5, 0x8f, 0x6d, 0xdd, 0x7a,
	0x33, 0xa6, 0x4f, 0xe7, 0x99, 0xbf, 0x1b, 0x70, 0x72, 0xb8, 0x79, 0x20, 0x57, 0x33, 0x6a, 0xbc,
	0xf4, 0x16, 0xa5, 0xb2, 0x34, 0x89, 0x08, 0xee, 0xe5, 0xa1, 0xdc, 0xcb, 0x7d, 0xb2, 0x9e, 0x73,
	0x2f, 0x8e, 0x52, 0x54, 0xdf, 0x0d, 0x83, 0x76, 0x5d, 0x76, 0x40, 0x56, 0x0f, 0x1b, 0xa1, 0xbe,
	0x8c, 0xaa, 0x44, 0x4f, 0x91, 0x15, 0x55, 0x69, 0x3d, 0x4f, 0x56, 0x54, 0xa5, 0xb6, 0x41, 0x13,
	0x47, 0x55, 0xf2, 0x3f, 0x44, 0x6b, 0xf6, 0xb3, 0xe7, 0x55, 0xe3, 0x9b, 0xe7, 0x55, 0xe3, 0xdf,
	0xcf, 0xab, 0xc6, 0x2f, 0x5e, 0x54, 0x8f, 0x7d, 0xf3, 0xa2, 0x7a, 0xec, 0xdb, 0x17, 0xd5, 0x63,
	0x5f, 0xdc, 0x6a, 0xb9, 0x7c, 0xaf, 0xb3, 0x53, 0x6b, 0x04, 0xed, 0x4c, 0xd5, 0x3f, 0x89, 0x7d,
	0xf3, 0xee, 0x3e, 0x65, 0x3b, 0x45, 0xf9, 0x6f, 0xa7, 0xe5, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xc4, 0x5e, 0x62, 0x03, 0x30, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ProductDetails items.
	ProductDetails(ctx context.Context, in *QueryGetProductDetailsRequest, opts ...grpc.CallOption) (*QueryGetProductDetailsResponse, error)
	ProductDetailsAll(ctx context.Context, in *QueryAllProductDetailsRequest, opts ...grpc.CallOption) (*QueryAllProductDetailsResponse, error)
	// Queries a list of Card items.
	Card(ctx context.Context, in *QueryCardRequest, opts ...grpc.CallOption) (*QueryCardResponse, error)
	// Queries a list of User items.
	User(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error)
	// Queries a list of Cards items.
	Cards(ctx context.Context, in *QueryCardsRequest, opts ...grpc.CallOption) (*QueryCardsResponse, error)
	// Queries a list of Match items.
	Match(ctx context.Context, in *QueryMatchRequest, opts ...grpc.CallOption) (*QueryMatchResponse, error)
	// Queries a list of Set items.
	Set(ctx context.Context, in *QuerySetRequest, opts ...grpc.CallOption) (*QuerySetResponse, error)
	// Queries a list of SellOffer items.
	SellOffer(ctx context.Context, in *QuerySellOfferRequest, opts ...grpc.CallOption) (*QuerySellOfferResponse, error)
	// Queries a list of Council items.
	Council(ctx context.Context, in *QueryCouncilRequest, opts ...grpc.CallOption) (*QueryCouncilResponse, error)
	// Queries a list of Server items.
	Server(ctx context.Context, in *QueryServerRequest, opts ...grpc.CallOption) (*QueryServerResponse, error)
	// Queries a list of Encounter items.
	Encounter(ctx context.Context, in *QueryEncounterRequest, opts ...grpc.CallOption) (*QueryEncounterResponse, error)
	// Queries a list of Encounters items.
	Encounters(ctx context.Context, in *QueryEncountersRequest, opts ...grpc.CallOption) (*QueryEncountersResponse, error)
	// Queries a list of EncounterWithImage items.
	EncounterWithImage(ctx context.Context, in *QueryEncounterWithImageRequest, opts ...grpc.CallOption) (*QueryEncounterWithImageResponse, error)
	// Queries a list of EncountersWithImage items.
	EncountersWithImage(ctx context.Context, in *QueryEncountersWithImageRequest, opts ...grpc.CallOption) (*QueryEncountersWithImageResponse, error)
	// Queries a list of CardchainInfo items.
	CardchainInfo(ctx context.Context, in *QueryCardchainInfoRequest, opts ...grpc.CallOption) (*QueryCardchainInfoResponse, error)
	// Queries a list of SetRarityDistribution items.
	SetRarityDistribution(ctx context.Context, in *QuerySetRarityDistributionRequest, opts ...grpc.CallOption) (*QuerySetRarityDistributionResponse, error)
	// Queries a list of AccountFromZealy items.
	AccountFromZealy(ctx context.Context, in *QueryAccountFromZealyRequest, opts ...grpc.CallOption) (*QueryAccountFromZealyResponse, error)
	// Queries a list of VotingResults items.
	VotingResults(ctx context.Context, in *QueryVotingResultsRequest, opts ...grpc.CallOption) (*QueryVotingResultsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProductDetails(ctx context.Context, in *QueryGetProductDetailsRequest, opts ...grpc.CallOption) (*QueryGetProductDetailsResponse, error) {
	out := new(QueryGetProductDetailsResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/ProductDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProductDetailsAll(ctx context.Context, in *QueryAllProductDetailsRequest, opts ...grpc.CallOption) (*QueryAllProductDetailsResponse, error) {
	out := new(QueryAllProductDetailsResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/ProductDetailsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Card(ctx context.Context, in *QueryCardRequest, opts ...grpc.CallOption) (*QueryCardResponse, error) {
	out := new(QueryCardResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Card", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) User(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error) {
	out := new(QueryUserResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Cards(ctx context.Context, in *QueryCardsRequest, opts ...grpc.CallOption) (*QueryCardsResponse, error) {
	out := new(QueryCardsResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Cards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Match(ctx context.Context, in *QueryMatchRequest, opts ...grpc.CallOption) (*QueryMatchResponse, error) {
	out := new(QueryMatchResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Match", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Set(ctx context.Context, in *QuerySetRequest, opts ...grpc.CallOption) (*QuerySetResponse, error) {
	out := new(QuerySetResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellOffer(ctx context.Context, in *QuerySellOfferRequest, opts ...grpc.CallOption) (*QuerySellOfferResponse, error) {
	out := new(QuerySellOfferResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/SellOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Council(ctx context.Context, in *QueryCouncilRequest, opts ...grpc.CallOption) (*QueryCouncilResponse, error) {
	out := new(QueryCouncilResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Council", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Server(ctx context.Context, in *QueryServerRequest, opts ...grpc.CallOption) (*QueryServerResponse, error) {
	out := new(QueryServerResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Server", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Encounter(ctx context.Context, in *QueryEncounterRequest, opts ...grpc.CallOption) (*QueryEncounterResponse, error) {
	out := new(QueryEncounterResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Encounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Encounters(ctx context.Context, in *QueryEncountersRequest, opts ...grpc.CallOption) (*QueryEncountersResponse, error) {
	out := new(QueryEncountersResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/Encounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncounterWithImage(ctx context.Context, in *QueryEncounterWithImageRequest, opts ...grpc.CallOption) (*QueryEncounterWithImageResponse, error) {
	out := new(QueryEncounterWithImageResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/EncounterWithImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncountersWithImage(ctx context.Context, in *QueryEncountersWithImageRequest, opts ...grpc.CallOption) (*QueryEncountersWithImageResponse, error) {
	out := new(QueryEncountersWithImageResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/EncountersWithImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CardchainInfo(ctx context.Context, in *QueryCardchainInfoRequest, opts ...grpc.CallOption) (*QueryCardchainInfoResponse, error) {
	out := new(QueryCardchainInfoResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/CardchainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SetRarityDistribution(ctx context.Context, in *QuerySetRarityDistributionRequest, opts ...grpc.CallOption) (*QuerySetRarityDistributionResponse, error) {
	out := new(QuerySetRarityDistributionResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/SetRarityDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountFromZealy(ctx context.Context, in *QueryAccountFromZealyRequest, opts ...grpc.CallOption) (*QueryAccountFromZealyResponse, error) {
	out := new(QueryAccountFromZealyResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/AccountFromZealy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VotingResults(ctx context.Context, in *QueryVotingResultsRequest, opts ...grpc.CallOption) (*QueryVotingResultsResponse, error) {
	out := new(QueryVotingResultsResponse)
	err := c.cc.Invoke(ctx, "/cardchain.cardchain.Query/VotingResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ProductDetails items.
	ProductDetails(context.Context, *QueryGetProductDetailsRequest) (*QueryGetProductDetailsResponse, error)
	ProductDetailsAll(context.Context, *QueryAllProductDetailsRequest) (*QueryAllProductDetailsResponse, error)
	// Queries a list of Card items.
	Card(context.Context, *QueryCardRequest) (*QueryCardResponse, error)
	// Queries a list of User items.
	User(context.Context, *QueryUserRequest) (*QueryUserResponse, error)
	// Queries a list of Cards items.
	Cards(context.Context, *QueryCardsRequest) (*QueryCardsResponse, error)
	// Queries a list of Match items.
	Match(context.Context, *QueryMatchRequest) (*QueryMatchResponse, error)
	// Queries a list of Set items.
	Set(context.Context, *QuerySetRequest) (*QuerySetResponse, error)
	// Queries a list of SellOffer items.
	SellOffer(context.Context, *QuerySellOfferRequest) (*QuerySellOfferResponse, error)
	// Queries a list of Council items.
	Council(context.Context, *QueryCouncilRequest) (*QueryCouncilResponse, error)
	// Queries a list of Server items.
	Server(context.Context, *QueryServerRequest) (*QueryServerResponse, error)
	// Queries a list of Encounter items.
	Encounter(context.Context, *QueryEncounterRequest) (*QueryEncounterResponse, error)
	// Queries a list of Encounters items.
	Encounters(context.Context, *QueryEncountersRequest) (*QueryEncountersResponse, error)
	// Queries a list of EncounterWithImage items.
	EncounterWithImage(context.Context, *QueryEncounterWithImageRequest) (*QueryEncounterWithImageResponse, error)
	// Queries a list of EncountersWithImage items.
	EncountersWithImage(context.Context, *QueryEncountersWithImageRequest) (*QueryEncountersWithImageResponse, error)
	// Queries a list of CardchainInfo items.
	CardchainInfo(context.Context, *QueryCardchainInfoRequest) (*QueryCardchainInfoResponse, error)
	// Queries a list of SetRarityDistribution items.
	SetRarityDistribution(context.Context, *QuerySetRarityDistributionRequest) (*QuerySetRarityDistributionResponse, error)
	// Queries a list of AccountFromZealy items.
	AccountFromZealy(context.Context, *QueryAccountFromZealyRequest) (*QueryAccountFromZealyResponse, error)
	// Queries a list of VotingResults items.
	VotingResults(context.Context, *QueryVotingResultsRequest) (*QueryVotingResultsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ProductDetails(ctx context.Context, req *QueryGetProductDetailsRequest) (*QueryGetProductDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDetails not implemented")
}
func (*UnimplementedQueryServer) ProductDetailsAll(ctx context.Context, req *QueryAllProductDetailsRequest) (*QueryAllProductDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDetailsAll not implemented")
}
func (*UnimplementedQueryServer) Card(ctx context.Context, req *QueryCardRequest) (*QueryCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Card not implemented")
}
func (*UnimplementedQueryServer) User(ctx context.Context, req *QueryUserRequest) (*QueryUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (*UnimplementedQueryServer) Cards(ctx context.Context, req *QueryCardsRequest) (*QueryCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cards not implemented")
}
func (*UnimplementedQueryServer) Match(ctx context.Context, req *QueryMatchRequest) (*QueryMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (*UnimplementedQueryServer) Set(ctx context.Context, req *QuerySetRequest) (*QuerySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedQueryServer) SellOffer(ctx context.Context, req *QuerySellOfferRequest) (*QuerySellOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOffer not implemented")
}
func (*UnimplementedQueryServer) Council(ctx context.Context, req *QueryCouncilRequest) (*QueryCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Council not implemented")
}
func (*UnimplementedQueryServer) Server(ctx context.Context, req *QueryServerRequest) (*QueryServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Server not implemented")
}
func (*UnimplementedQueryServer) Encounter(ctx context.Context, req *QueryEncounterRequest) (*QueryEncounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encounter not implemented")
}
func (*UnimplementedQueryServer) Encounters(ctx context.Context, req *QueryEncountersRequest) (*QueryEncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encounters not implemented")
}
func (*UnimplementedQueryServer) EncounterWithImage(ctx context.Context, req *QueryEncounterWithImageRequest) (*QueryEncounterWithImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncounterWithImage not implemented")
}
func (*UnimplementedQueryServer) EncountersWithImage(ctx context.Context, req *QueryEncountersWithImageRequest) (*QueryEncountersWithImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncountersWithImage not implemented")
}
func (*UnimplementedQueryServer) CardchainInfo(ctx context.Context, req *QueryCardchainInfoRequest) (*QueryCardchainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardchainInfo not implemented")
}
func (*UnimplementedQueryServer) SetRarityDistribution(ctx context.Context, req *QuerySetRarityDistributionRequest) (*QuerySetRarityDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRarityDistribution not implemented")
}
func (*UnimplementedQueryServer) AccountFromZealy(ctx context.Context, req *QueryAccountFromZealyRequest) (*QueryAccountFromZealyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountFromZealy not implemented")
}
func (*UnimplementedQueryServer) VotingResults(ctx context.Context, req *QueryVotingResultsRequest) (*QueryVotingResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotingResults not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProductDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/ProductDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProductDetails(ctx, req.(*QueryGetProductDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProductDetailsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProductDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProductDetailsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/ProductDetailsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProductDetailsAll(ctx, req.(*QueryAllProductDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Card_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Card(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Card",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Card(ctx, req.(*QueryCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).User(ctx, req.(*QueryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Cards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Cards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Cards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Cards(ctx, req.(*QueryCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Match",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Match(ctx, req.(*QueryMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Set(ctx, req.(*QuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySellOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/SellOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellOffer(ctx, req.(*QuerySellOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Council_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Council(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Council",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Council(ctx, req.(*QueryCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Server_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Server(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Server",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Server(ctx, req.(*QueryServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Encounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Encounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Encounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Encounter(ctx, req.(*QueryEncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Encounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Encounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/Encounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Encounters(ctx, req.(*QueryEncountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncounterWithImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncounterWithImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncounterWithImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/EncounterWithImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncounterWithImage(ctx, req.(*QueryEncounterWithImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncountersWithImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncountersWithImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncountersWithImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/EncountersWithImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncountersWithImage(ctx, req.(*QueryEncountersWithImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CardchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCardchainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CardchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/CardchainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CardchainInfo(ctx, req.(*QueryCardchainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SetRarityDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySetRarityDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SetRarityDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/SetRarityDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SetRarityDistribution(ctx, req.(*QuerySetRarityDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountFromZealy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountFromZealyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountFromZealy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/AccountFromZealy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountFromZealy(ctx, req.(*QueryAccountFromZealyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VotingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotingResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VotingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardchain.cardchain.Query/VotingResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VotingResults(ctx, req.(*QueryVotingResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cardchain.cardchain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ProductDetails",
			Handler:    _Query_ProductDetails_Handler,
		},
		{
			MethodName: "ProductDetailsAll",
			Handler:    _Query_ProductDetailsAll_Handler,
		},
		{
			MethodName: "Card",
			Handler:    _Query_Card_Handler,
		},
		{
			MethodName: "User",
			Handler:    _Query_User_Handler,
		},
		{
			MethodName: "Cards",
			Handler:    _Query_Cards_Handler,
		},
		{
			MethodName: "Match",
			Handler:    _Query_Match_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Query_Set_Handler,
		},
		{
			MethodName: "SellOffer",
			Handler:    _Query_SellOffer_Handler,
		},
		{
			MethodName: "Council",
			Handler:    _Query_Council_Handler,
		},
		{
			MethodName: "Server",
			Handler:    _Query_Server_Handler,
		},
		{
			MethodName: "Encounter",
			Handler:    _Query_Encounter_Handler,
		},
		{
			MethodName: "Encounters",
			Handler:    _Query_Encounters_Handler,
		},
		{
			MethodName: "EncounterWithImage",
			Handler:    _Query_EncounterWithImage_Handler,
		},
		{
			MethodName: "EncountersWithImage",
			Handler:    _Query_EncountersWithImage_Handler,
		},
		{
			MethodName: "CardchainInfo",
			Handler:    _Query_CardchainInfo_Handler,
		},
		{
			MethodName: "SetRarityDistribution",
			Handler:    _Query_SetRarityDistribution_Handler,
		},
		{
			MethodName: "AccountFromZealy",
			Handler:    _Query_AccountFromZealy_Handler,
		},
		{
			MethodName: "VotingResults",
			Handler:    _Query_VotingResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cardchain/cardchain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProductDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProductDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProductDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProductDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProductDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProductDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProductDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProductDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProductDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProductDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProductDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProductDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProductDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProductDetails) > 0 {
		for iNdEx := len(m.ProductDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProductDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Card != nil {
		{
			size, err := m.Card.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MultiClassOnly {
		i--
		if m.MultiClassOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Rarities) > 0 {
		dAtA8 := make([]byte, len(m.Rarities)*10)
		var j7 int
		for _, num := range m.Rarities {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintQuery(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x5a
	}
	if m.OnlyBalanceAnchors {
		i--
		if m.OnlyBalanceAnchors {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.OnlyStarterCard {
		i--
		if m.OnlyStarterCard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.NotesContains) > 0 {
		i -= len(m.NotesContains)
		copy(dAtA[i:], m.NotesContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NotesContains)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeywordsContains) > 0 {
		i -= len(m.KeywordsContains)
		copy(dAtA[i:], m.KeywordsContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeywordsContains)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SortBy) > 0 {
		i -= len(m.SortBy)
		copy(dAtA[i:], m.SortBy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SortBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Class) > 0 {
		dAtA10 := make([]byte, len(m.Class)*10)
		var j9 int
		for _, num := range m.Class {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintQuery(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CardType) > 0 {
		dAtA12 := make([]byte, len(m.CardType)*10)
		var j11 int
		for _, num := range m.CardType {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintQuery(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		dAtA14 := make([]byte, len(m.Status)*10)
		var j13 int
		for _, num := range m.Status {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintQuery(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardIds) > 0 {
		dAtA16 := make([]byte, len(m.CardIds)*10)
		var j15 int
		for _, num := range m.CardIds {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintQuery(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MatchId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MatchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellOfferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellOfferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellOfferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOfferId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SellOfferId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellOfferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellOfferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellOfferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOffer != nil {
		{
			size, err := m.SellOffer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCouncilRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCouncilRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCouncilRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CouncilId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CouncilId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCouncilResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCouncilResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCouncilResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Council != nil {
		{
			size, err := m.Council.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryServerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncounterId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EncounterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Encounter != nil {
		{
			size, err := m.Encounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncountersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncountersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncountersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEncountersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncountersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncountersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Encounters) > 0 {
		for iNdEx := len(m.Encounters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Encounters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncounterWithImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncounterWithImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncounterWithImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEncounterWithImageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncounterWithImageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncounterWithImageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Encounter != nil {
		{
			size, err := m.Encounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncountersWithImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncountersWithImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncountersWithImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEncountersWithImageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncountersWithImageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncountersWithImageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Encounters) > 0 {
		for iNdEx := len(m.Encounters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Encounters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCardchainInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCardchainInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCardchainInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCardchainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCardchainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCardchainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCardModified != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastCardModified))
		i--
		dAtA[i] = 0x38
	}
	if m.CouncilsNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CouncilsNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.SellOffersNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SellOffersNumber))
		i--
		dAtA[i] = 0x28
	}
	if m.MatchesNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MatchesNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.CardsNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CardsNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ActiveSets) > 0 {
		dAtA25 := make([]byte, len(m.ActiveSets)*10)
		var j24 int
		for _, num := range m.ActiveSets {
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintQuery(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.CardAuctionPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySetRarityDistributionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySetRarityDistributionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySetRarityDistributionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SetId) > 0 {
		i -= len(m.SetId)
		copy(dAtA[i:], m.SetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySetRarityDistributionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySetRarityDistributionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySetRarityDistributionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wanted) > 0 {
		dAtA28 := make([]byte, len(m.Wanted)*10)
		var j27 int
		for _, num := range m.Wanted {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintQuery(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Current) > 0 {
		dAtA30 := make([]byte, len(m.Current)*10)
		var j29 int
		for _, num := range m.Current {
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		i -= j29
		copy(dAtA[i:], dAtA30[:j29])
		i = encodeVarintQuery(dAtA, i, uint64(j29))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountFromZealyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountFromZealyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountFromZealyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZealyId) > 0 {
		i -= len(m.ZealyId)
		copy(dAtA[i:], m.ZealyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ZealyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountFromZealyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountFromZealyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountFromZealyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotingResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotingResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotingResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVotingResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotingResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotingResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastVotingResults != nil {
		{
			size, err := m.LastVotingResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProductDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetProductDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProductDetails.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProductDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProductDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductDetails) > 0 {
		for _, e := range m.ProductDetails {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != 0 {
		n += 1 + sovQuery(uint64(m.CardId))
	}
	return n
}

func (m *QueryCardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Card != nil {
		l = m.Card.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.CardType) > 0 {
		l = 0
		for _, e := range m.CardType {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.Class) > 0 {
		l = 0
		for _, e := range m.Class {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	l = len(m.SortBy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.KeywordsContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NotesContains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OnlyStarterCard {
		n += 2
	}
	if m.OnlyBalanceAnchors {
		n += 2
	}
	if len(m.Rarities) > 0 {
		l = 0
		for _, e := range m.Rarities {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.MultiClassOnly {
		n += 2
	}
	return n
}

func (m *QueryCardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CardIds) > 0 {
		l = 0
		for _, e := range m.CardIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryMatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatchId != 0 {
		n += 1 + sovQuery(uint64(m.MatchId))
	}
	return n
}

func (m *QueryMatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetId != 0 {
		n += 1 + sovQuery(uint64(m.SetId))
	}
	return n
}

func (m *QuerySetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySellOfferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOfferId != 0 {
		n += 1 + sovQuery(uint64(m.SellOfferId))
	}
	return n
}

func (m *QuerySellOfferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOffer != nil {
		l = m.SellOffer.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCouncilRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CouncilId != 0 {
		n += 1 + sovQuery(uint64(m.CouncilId))
	}
	return n
}

func (m *QueryCouncilResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Council != nil {
		l = m.Council.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovQuery(uint64(m.ServerId))
	}
	return n
}

func (m *QueryServerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncounterId != 0 {
		n += 1 + sovQuery(uint64(m.EncounterId))
	}
	return n
}

func (m *QueryEncounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Encounter != nil {
		l = m.Encounter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncountersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEncountersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Encounters) > 0 {
		for _, e := range m.Encounters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEncounterWithImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEncounterWithImageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Encounter != nil {
		l = m.Encounter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncountersWithImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEncountersWithImageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Encounters) > 0 {
		for _, e := range m.Encounters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCardchainInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCardchainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CardAuctionPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.ActiveSets) > 0 {
		l = 0
		for _, e := range m.ActiveSets {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.CardsNumber != 0 {
		n += 1 + sovQuery(uint64(m.CardsNumber))
	}
	if m.MatchesNumber != 0 {
		n += 1 + sovQuery(uint64(m.MatchesNumber))
	}
	if m.SellOffersNumber != 0 {
		n += 1 + sovQuery(uint64(m.SellOffersNumber))
	}
	if m.CouncilsNumber != 0 {
		n += 1 + sovQuery(uint64(m.CouncilsNumber))
	}
	if m.LastCardModified != 0 {
		n += 1 + sovQuery(uint64(m.LastCardModified))
	}
	return n
}

func (m *QuerySetRarityDistributionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySetRarityDistributionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Current) > 0 {
		l = 0
		for _, e := range m.Current {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.Wanted) > 0 {
		l = 0
		for _, e := range m.Wanted {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryAccountFromZealyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZealyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountFromZealyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVotingResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVotingResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastVotingResults != nil {
		l = m.LastVotingResults.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProductDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProductDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProductDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProductDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProductDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProductDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProductDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProductDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProductDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProductDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProductDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProductDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProductDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductDetails = append(m.ProductDetails, ProductDetails{})
			if err := m.ProductDetails[len(m.ProductDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Card == nil {
				m.Card = &CardWithImage{}
			}
			if err := m.Card.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v CardStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CardStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]CardStatus, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CardStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CardStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		case 3:
			if wireType == 0 {
				var v CardType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CardType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardType = append(m.CardType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.CardType) == 0 {
					m.CardType = make([]CardType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CardType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CardType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardType = append(m.CardType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
		case 4:
			if wireType == 0 {
				var v CardClass
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CardClass(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Class = append(m.Class, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Class) == 0 {
					m.Class = make([]CardClass, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CardClass
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CardClass(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Class = append(m.Class, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeywordsContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeywordsContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotesContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotesContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyStarterCard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyStarterCard = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyBalanceAnchors", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyBalanceAnchors = bool(v != 0)
		case 11:
			if wireType == 0 {
				var v CardRarity
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CardRarity(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rarities = append(m.Rarities, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Rarities) == 0 {
					m.Rarities = make([]CardRarity, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CardRarity
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CardRarity(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rarities = append(m.Rarities, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarities", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiClassOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultiClassOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardIds = append(m.CardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardIds) == 0 {
					m.CardIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardIds = append(m.CardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &Match{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &SetWithArtwork{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellOfferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellOfferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellOfferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOfferId", wireType)
			}
			m.SellOfferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOfferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellOfferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellOfferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellOfferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SellOffer == nil {
				m.SellOffer = &SellOffer{}
			}
			if err := m.SellOffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCouncilRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCouncilRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCouncilRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouncilId", wireType)
			}
			m.CouncilId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouncilId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCouncilResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCouncilResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCouncilResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Council", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Council == nil {
				m.Council = &Council{}
			}
			if err := m.Council.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &Server{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncounterId", wireType)
			}
			m.EncounterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncounterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Encounter == nil {
				m.Encounter = &Encounter{}
			}
			if err := m.Encounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncountersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncountersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncountersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncountersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncountersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncountersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encounters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encounters = append(m.Encounters, &Encounter{})
			if err := m.Encounters[len(m.Encounters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncounterWithImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncounterWithImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncounterWithImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncounterWithImageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncounterWithImageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncounterWithImageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Encounter == nil {
				m.Encounter = &EncounterWithImage{}
			}
			if err := m.Encounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncountersWithImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncountersWithImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncountersWithImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncountersWithImageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncountersWithImageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncountersWithImageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encounters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encounters = append(m.Encounters, &EncounterWithImage{})
			if err := m.Encounters[len(m.Encounters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCardchainInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCardchainInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCardchainInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCardchainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCardchainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCardchainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardAuctionPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CardAuctionPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveSets = append(m.ActiveSets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveSets) == 0 {
					m.ActiveSets = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveSets = append(m.ActiveSets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSets", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsNumber", wireType)
			}
			m.CardsNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardsNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchesNumber", wireType)
			}
			m.MatchesNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchesNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOffersNumber", wireType)
			}
			m.SellOffersNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOffersNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouncilsNumber", wireType)
			}
			m.CouncilsNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouncilsNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCardModified", wireType)
			}
			m.LastCardModified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCardModified |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySetRarityDistributionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySetRarityDistributionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySetRarityDistributionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySetRarityDistributionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySetRarityDistributionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySetRarityDistributionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Current = append(m.Current, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Current) == 0 {
					m.Current = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Current = append(m.Current, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Wanted = append(m.Wanted, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Wanted) == 0 {
					m.Wanted = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Wanted = append(m.Wanted, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Wanted", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountFromZealyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountFromZealyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountFromZealyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZealyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZealyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountFromZealyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountFromZealyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountFromZealyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotingResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotingResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotingResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotingResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotingResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotingResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastVotingResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastVotingResults == nil {
				m.LastVotingResults = &VotingResults{}
			}
			if err := m.LastVotingResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
