// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cardchain/council.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Response int32

const (
	Response_Yes Response = 0
	Response_No  Response = 1
)

var Response_name = map[int32]string{
	0: "Yes",
	1: "No",
}

var Response_value = map[string]int32{
	"Yes": 0,
	"No":  1,
}

func (x Response) String() string {
	return proto.EnumName(Response_name, int32(x))
}

func (Response) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c85d7820f234e, []int{0}
}

type CouncelingStatus int32

const (
	CouncelingStatus_councilOpen   CouncelingStatus = 0
	CouncelingStatus_councilClosed CouncelingStatus = 1
	CouncelingStatus_commited      CouncelingStatus = 2
	CouncelingStatus_revealed      CouncelingStatus = 3
)

var CouncelingStatus_name = map[int32]string{
	0: "councilOpen",
	1: "councilClosed",
	2: "commited",
	3: "revealed",
}

var CouncelingStatus_value = map[string]int32{
	"councilOpen":   0,
	"councilClosed": 1,
	"commited":      2,
	"revealed":      3,
}

func (x CouncelingStatus) String() string {
	return proto.EnumName(CouncelingStatus_name, int32(x))
}

func (CouncelingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7c85d7820f234e, []int{1}
}

type Council struct {
	CardId         uint64                                  `protobuf:"varint,1,opt,name=cardId,proto3" json:"cardId,omitempty"`
	Voters         string                                  `protobuf:"bytes,2,opt,name=voters,proto3" json:"voters,omitempty"`
	HashResponses  []string                                `protobuf:"bytes,3,rep,name=hashResponses,proto3" json:"hashResponses,omitempty"`
	ClearResponses []Response                              `protobuf:"varint,4,rep,packed,name=clearResponses,proto3,enum=DecentralCardGame.cardchain.cardchain.Response" json:"clearResponses,omitempty"`
	Treasury       github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=treasury,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"treasury"`
	Status         CouncelingStatus                        `protobuf:"varint,6,opt,name=status,proto3,enum=DecentralCardGame.cardchain.cardchain.CouncelingStatus" json:"status,omitempty"`
}

func (m *Council) Reset()         { *m = Council{} }
func (m *Council) String() string { return proto.CompactTextString(m) }
func (*Council) ProtoMessage()    {}
func (*Council) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7c85d7820f234e, []int{0}
}
func (m *Council) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Council) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Council.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Council) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Council.Merge(m, src)
}
func (m *Council) XXX_Size() int {
	return m.Size()
}
func (m *Council) XXX_DiscardUnknown() {
	xxx_messageInfo_Council.DiscardUnknown(m)
}

var xxx_messageInfo_Council proto.InternalMessageInfo

func (m *Council) GetCardId() uint64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *Council) GetVoters() string {
	if m != nil {
		return m.Voters
	}
	return ""
}

func (m *Council) GetHashResponses() []string {
	if m != nil {
		return m.HashResponses
	}
	return nil
}

func (m *Council) GetClearResponses() []Response {
	if m != nil {
		return m.ClearResponses
	}
	return nil
}

func (m *Council) GetStatus() CouncelingStatus {
	if m != nil {
		return m.Status
	}
	return CouncelingStatus_councilOpen
}

func init() {
	proto.RegisterEnum("DecentralCardGame.cardchain.cardchain.Response", Response_name, Response_value)
	proto.RegisterEnum("DecentralCardGame.cardchain.cardchain.CouncelingStatus", CouncelingStatus_name, CouncelingStatus_value)
	proto.RegisterType((*Council)(nil), "DecentralCardGame.cardchain.cardchain.Council")
}

func init() { proto.RegisterFile("cardchain/council.proto", fileDescriptor_7e7c85d7820f234e) }

var fileDescriptor_7e7c85d7820f234e = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x8b, 0xd3, 0x40,
	0x18, 0xcd, 0x24, 0x6b, 0xb6, 0x3b, 0xba, 0x35, 0x0e, 0xa2, 0x41, 0x21, 0x1b, 0x44, 0x31, 0x2c,
	0x98, 0x81, 0xf5, 0xa0, 0xe7, 0x8d, 0x20, 0x22, 0xb8, 0x30, 0x1e, 0x44, 0x6f, 0xd3, 0xc9, 0x47,
	0x12, 0x4c, 0x32, 0x61, 0x66, 0x52, 0xec, 0xbf, 0xf0, 0x67, 0xf5, 0xd8, 0x93, 0x88, 0x87, 0x22,
	0xed, 0x1f, 0x91, 0xa4, 0x69, 0xab, 0xf5, 0xd2, 0x53, 0xbe, 0xef, 0xe3, 0xbd, 0xc7, 0xcb, 0x9b,
	0x87, 0x1f, 0x0a, 0xae, 0x52, 0x91, 0xf3, 0xa2, 0xa6, 0x42, 0xb6, 0xb5, 0x28, 0xca, 0xb8, 0x51,
	0xd2, 0x48, 0xf2, 0xec, 0x0d, 0x08, 0xa8, 0x8d, 0xe2, 0x65, 0xc2, 0x55, 0xfa, 0x96, 0x57, 0x10,
	0xef, 0xa0, 0xfb, 0xe9, 0xd1, 0xfd, 0x4c, 0x66, 0xb2, 0x67, 0xd0, 0x6e, 0xda, 0x90, 0x9f, 0xfc,
	0xb0, 0xf1, 0x69, 0xb2, 0x91, 0x23, 0x0f, 0xb0, 0xdb, 0xc1, 0xdf, 0xa5, 0x3e, 0x0a, 0x51, 0x74,
	0xc2, 0x86, 0xad, 0xbb, 0x4f, 0xa5, 0x01, 0xa5, 0x7d, 0x3b, 0x44, 0xd1, 0x19, 0x1b, 0x36, 0xf2,
	0x14, 0x9f, 0xe7, 0x5c, 0xe7, 0x0c, 0x74, 0x23, 0x6b, 0x0d, 0xda, 0x77, 0x42, 0x27, 0x3a, 0x63,
	0xff, 0x1e, 0xc9, 0x27, 0x3c, 0x16, 0x25, 0x70, 0xb5, 0x87, 0x9d, 0x84, 0x4e, 0x34, 0xbe, 0xa2,
	0xf1, 0x51, 0xbe, 0xe3, 0x2d, 0x8f, 0x1d, 0xc8, 0x90, 0xf7, 0x78, 0x64, 0x14, 0x70, 0xdd, 0xaa,
	0x99, 0x7f, 0xab, 0x33, 0x76, 0x4d, 0xe7, 0xcb, 0x0b, 0xeb, 0xd7, 0xf2, 0xe2, 0x79, 0x56, 0x98,
	0xbc, 0x9d, 0xc4, 0x42, 0x56, 0x54, 0x48, 0x5d, 0x49, 0x3d, 0x7c, 0x5e, 0xe8, 0xf4, 0x2b, 0x35,
	0xb3, 0x06, 0x74, 0x9c, 0xc8, 0xa2, 0x66, 0x3b, 0x01, 0x72, 0x83, 0x5d, 0x6d, 0xb8, 0x69, 0xb5,
	0xef, 0x86, 0x28, 0x1a, 0x5f, 0xbd, 0x3a, 0xd2, 0x5d, 0x9f, 0x1d, 0x94, 0x45, 0x9d, 0x7d, 0xec,
	0xe9, 0x6c, 0x90, 0xb9, 0x7c, 0x8c, 0x47, 0x5b, 0xab, 0xe4, 0x14, 0x3b, 0x9f, 0x41, 0x7b, 0x16,
	0x71, 0xb1, 0xfd, 0x41, 0x7a, 0xe8, 0x92, 0x61, 0xef, 0x90, 0x48, 0xee, 0xe2, 0xdb, 0xc3, 0xbb,
	0xde, 0x34, 0x50, 0x7b, 0x16, 0xb9, 0x87, 0xcf, 0x87, 0x43, 0x52, 0x4a, 0x0d, 0xa9, 0x87, 0xc8,
	0x1d, 0x3c, 0x12, 0xb2, 0xaa, 0x0a, 0x03, 0xa9, 0x67, 0x77, 0x9b, 0x82, 0x29, 0xf0, 0x12, 0x52,
	0xcf, 0xb9, 0x66, 0xf3, 0x55, 0x80, 0x16, 0xab, 0x00, 0xfd, 0x5e, 0x05, 0xe8, 0xfb, 0x3a, 0xb0,
	0x16, 0xeb, 0xc0, 0xfa, 0xb9, 0x0e, 0xac, 0x2f, 0xaf, 0xff, 0x8a, 0xe3, 0xbf, 0xbf, 0xa2, 0xc9,
	0xae, 0x56, 0xdf, 0xe8, 0xbe, 0x62, 0x7d, 0x48, 0x13, 0xb7, 0x2f, 0xc9, 0xcb, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xd1, 0x49, 0xf6, 0xb3, 0x7c, 0x02, 0x00, 0x00,
}

func (m *Council) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Council) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Council) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintCouncil(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Treasury.Size()
		i -= size
		if _, err := m.Treasury.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCouncil(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ClearResponses) > 0 {
		dAtA2 := make([]byte, len(m.ClearResponses)*10)
		var j1 int
		for _, num := range m.ClearResponses {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCouncil(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HashResponses) > 0 {
		for iNdEx := len(m.HashResponses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HashResponses[iNdEx])
			copy(dAtA[i:], m.HashResponses[iNdEx])
			i = encodeVarintCouncil(dAtA, i, uint64(len(m.HashResponses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Voters) > 0 {
		i -= len(m.Voters)
		copy(dAtA[i:], m.Voters)
		i = encodeVarintCouncil(dAtA, i, uint64(len(m.Voters)))
		i--
		dAtA[i] = 0x12
	}
	if m.CardId != 0 {
		i = encodeVarintCouncil(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCouncil(dAtA []byte, offset int, v uint64) int {
	offset -= sovCouncil(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Council) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != 0 {
		n += 1 + sovCouncil(uint64(m.CardId))
	}
	l = len(m.Voters)
	if l > 0 {
		n += 1 + l + sovCouncil(uint64(l))
	}
	if len(m.HashResponses) > 0 {
		for _, s := range m.HashResponses {
			l = len(s)
			n += 1 + l + sovCouncil(uint64(l))
		}
	}
	if len(m.ClearResponses) > 0 {
		l = 0
		for _, e := range m.ClearResponses {
			l += sovCouncil(uint64(e))
		}
		n += 1 + sovCouncil(uint64(l)) + l
	}
	l = m.Treasury.Size()
	n += 1 + l + sovCouncil(uint64(l))
	if m.Status != 0 {
		n += 1 + sovCouncil(uint64(m.Status))
	}
	return n
}

func sovCouncil(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCouncil(x uint64) (n int) {
	return sovCouncil(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Council) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCouncil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Council: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Council: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCouncil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCouncil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCouncil
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCouncil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashResponses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCouncil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCouncil
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCouncil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashResponses = append(m.HashResponses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v Response
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCouncil
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Response(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ClearResponses = append(m.ClearResponses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCouncil
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCouncil
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCouncil
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ClearResponses) == 0 {
					m.ClearResponses = make([]Response, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Response
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCouncil
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Response(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ClearResponses = append(m.ClearResponses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearResponses", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treasury", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCouncil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCouncil
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCouncil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Treasury.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCouncil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CouncelingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCouncil(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCouncil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCouncil(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCouncil
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCouncil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCouncil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCouncil
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCouncil
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCouncil
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCouncil        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCouncil          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCouncil = fmt.Errorf("proto: unexpected end of group")
)
