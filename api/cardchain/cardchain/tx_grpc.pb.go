// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cardchain/cardchain/tx.proto

package cardchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName          = "/cardchain.cardchain.Msg/UpdateParams"
	Msg_UserCreate_FullMethodName            = "/cardchain.cardchain.Msg/UserCreate"
	Msg_CardSchemeBuy_FullMethodName         = "/cardchain.cardchain.Msg/CardSchemeBuy"
	Msg_CardSaveContent_FullMethodName       = "/cardchain.cardchain.Msg/CardSaveContent"
	Msg_CardVote_FullMethodName              = "/cardchain.cardchain.Msg/CardVote"
	Msg_CardTransfer_FullMethodName          = "/cardchain.cardchain.Msg/CardTransfer"
	Msg_CardDonate_FullMethodName            = "/cardchain.cardchain.Msg/CardDonate"
	Msg_CardArtworkAdd_FullMethodName        = "/cardchain.cardchain.Msg/CardArtworkAdd"
	Msg_CardArtistChange_FullMethodName      = "/cardchain.cardchain.Msg/CardArtistChange"
	Msg_CouncilRegister_FullMethodName       = "/cardchain.cardchain.Msg/CouncilRegister"
	Msg_CouncilDeregister_FullMethodName     = "/cardchain.cardchain.Msg/CouncilDeregister"
	Msg_MatchReport_FullMethodName           = "/cardchain.cardchain.Msg/MatchReport"
	Msg_CouncilCreate_FullMethodName         = "/cardchain.cardchain.Msg/CouncilCreate"
	Msg_MatchReporterAppoint_FullMethodName  = "/cardchain.cardchain.Msg/MatchReporterAppoint"
	Msg_SetCreate_FullMethodName             = "/cardchain.cardchain.Msg/SetCreate"
	Msg_SetCardAdd_FullMethodName            = "/cardchain.cardchain.Msg/SetCardAdd"
	Msg_SetCardRemove_FullMethodName         = "/cardchain.cardchain.Msg/SetCardRemove"
	Msg_SetContributorAdd_FullMethodName     = "/cardchain.cardchain.Msg/SetContributorAdd"
	Msg_SetContributorRemove_FullMethodName  = "/cardchain.cardchain.Msg/SetContributorRemove"
	Msg_SetFinalize_FullMethodName           = "/cardchain.cardchain.Msg/SetFinalize"
	Msg_SetArtworkAdd_FullMethodName         = "/cardchain.cardchain.Msg/SetArtworkAdd"
	Msg_SetStoryAdd_FullMethodName           = "/cardchain.cardchain.Msg/SetStoryAdd"
	Msg_BoosterPackBuy_FullMethodName        = "/cardchain.cardchain.Msg/BoosterPackBuy"
	Msg_SellOfferCreate_FullMethodName       = "/cardchain.cardchain.Msg/SellOfferCreate"
	Msg_SellOfferBuy_FullMethodName          = "/cardchain.cardchain.Msg/SellOfferBuy"
	Msg_SellOfferRemove_FullMethodName       = "/cardchain.cardchain.Msg/SellOfferRemove"
	Msg_CardRaritySet_FullMethodName         = "/cardchain.cardchain.Msg/CardRaritySet"
	Msg_CouncilResponseCommit_FullMethodName = "/cardchain.cardchain.Msg/CouncilResponseCommit"
	Msg_CouncilResponseReveal_FullMethodName = "/cardchain.cardchain.Msg/CouncilResponseReveal"
	Msg_CouncilRestart_FullMethodName        = "/cardchain.cardchain.Msg/CouncilRestart"
	Msg_MatchConfirm_FullMethodName          = "/cardchain.cardchain.Msg/MatchConfirm"
	Msg_ProfileCardSet_FullMethodName        = "/cardchain.cardchain.Msg/ProfileCardSet"
	Msg_ProfileWebsiteSet_FullMethodName     = "/cardchain.cardchain.Msg/ProfileWebsiteSet"
	Msg_ProfileBioSet_FullMethodName         = "/cardchain.cardchain.Msg/ProfileBioSet"
	Msg_BoosterPackOpen_FullMethodName       = "/cardchain.cardchain.Msg/BoosterPackOpen"
	Msg_BoosterPackTransfer_FullMethodName   = "/cardchain.cardchain.Msg/BoosterPackTransfer"
	Msg_SetStoryWriterSet_FullMethodName     = "/cardchain.cardchain.Msg/SetStoryWriterSet"
	Msg_SetArtistSet_FullMethodName          = "/cardchain.cardchain.Msg/SetArtistSet"
	Msg_CardVoteMulti_FullMethodName         = "/cardchain.cardchain.Msg/CardVoteMulti"
	Msg_MatchOpen_FullMethodName             = "/cardchain.cardchain.Msg/MatchOpen"
	Msg_SetNameSet_FullMethodName            = "/cardchain.cardchain.Msg/SetNameSet"
	Msg_ProfileAliasSet_FullMethodName       = "/cardchain.cardchain.Msg/ProfileAliasSet"
	Msg_EarlyAccessInvite_FullMethodName     = "/cardchain.cardchain.Msg/EarlyAccessInvite"
	Msg_ZealyConnect_FullMethodName          = "/cardchain.cardchain.Msg/ZealyConnect"
	Msg_EncounterCreate_FullMethodName       = "/cardchain.cardchain.Msg/EncounterCreate"
	Msg_EncounterDo_FullMethodName           = "/cardchain.cardchain.Msg/EncounterDo"
	Msg_EncounterClose_FullMethodName        = "/cardchain.cardchain.Msg/EncounterClose"
	Msg_CreateProductDetails_FullMethodName  = "/cardchain.cardchain.Msg/CreateProductDetails"
	Msg_UpdateProductDetails_FullMethodName  = "/cardchain.cardchain.Msg/UpdateProductDetails"
	Msg_DeleteProductDetails_FullMethodName  = "/cardchain.cardchain.Msg/DeleteProductDetails"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UserCreate(ctx context.Context, in *MsgUserCreate, opts ...grpc.CallOption) (*MsgUserCreateResponse, error)
	CardSchemeBuy(ctx context.Context, in *MsgCardSchemeBuy, opts ...grpc.CallOption) (*MsgCardSchemeBuyResponse, error)
	CardSaveContent(ctx context.Context, in *MsgCardSaveContent, opts ...grpc.CallOption) (*MsgCardSaveContentResponse, error)
	CardVote(ctx context.Context, in *MsgCardVote, opts ...grpc.CallOption) (*MsgCardVoteResponse, error)
	CardTransfer(ctx context.Context, in *MsgCardTransfer, opts ...grpc.CallOption) (*MsgCardTransferResponse, error)
	CardDonate(ctx context.Context, in *MsgCardDonate, opts ...grpc.CallOption) (*MsgCardDonateResponse, error)
	CardArtworkAdd(ctx context.Context, in *MsgCardArtworkAdd, opts ...grpc.CallOption) (*MsgCardArtworkAddResponse, error)
	CardArtistChange(ctx context.Context, in *MsgCardArtistChange, opts ...grpc.CallOption) (*MsgCardArtistChangeResponse, error)
	CouncilRegister(ctx context.Context, in *MsgCouncilRegister, opts ...grpc.CallOption) (*MsgCouncilRegisterResponse, error)
	CouncilDeregister(ctx context.Context, in *MsgCouncilDeregister, opts ...grpc.CallOption) (*MsgCouncilDeregisterResponse, error)
	MatchReport(ctx context.Context, in *MsgMatchReport, opts ...grpc.CallOption) (*MsgMatchReportResponse, error)
	CouncilCreate(ctx context.Context, in *MsgCouncilCreate, opts ...grpc.CallOption) (*MsgCouncilCreateResponse, error)
	MatchReporterAppoint(ctx context.Context, in *MsgMatchReporterAppoint, opts ...grpc.CallOption) (*MsgMatchReporterAppointResponse, error)
	SetCreate(ctx context.Context, in *MsgSetCreate, opts ...grpc.CallOption) (*MsgSetCreateResponse, error)
	SetCardAdd(ctx context.Context, in *MsgSetCardAdd, opts ...grpc.CallOption) (*MsgSetCardAddResponse, error)
	SetCardRemove(ctx context.Context, in *MsgSetCardRemove, opts ...grpc.CallOption) (*MsgSetCardRemoveResponse, error)
	SetContributorAdd(ctx context.Context, in *MsgSetContributorAdd, opts ...grpc.CallOption) (*MsgSetContributorAddResponse, error)
	SetContributorRemove(ctx context.Context, in *MsgSetContributorRemove, opts ...grpc.CallOption) (*MsgSetContributorRemoveResponse, error)
	SetFinalize(ctx context.Context, in *MsgSetFinalize, opts ...grpc.CallOption) (*MsgSetFinalizeResponse, error)
	SetArtworkAdd(ctx context.Context, in *MsgSetArtworkAdd, opts ...grpc.CallOption) (*MsgSetArtworkAddResponse, error)
	SetStoryAdd(ctx context.Context, in *MsgSetStoryAdd, opts ...grpc.CallOption) (*MsgSetStoryAddResponse, error)
	BoosterPackBuy(ctx context.Context, in *MsgBoosterPackBuy, opts ...grpc.CallOption) (*MsgBoosterPackBuyResponse, error)
	SellOfferCreate(ctx context.Context, in *MsgSellOfferCreate, opts ...grpc.CallOption) (*MsgSellOfferCreateResponse, error)
	SellOfferBuy(ctx context.Context, in *MsgSellOfferBuy, opts ...grpc.CallOption) (*MsgSellOfferBuyResponse, error)
	SellOfferRemove(ctx context.Context, in *MsgSellOfferRemove, opts ...grpc.CallOption) (*MsgSellOfferRemoveResponse, error)
	CardRaritySet(ctx context.Context, in *MsgCardRaritySet, opts ...grpc.CallOption) (*MsgCardRaritySetResponse, error)
	CouncilResponseCommit(ctx context.Context, in *MsgCouncilResponseCommit, opts ...grpc.CallOption) (*MsgCouncilResponseCommitResponse, error)
	CouncilResponseReveal(ctx context.Context, in *MsgCouncilResponseReveal, opts ...grpc.CallOption) (*MsgCouncilResponseRevealResponse, error)
	CouncilRestart(ctx context.Context, in *MsgCouncilRestart, opts ...grpc.CallOption) (*MsgCouncilRestartResponse, error)
	MatchConfirm(ctx context.Context, in *MsgMatchConfirm, opts ...grpc.CallOption) (*MsgMatchConfirmResponse, error)
	ProfileCardSet(ctx context.Context, in *MsgProfileCardSet, opts ...grpc.CallOption) (*MsgProfileCardSetResponse, error)
	ProfileWebsiteSet(ctx context.Context, in *MsgProfileWebsiteSet, opts ...grpc.CallOption) (*MsgProfileWebsiteSetResponse, error)
	ProfileBioSet(ctx context.Context, in *MsgProfileBioSet, opts ...grpc.CallOption) (*MsgProfileBioSetResponse, error)
	BoosterPackOpen(ctx context.Context, in *MsgBoosterPackOpen, opts ...grpc.CallOption) (*MsgBoosterPackOpenResponse, error)
	BoosterPackTransfer(ctx context.Context, in *MsgBoosterPackTransfer, opts ...grpc.CallOption) (*MsgBoosterPackTransferResponse, error)
	SetStoryWriterSet(ctx context.Context, in *MsgSetStoryWriterSet, opts ...grpc.CallOption) (*MsgSetStoryWriterSetResponse, error)
	SetArtistSet(ctx context.Context, in *MsgSetArtistSet, opts ...grpc.CallOption) (*MsgSetArtistSetResponse, error)
	CardVoteMulti(ctx context.Context, in *MsgCardVoteMulti, opts ...grpc.CallOption) (*MsgCardVoteMultiResponse, error)
	MatchOpen(ctx context.Context, in *MsgMatchOpen, opts ...grpc.CallOption) (*MsgMatchOpenResponse, error)
	SetNameSet(ctx context.Context, in *MsgSetNameSet, opts ...grpc.CallOption) (*MsgSetNameSetResponse, error)
	ProfileAliasSet(ctx context.Context, in *MsgProfileAliasSet, opts ...grpc.CallOption) (*MsgProfileAliasSetResponse, error)
	EarlyAccessInvite(ctx context.Context, in *MsgEarlyAccessInvite, opts ...grpc.CallOption) (*MsgEarlyAccessInviteResponse, error)
	ZealyConnect(ctx context.Context, in *MsgZealyConnect, opts ...grpc.CallOption) (*MsgZealyConnectResponse, error)
	EncounterCreate(ctx context.Context, in *MsgEncounterCreate, opts ...grpc.CallOption) (*MsgEncounterCreateResponse, error)
	EncounterDo(ctx context.Context, in *MsgEncounterDo, opts ...grpc.CallOption) (*MsgEncounterDoResponse, error)
	EncounterClose(ctx context.Context, in *MsgEncounterClose, opts ...grpc.CallOption) (*MsgEncounterCloseResponse, error)
	CreateProductDetails(ctx context.Context, in *MsgCreateProductDetails, opts ...grpc.CallOption) (*MsgCreateProductDetailsResponse, error)
	UpdateProductDetails(ctx context.Context, in *MsgUpdateProductDetails, opts ...grpc.CallOption) (*MsgUpdateProductDetailsResponse, error)
	DeleteProductDetails(ctx context.Context, in *MsgDeleteProductDetails, opts ...grpc.CallOption) (*MsgDeleteProductDetailsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UserCreate(ctx context.Context, in *MsgUserCreate, opts ...grpc.CallOption) (*MsgUserCreateResponse, error) {
	out := new(MsgUserCreateResponse)
	err := c.cc.Invoke(ctx, Msg_UserCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardSchemeBuy(ctx context.Context, in *MsgCardSchemeBuy, opts ...grpc.CallOption) (*MsgCardSchemeBuyResponse, error) {
	out := new(MsgCardSchemeBuyResponse)
	err := c.cc.Invoke(ctx, Msg_CardSchemeBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardSaveContent(ctx context.Context, in *MsgCardSaveContent, opts ...grpc.CallOption) (*MsgCardSaveContentResponse, error) {
	out := new(MsgCardSaveContentResponse)
	err := c.cc.Invoke(ctx, Msg_CardSaveContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardVote(ctx context.Context, in *MsgCardVote, opts ...grpc.CallOption) (*MsgCardVoteResponse, error) {
	out := new(MsgCardVoteResponse)
	err := c.cc.Invoke(ctx, Msg_CardVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardTransfer(ctx context.Context, in *MsgCardTransfer, opts ...grpc.CallOption) (*MsgCardTransferResponse, error) {
	out := new(MsgCardTransferResponse)
	err := c.cc.Invoke(ctx, Msg_CardTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardDonate(ctx context.Context, in *MsgCardDonate, opts ...grpc.CallOption) (*MsgCardDonateResponse, error) {
	out := new(MsgCardDonateResponse)
	err := c.cc.Invoke(ctx, Msg_CardDonate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardArtworkAdd(ctx context.Context, in *MsgCardArtworkAdd, opts ...grpc.CallOption) (*MsgCardArtworkAddResponse, error) {
	out := new(MsgCardArtworkAddResponse)
	err := c.cc.Invoke(ctx, Msg_CardArtworkAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardArtistChange(ctx context.Context, in *MsgCardArtistChange, opts ...grpc.CallOption) (*MsgCardArtistChangeResponse, error) {
	out := new(MsgCardArtistChangeResponse)
	err := c.cc.Invoke(ctx, Msg_CardArtistChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CouncilRegister(ctx context.Context, in *MsgCouncilRegister, opts ...grpc.CallOption) (*MsgCouncilRegisterResponse, error) {
	out := new(MsgCouncilRegisterResponse)
	err := c.cc.Invoke(ctx, Msg_CouncilRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CouncilDeregister(ctx context.Context, in *MsgCouncilDeregister, opts ...grpc.CallOption) (*MsgCouncilDeregisterResponse, error) {
	out := new(MsgCouncilDeregisterResponse)
	err := c.cc.Invoke(ctx, Msg_CouncilDeregister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MatchReport(ctx context.Context, in *MsgMatchReport, opts ...grpc.CallOption) (*MsgMatchReportResponse, error) {
	out := new(MsgMatchReportResponse)
	err := c.cc.Invoke(ctx, Msg_MatchReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CouncilCreate(ctx context.Context, in *MsgCouncilCreate, opts ...grpc.CallOption) (*MsgCouncilCreateResponse, error) {
	out := new(MsgCouncilCreateResponse)
	err := c.cc.Invoke(ctx, Msg_CouncilCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MatchReporterAppoint(ctx context.Context, in *MsgMatchReporterAppoint, opts ...grpc.CallOption) (*MsgMatchReporterAppointResponse, error) {
	out := new(MsgMatchReporterAppointResponse)
	err := c.cc.Invoke(ctx, Msg_MatchReporterAppoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetCreate(ctx context.Context, in *MsgSetCreate, opts ...grpc.CallOption) (*MsgSetCreateResponse, error) {
	out := new(MsgSetCreateResponse)
	err := c.cc.Invoke(ctx, Msg_SetCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetCardAdd(ctx context.Context, in *MsgSetCardAdd, opts ...grpc.CallOption) (*MsgSetCardAddResponse, error) {
	out := new(MsgSetCardAddResponse)
	err := c.cc.Invoke(ctx, Msg_SetCardAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetCardRemove(ctx context.Context, in *MsgSetCardRemove, opts ...grpc.CallOption) (*MsgSetCardRemoveResponse, error) {
	out := new(MsgSetCardRemoveResponse)
	err := c.cc.Invoke(ctx, Msg_SetCardRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetContributorAdd(ctx context.Context, in *MsgSetContributorAdd, opts ...grpc.CallOption) (*MsgSetContributorAddResponse, error) {
	out := new(MsgSetContributorAddResponse)
	err := c.cc.Invoke(ctx, Msg_SetContributorAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetContributorRemove(ctx context.Context, in *MsgSetContributorRemove, opts ...grpc.CallOption) (*MsgSetContributorRemoveResponse, error) {
	out := new(MsgSetContributorRemoveResponse)
	err := c.cc.Invoke(ctx, Msg_SetContributorRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetFinalize(ctx context.Context, in *MsgSetFinalize, opts ...grpc.CallOption) (*MsgSetFinalizeResponse, error) {
	out := new(MsgSetFinalizeResponse)
	err := c.cc.Invoke(ctx, Msg_SetFinalize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetArtworkAdd(ctx context.Context, in *MsgSetArtworkAdd, opts ...grpc.CallOption) (*MsgSetArtworkAddResponse, error) {
	out := new(MsgSetArtworkAddResponse)
	err := c.cc.Invoke(ctx, Msg_SetArtworkAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetStoryAdd(ctx context.Context, in *MsgSetStoryAdd, opts ...grpc.CallOption) (*MsgSetStoryAddResponse, error) {
	out := new(MsgSetStoryAddResponse)
	err := c.cc.Invoke(ctx, Msg_SetStoryAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BoosterPackBuy(ctx context.Context, in *MsgBoosterPackBuy, opts ...grpc.CallOption) (*MsgBoosterPackBuyResponse, error) {
	out := new(MsgBoosterPackBuyResponse)
	err := c.cc.Invoke(ctx, Msg_BoosterPackBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellOfferCreate(ctx context.Context, in *MsgSellOfferCreate, opts ...grpc.CallOption) (*MsgSellOfferCreateResponse, error) {
	out := new(MsgSellOfferCreateResponse)
	err := c.cc.Invoke(ctx, Msg_SellOfferCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellOfferBuy(ctx context.Context, in *MsgSellOfferBuy, opts ...grpc.CallOption) (*MsgSellOfferBuyResponse, error) {
	out := new(MsgSellOfferBuyResponse)
	err := c.cc.Invoke(ctx, Msg_SellOfferBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellOfferRemove(ctx context.Context, in *MsgSellOfferRemove, opts ...grpc.CallOption) (*MsgSellOfferRemoveResponse, error) {
	out := new(MsgSellOfferRemoveResponse)
	err := c.cc.Invoke(ctx, Msg_SellOfferRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardRaritySet(ctx context.Context, in *MsgCardRaritySet, opts ...grpc.CallOption) (*MsgCardRaritySetResponse, error) {
	out := new(MsgCardRaritySetResponse)
	err := c.cc.Invoke(ctx, Msg_CardRaritySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CouncilResponseCommit(ctx context.Context, in *MsgCouncilResponseCommit, opts ...grpc.CallOption) (*MsgCouncilResponseCommitResponse, error) {
	out := new(MsgCouncilResponseCommitResponse)
	err := c.cc.Invoke(ctx, Msg_CouncilResponseCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CouncilResponseReveal(ctx context.Context, in *MsgCouncilResponseReveal, opts ...grpc.CallOption) (*MsgCouncilResponseRevealResponse, error) {
	out := new(MsgCouncilResponseRevealResponse)
	err := c.cc.Invoke(ctx, Msg_CouncilResponseReveal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CouncilRestart(ctx context.Context, in *MsgCouncilRestart, opts ...grpc.CallOption) (*MsgCouncilRestartResponse, error) {
	out := new(MsgCouncilRestartResponse)
	err := c.cc.Invoke(ctx, Msg_CouncilRestart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MatchConfirm(ctx context.Context, in *MsgMatchConfirm, opts ...grpc.CallOption) (*MsgMatchConfirmResponse, error) {
	out := new(MsgMatchConfirmResponse)
	err := c.cc.Invoke(ctx, Msg_MatchConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProfileCardSet(ctx context.Context, in *MsgProfileCardSet, opts ...grpc.CallOption) (*MsgProfileCardSetResponse, error) {
	out := new(MsgProfileCardSetResponse)
	err := c.cc.Invoke(ctx, Msg_ProfileCardSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProfileWebsiteSet(ctx context.Context, in *MsgProfileWebsiteSet, opts ...grpc.CallOption) (*MsgProfileWebsiteSetResponse, error) {
	out := new(MsgProfileWebsiteSetResponse)
	err := c.cc.Invoke(ctx, Msg_ProfileWebsiteSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProfileBioSet(ctx context.Context, in *MsgProfileBioSet, opts ...grpc.CallOption) (*MsgProfileBioSetResponse, error) {
	out := new(MsgProfileBioSetResponse)
	err := c.cc.Invoke(ctx, Msg_ProfileBioSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BoosterPackOpen(ctx context.Context, in *MsgBoosterPackOpen, opts ...grpc.CallOption) (*MsgBoosterPackOpenResponse, error) {
	out := new(MsgBoosterPackOpenResponse)
	err := c.cc.Invoke(ctx, Msg_BoosterPackOpen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BoosterPackTransfer(ctx context.Context, in *MsgBoosterPackTransfer, opts ...grpc.CallOption) (*MsgBoosterPackTransferResponse, error) {
	out := new(MsgBoosterPackTransferResponse)
	err := c.cc.Invoke(ctx, Msg_BoosterPackTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetStoryWriterSet(ctx context.Context, in *MsgSetStoryWriterSet, opts ...grpc.CallOption) (*MsgSetStoryWriterSetResponse, error) {
	out := new(MsgSetStoryWriterSetResponse)
	err := c.cc.Invoke(ctx, Msg_SetStoryWriterSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetArtistSet(ctx context.Context, in *MsgSetArtistSet, opts ...grpc.CallOption) (*MsgSetArtistSetResponse, error) {
	out := new(MsgSetArtistSetResponse)
	err := c.cc.Invoke(ctx, Msg_SetArtistSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardVoteMulti(ctx context.Context, in *MsgCardVoteMulti, opts ...grpc.CallOption) (*MsgCardVoteMultiResponse, error) {
	out := new(MsgCardVoteMultiResponse)
	err := c.cc.Invoke(ctx, Msg_CardVoteMulti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MatchOpen(ctx context.Context, in *MsgMatchOpen, opts ...grpc.CallOption) (*MsgMatchOpenResponse, error) {
	out := new(MsgMatchOpenResponse)
	err := c.cc.Invoke(ctx, Msg_MatchOpen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetNameSet(ctx context.Context, in *MsgSetNameSet, opts ...grpc.CallOption) (*MsgSetNameSetResponse, error) {
	out := new(MsgSetNameSetResponse)
	err := c.cc.Invoke(ctx, Msg_SetNameSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProfileAliasSet(ctx context.Context, in *MsgProfileAliasSet, opts ...grpc.CallOption) (*MsgProfileAliasSetResponse, error) {
	out := new(MsgProfileAliasSetResponse)
	err := c.cc.Invoke(ctx, Msg_ProfileAliasSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EarlyAccessInvite(ctx context.Context, in *MsgEarlyAccessInvite, opts ...grpc.CallOption) (*MsgEarlyAccessInviteResponse, error) {
	out := new(MsgEarlyAccessInviteResponse)
	err := c.cc.Invoke(ctx, Msg_EarlyAccessInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ZealyConnect(ctx context.Context, in *MsgZealyConnect, opts ...grpc.CallOption) (*MsgZealyConnectResponse, error) {
	out := new(MsgZealyConnectResponse)
	err := c.cc.Invoke(ctx, Msg_ZealyConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EncounterCreate(ctx context.Context, in *MsgEncounterCreate, opts ...grpc.CallOption) (*MsgEncounterCreateResponse, error) {
	out := new(MsgEncounterCreateResponse)
	err := c.cc.Invoke(ctx, Msg_EncounterCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EncounterDo(ctx context.Context, in *MsgEncounterDo, opts ...grpc.CallOption) (*MsgEncounterDoResponse, error) {
	out := new(MsgEncounterDoResponse)
	err := c.cc.Invoke(ctx, Msg_EncounterDo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EncounterClose(ctx context.Context, in *MsgEncounterClose, opts ...grpc.CallOption) (*MsgEncounterCloseResponse, error) {
	out := new(MsgEncounterCloseResponse)
	err := c.cc.Invoke(ctx, Msg_EncounterClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateProductDetails(ctx context.Context, in *MsgCreateProductDetails, opts ...grpc.CallOption) (*MsgCreateProductDetailsResponse, error) {
	out := new(MsgCreateProductDetailsResponse)
	err := c.cc.Invoke(ctx, Msg_CreateProductDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateProductDetails(ctx context.Context, in *MsgUpdateProductDetails, opts ...grpc.CallOption) (*MsgUpdateProductDetailsResponse, error) {
	out := new(MsgUpdateProductDetailsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateProductDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteProductDetails(ctx context.Context, in *MsgDeleteProductDetails, opts ...grpc.CallOption) (*MsgDeleteProductDetailsResponse, error) {
	out := new(MsgDeleteProductDetailsResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteProductDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	UserCreate(context.Context, *MsgUserCreate) (*MsgUserCreateResponse, error)
	CardSchemeBuy(context.Context, *MsgCardSchemeBuy) (*MsgCardSchemeBuyResponse, error)
	CardSaveContent(context.Context, *MsgCardSaveContent) (*MsgCardSaveContentResponse, error)
	CardVote(context.Context, *MsgCardVote) (*MsgCardVoteResponse, error)
	CardTransfer(context.Context, *MsgCardTransfer) (*MsgCardTransferResponse, error)
	CardDonate(context.Context, *MsgCardDonate) (*MsgCardDonateResponse, error)
	CardArtworkAdd(context.Context, *MsgCardArtworkAdd) (*MsgCardArtworkAddResponse, error)
	CardArtistChange(context.Context, *MsgCardArtistChange) (*MsgCardArtistChangeResponse, error)
	CouncilRegister(context.Context, *MsgCouncilRegister) (*MsgCouncilRegisterResponse, error)
	CouncilDeregister(context.Context, *MsgCouncilDeregister) (*MsgCouncilDeregisterResponse, error)
	MatchReport(context.Context, *MsgMatchReport) (*MsgMatchReportResponse, error)
	CouncilCreate(context.Context, *MsgCouncilCreate) (*MsgCouncilCreateResponse, error)
	MatchReporterAppoint(context.Context, *MsgMatchReporterAppoint) (*MsgMatchReporterAppointResponse, error)
	SetCreate(context.Context, *MsgSetCreate) (*MsgSetCreateResponse, error)
	SetCardAdd(context.Context, *MsgSetCardAdd) (*MsgSetCardAddResponse, error)
	SetCardRemove(context.Context, *MsgSetCardRemove) (*MsgSetCardRemoveResponse, error)
	SetContributorAdd(context.Context, *MsgSetContributorAdd) (*MsgSetContributorAddResponse, error)
	SetContributorRemove(context.Context, *MsgSetContributorRemove) (*MsgSetContributorRemoveResponse, error)
	SetFinalize(context.Context, *MsgSetFinalize) (*MsgSetFinalizeResponse, error)
	SetArtworkAdd(context.Context, *MsgSetArtworkAdd) (*MsgSetArtworkAddResponse, error)
	SetStoryAdd(context.Context, *MsgSetStoryAdd) (*MsgSetStoryAddResponse, error)
	BoosterPackBuy(context.Context, *MsgBoosterPackBuy) (*MsgBoosterPackBuyResponse, error)
	SellOfferCreate(context.Context, *MsgSellOfferCreate) (*MsgSellOfferCreateResponse, error)
	SellOfferBuy(context.Context, *MsgSellOfferBuy) (*MsgSellOfferBuyResponse, error)
	SellOfferRemove(context.Context, *MsgSellOfferRemove) (*MsgSellOfferRemoveResponse, error)
	CardRaritySet(context.Context, *MsgCardRaritySet) (*MsgCardRaritySetResponse, error)
	CouncilResponseCommit(context.Context, *MsgCouncilResponseCommit) (*MsgCouncilResponseCommitResponse, error)
	CouncilResponseReveal(context.Context, *MsgCouncilResponseReveal) (*MsgCouncilResponseRevealResponse, error)
	CouncilRestart(context.Context, *MsgCouncilRestart) (*MsgCouncilRestartResponse, error)
	MatchConfirm(context.Context, *MsgMatchConfirm) (*MsgMatchConfirmResponse, error)
	ProfileCardSet(context.Context, *MsgProfileCardSet) (*MsgProfileCardSetResponse, error)
	ProfileWebsiteSet(context.Context, *MsgProfileWebsiteSet) (*MsgProfileWebsiteSetResponse, error)
	ProfileBioSet(context.Context, *MsgProfileBioSet) (*MsgProfileBioSetResponse, error)
	BoosterPackOpen(context.Context, *MsgBoosterPackOpen) (*MsgBoosterPackOpenResponse, error)
	BoosterPackTransfer(context.Context, *MsgBoosterPackTransfer) (*MsgBoosterPackTransferResponse, error)
	SetStoryWriterSet(context.Context, *MsgSetStoryWriterSet) (*MsgSetStoryWriterSetResponse, error)
	SetArtistSet(context.Context, *MsgSetArtistSet) (*MsgSetArtistSetResponse, error)
	CardVoteMulti(context.Context, *MsgCardVoteMulti) (*MsgCardVoteMultiResponse, error)
	MatchOpen(context.Context, *MsgMatchOpen) (*MsgMatchOpenResponse, error)
	SetNameSet(context.Context, *MsgSetNameSet) (*MsgSetNameSetResponse, error)
	ProfileAliasSet(context.Context, *MsgProfileAliasSet) (*MsgProfileAliasSetResponse, error)
	EarlyAccessInvite(context.Context, *MsgEarlyAccessInvite) (*MsgEarlyAccessInviteResponse, error)
	ZealyConnect(context.Context, *MsgZealyConnect) (*MsgZealyConnectResponse, error)
	EncounterCreate(context.Context, *MsgEncounterCreate) (*MsgEncounterCreateResponse, error)
	EncounterDo(context.Context, *MsgEncounterDo) (*MsgEncounterDoResponse, error)
	EncounterClose(context.Context, *MsgEncounterClose) (*MsgEncounterCloseResponse, error)
	CreateProductDetails(context.Context, *MsgCreateProductDetails) (*MsgCreateProductDetailsResponse, error)
	UpdateProductDetails(context.Context, *MsgUpdateProductDetails) (*MsgUpdateProductDetailsResponse, error)
	DeleteProductDetails(context.Context, *MsgDeleteProductDetails) (*MsgDeleteProductDetailsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) UserCreate(context.Context, *MsgUserCreate) (*MsgUserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedMsgServer) CardSchemeBuy(context.Context, *MsgCardSchemeBuy) (*MsgCardSchemeBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardSchemeBuy not implemented")
}
func (UnimplementedMsgServer) CardSaveContent(context.Context, *MsgCardSaveContent) (*MsgCardSaveContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardSaveContent not implemented")
}
func (UnimplementedMsgServer) CardVote(context.Context, *MsgCardVote) (*MsgCardVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardVote not implemented")
}
func (UnimplementedMsgServer) CardTransfer(context.Context, *MsgCardTransfer) (*MsgCardTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardTransfer not implemented")
}
func (UnimplementedMsgServer) CardDonate(context.Context, *MsgCardDonate) (*MsgCardDonateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardDonate not implemented")
}
func (UnimplementedMsgServer) CardArtworkAdd(context.Context, *MsgCardArtworkAdd) (*MsgCardArtworkAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardArtworkAdd not implemented")
}
func (UnimplementedMsgServer) CardArtistChange(context.Context, *MsgCardArtistChange) (*MsgCardArtistChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardArtistChange not implemented")
}
func (UnimplementedMsgServer) CouncilRegister(context.Context, *MsgCouncilRegister) (*MsgCouncilRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilRegister not implemented")
}
func (UnimplementedMsgServer) CouncilDeregister(context.Context, *MsgCouncilDeregister) (*MsgCouncilDeregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilDeregister not implemented")
}
func (UnimplementedMsgServer) MatchReport(context.Context, *MsgMatchReport) (*MsgMatchReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchReport not implemented")
}
func (UnimplementedMsgServer) CouncilCreate(context.Context, *MsgCouncilCreate) (*MsgCouncilCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilCreate not implemented")
}
func (UnimplementedMsgServer) MatchReporterAppoint(context.Context, *MsgMatchReporterAppoint) (*MsgMatchReporterAppointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchReporterAppoint not implemented")
}
func (UnimplementedMsgServer) SetCreate(context.Context, *MsgSetCreate) (*MsgSetCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCreate not implemented")
}
func (UnimplementedMsgServer) SetCardAdd(context.Context, *MsgSetCardAdd) (*MsgSetCardAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCardAdd not implemented")
}
func (UnimplementedMsgServer) SetCardRemove(context.Context, *MsgSetCardRemove) (*MsgSetCardRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCardRemove not implemented")
}
func (UnimplementedMsgServer) SetContributorAdd(context.Context, *MsgSetContributorAdd) (*MsgSetContributorAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContributorAdd not implemented")
}
func (UnimplementedMsgServer) SetContributorRemove(context.Context, *MsgSetContributorRemove) (*MsgSetContributorRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContributorRemove not implemented")
}
func (UnimplementedMsgServer) SetFinalize(context.Context, *MsgSetFinalize) (*MsgSetFinalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFinalize not implemented")
}
func (UnimplementedMsgServer) SetArtworkAdd(context.Context, *MsgSetArtworkAdd) (*MsgSetArtworkAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArtworkAdd not implemented")
}
func (UnimplementedMsgServer) SetStoryAdd(context.Context, *MsgSetStoryAdd) (*MsgSetStoryAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStoryAdd not implemented")
}
func (UnimplementedMsgServer) BoosterPackBuy(context.Context, *MsgBoosterPackBuy) (*MsgBoosterPackBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoosterPackBuy not implemented")
}
func (UnimplementedMsgServer) SellOfferCreate(context.Context, *MsgSellOfferCreate) (*MsgSellOfferCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOfferCreate not implemented")
}
func (UnimplementedMsgServer) SellOfferBuy(context.Context, *MsgSellOfferBuy) (*MsgSellOfferBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOfferBuy not implemented")
}
func (UnimplementedMsgServer) SellOfferRemove(context.Context, *MsgSellOfferRemove) (*MsgSellOfferRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOfferRemove not implemented")
}
func (UnimplementedMsgServer) CardRaritySet(context.Context, *MsgCardRaritySet) (*MsgCardRaritySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardRaritySet not implemented")
}
func (UnimplementedMsgServer) CouncilResponseCommit(context.Context, *MsgCouncilResponseCommit) (*MsgCouncilResponseCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilResponseCommit not implemented")
}
func (UnimplementedMsgServer) CouncilResponseReveal(context.Context, *MsgCouncilResponseReveal) (*MsgCouncilResponseRevealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilResponseReveal not implemented")
}
func (UnimplementedMsgServer) CouncilRestart(context.Context, *MsgCouncilRestart) (*MsgCouncilRestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilRestart not implemented")
}
func (UnimplementedMsgServer) MatchConfirm(context.Context, *MsgMatchConfirm) (*MsgMatchConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchConfirm not implemented")
}
func (UnimplementedMsgServer) ProfileCardSet(context.Context, *MsgProfileCardSet) (*MsgProfileCardSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileCardSet not implemented")
}
func (UnimplementedMsgServer) ProfileWebsiteSet(context.Context, *MsgProfileWebsiteSet) (*MsgProfileWebsiteSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileWebsiteSet not implemented")
}
func (UnimplementedMsgServer) ProfileBioSet(context.Context, *MsgProfileBioSet) (*MsgProfileBioSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileBioSet not implemented")
}
func (UnimplementedMsgServer) BoosterPackOpen(context.Context, *MsgBoosterPackOpen) (*MsgBoosterPackOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoosterPackOpen not implemented")
}
func (UnimplementedMsgServer) BoosterPackTransfer(context.Context, *MsgBoosterPackTransfer) (*MsgBoosterPackTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoosterPackTransfer not implemented")
}
func (UnimplementedMsgServer) SetStoryWriterSet(context.Context, *MsgSetStoryWriterSet) (*MsgSetStoryWriterSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStoryWriterSet not implemented")
}
func (UnimplementedMsgServer) SetArtistSet(context.Context, *MsgSetArtistSet) (*MsgSetArtistSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArtistSet not implemented")
}
func (UnimplementedMsgServer) CardVoteMulti(context.Context, *MsgCardVoteMulti) (*MsgCardVoteMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardVoteMulti not implemented")
}
func (UnimplementedMsgServer) MatchOpen(context.Context, *MsgMatchOpen) (*MsgMatchOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchOpen not implemented")
}
func (UnimplementedMsgServer) SetNameSet(context.Context, *MsgSetNameSet) (*MsgSetNameSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNameSet not implemented")
}
func (UnimplementedMsgServer) ProfileAliasSet(context.Context, *MsgProfileAliasSet) (*MsgProfileAliasSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileAliasSet not implemented")
}
func (UnimplementedMsgServer) EarlyAccessInvite(context.Context, *MsgEarlyAccessInvite) (*MsgEarlyAccessInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarlyAccessInvite not implemented")
}
func (UnimplementedMsgServer) ZealyConnect(context.Context, *MsgZealyConnect) (*MsgZealyConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZealyConnect not implemented")
}
func (UnimplementedMsgServer) EncounterCreate(context.Context, *MsgEncounterCreate) (*MsgEncounterCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncounterCreate not implemented")
}
func (UnimplementedMsgServer) EncounterDo(context.Context, *MsgEncounterDo) (*MsgEncounterDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncounterDo not implemented")
}
func (UnimplementedMsgServer) EncounterClose(context.Context, *MsgEncounterClose) (*MsgEncounterCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncounterClose not implemented")
}
func (UnimplementedMsgServer) CreateProductDetails(context.Context, *MsgCreateProductDetails) (*MsgCreateProductDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductDetails not implemented")
}
func (UnimplementedMsgServer) UpdateProductDetails(context.Context, *MsgUpdateProductDetails) (*MsgUpdateProductDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductDetails not implemented")
}
func (UnimplementedMsgServer) DeleteProductDetails(context.Context, *MsgDeleteProductDetails) (*MsgDeleteProductDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductDetails not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUserCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UserCreate(ctx, req.(*MsgUserCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardSchemeBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardSchemeBuy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardSchemeBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardSchemeBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardSchemeBuy(ctx, req.(*MsgCardSchemeBuy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardSaveContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardSaveContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardSaveContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardSaveContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardSaveContent(ctx, req.(*MsgCardSaveContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardVote(ctx, req.(*MsgCardVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardTransfer(ctx, req.(*MsgCardTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardDonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardDonate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardDonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardDonate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardDonate(ctx, req.(*MsgCardDonate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardArtworkAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardArtworkAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardArtworkAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardArtworkAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardArtworkAdd(ctx, req.(*MsgCardArtworkAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardArtistChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardArtistChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardArtistChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardArtistChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardArtistChange(ctx, req.(*MsgCardArtistChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CouncilRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCouncilRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CouncilRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CouncilRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CouncilRegister(ctx, req.(*MsgCouncilRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CouncilDeregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCouncilDeregister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CouncilDeregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CouncilDeregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CouncilDeregister(ctx, req.(*MsgCouncilDeregister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MatchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMatchReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MatchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MatchReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MatchReport(ctx, req.(*MsgMatchReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CouncilCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCouncilCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CouncilCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CouncilCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CouncilCreate(ctx, req.(*MsgCouncilCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MatchReporterAppoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMatchReporterAppoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MatchReporterAppoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MatchReporterAppoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MatchReporterAppoint(ctx, req.(*MsgMatchReporterAppoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetCreate(ctx, req.(*MsgSetCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetCardAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetCardAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetCardAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetCardAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetCardAdd(ctx, req.(*MsgSetCardAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetCardRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetCardRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetCardRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetCardRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetCardRemove(ctx, req.(*MsgSetCardRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetContributorAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetContributorAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetContributorAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetContributorAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetContributorAdd(ctx, req.(*MsgSetContributorAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetContributorRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetContributorRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetContributorRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetContributorRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetContributorRemove(ctx, req.(*MsgSetContributorRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetFinalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetFinalize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetFinalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetFinalize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetFinalize(ctx, req.(*MsgSetFinalize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetArtworkAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetArtworkAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetArtworkAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetArtworkAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetArtworkAdd(ctx, req.(*MsgSetArtworkAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetStoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetStoryAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetStoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetStoryAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetStoryAdd(ctx, req.(*MsgSetStoryAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BoosterPackBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBoosterPackBuy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BoosterPackBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BoosterPackBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BoosterPackBuy(ctx, req.(*MsgBoosterPackBuy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellOfferCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellOfferCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellOfferCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SellOfferCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellOfferCreate(ctx, req.(*MsgSellOfferCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellOfferBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellOfferBuy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellOfferBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SellOfferBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellOfferBuy(ctx, req.(*MsgSellOfferBuy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellOfferRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellOfferRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellOfferRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SellOfferRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellOfferRemove(ctx, req.(*MsgSellOfferRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardRaritySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardRaritySet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardRaritySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardRaritySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardRaritySet(ctx, req.(*MsgCardRaritySet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CouncilResponseCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCouncilResponseCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CouncilResponseCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CouncilResponseCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CouncilResponseCommit(ctx, req.(*MsgCouncilResponseCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CouncilResponseReveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCouncilResponseReveal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CouncilResponseReveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CouncilResponseReveal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CouncilResponseReveal(ctx, req.(*MsgCouncilResponseReveal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CouncilRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCouncilRestart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CouncilRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CouncilRestart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CouncilRestart(ctx, req.(*MsgCouncilRestart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MatchConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMatchConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MatchConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MatchConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MatchConfirm(ctx, req.(*MsgMatchConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProfileCardSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProfileCardSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProfileCardSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProfileCardSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProfileCardSet(ctx, req.(*MsgProfileCardSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProfileWebsiteSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProfileWebsiteSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProfileWebsiteSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProfileWebsiteSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProfileWebsiteSet(ctx, req.(*MsgProfileWebsiteSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProfileBioSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProfileBioSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProfileBioSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProfileBioSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProfileBioSet(ctx, req.(*MsgProfileBioSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BoosterPackOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBoosterPackOpen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BoosterPackOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BoosterPackOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BoosterPackOpen(ctx, req.(*MsgBoosterPackOpen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BoosterPackTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBoosterPackTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BoosterPackTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BoosterPackTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BoosterPackTransfer(ctx, req.(*MsgBoosterPackTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetStoryWriterSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetStoryWriterSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetStoryWriterSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetStoryWriterSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetStoryWriterSet(ctx, req.(*MsgSetStoryWriterSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetArtistSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetArtistSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetArtistSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetArtistSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetArtistSet(ctx, req.(*MsgSetArtistSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardVoteMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardVoteMulti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardVoteMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardVoteMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardVoteMulti(ctx, req.(*MsgCardVoteMulti))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MatchOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMatchOpen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MatchOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MatchOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MatchOpen(ctx, req.(*MsgMatchOpen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetNameSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetNameSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetNameSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetNameSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetNameSet(ctx, req.(*MsgSetNameSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProfileAliasSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProfileAliasSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProfileAliasSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProfileAliasSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProfileAliasSet(ctx, req.(*MsgProfileAliasSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EarlyAccessInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEarlyAccessInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EarlyAccessInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_EarlyAccessInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EarlyAccessInvite(ctx, req.(*MsgEarlyAccessInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ZealyConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgZealyConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ZealyConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ZealyConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ZealyConnect(ctx, req.(*MsgZealyConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EncounterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEncounterCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EncounterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_EncounterCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EncounterCreate(ctx, req.(*MsgEncounterCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EncounterDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEncounterDo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EncounterDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_EncounterDo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EncounterDo(ctx, req.(*MsgEncounterDo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EncounterClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEncounterClose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EncounterClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_EncounterClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EncounterClose(ctx, req.(*MsgEncounterClose))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProductDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateProductDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProductDetails(ctx, req.(*MsgCreateProductDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateProductDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateProductDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateProductDetails(ctx, req.(*MsgUpdateProductDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteProductDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteProductDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteProductDetails(ctx, req.(*MsgDeleteProductDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cardchain.cardchain.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _Msg_UserCreate_Handler,
		},
		{
			MethodName: "CardSchemeBuy",
			Handler:    _Msg_CardSchemeBuy_Handler,
		},
		{
			MethodName: "CardSaveContent",
			Handler:    _Msg_CardSaveContent_Handler,
		},
		{
			MethodName: "CardVote",
			Handler:    _Msg_CardVote_Handler,
		},
		{
			MethodName: "CardTransfer",
			Handler:    _Msg_CardTransfer_Handler,
		},
		{
			MethodName: "CardDonate",
			Handler:    _Msg_CardDonate_Handler,
		},
		{
			MethodName: "CardArtworkAdd",
			Handler:    _Msg_CardArtworkAdd_Handler,
		},
		{
			MethodName: "CardArtistChange",
			Handler:    _Msg_CardArtistChange_Handler,
		},
		{
			MethodName: "CouncilRegister",
			Handler:    _Msg_CouncilRegister_Handler,
		},
		{
			MethodName: "CouncilDeregister",
			Handler:    _Msg_CouncilDeregister_Handler,
		},
		{
			MethodName: "MatchReport",
			Handler:    _Msg_MatchReport_Handler,
		},
		{
			MethodName: "CouncilCreate",
			Handler:    _Msg_CouncilCreate_Handler,
		},
		{
			MethodName: "MatchReporterAppoint",
			Handler:    _Msg_MatchReporterAppoint_Handler,
		},
		{
			MethodName: "SetCreate",
			Handler:    _Msg_SetCreate_Handler,
		},
		{
			MethodName: "SetCardAdd",
			Handler:    _Msg_SetCardAdd_Handler,
		},
		{
			MethodName: "SetCardRemove",
			Handler:    _Msg_SetCardRemove_Handler,
		},
		{
			MethodName: "SetContributorAdd",
			Handler:    _Msg_SetContributorAdd_Handler,
		},
		{
			MethodName: "SetContributorRemove",
			Handler:    _Msg_SetContributorRemove_Handler,
		},
		{
			MethodName: "SetFinalize",
			Handler:    _Msg_SetFinalize_Handler,
		},
		{
			MethodName: "SetArtworkAdd",
			Handler:    _Msg_SetArtworkAdd_Handler,
		},
		{
			MethodName: "SetStoryAdd",
			Handler:    _Msg_SetStoryAdd_Handler,
		},
		{
			MethodName: "BoosterPackBuy",
			Handler:    _Msg_BoosterPackBuy_Handler,
		},
		{
			MethodName: "SellOfferCreate",
			Handler:    _Msg_SellOfferCreate_Handler,
		},
		{
			MethodName: "SellOfferBuy",
			Handler:    _Msg_SellOfferBuy_Handler,
		},
		{
			MethodName: "SellOfferRemove",
			Handler:    _Msg_SellOfferRemove_Handler,
		},
		{
			MethodName: "CardRaritySet",
			Handler:    _Msg_CardRaritySet_Handler,
		},
		{
			MethodName: "CouncilResponseCommit",
			Handler:    _Msg_CouncilResponseCommit_Handler,
		},
		{
			MethodName: "CouncilResponseReveal",
			Handler:    _Msg_CouncilResponseReveal_Handler,
		},
		{
			MethodName: "CouncilRestart",
			Handler:    _Msg_CouncilRestart_Handler,
		},
		{
			MethodName: "MatchConfirm",
			Handler:    _Msg_MatchConfirm_Handler,
		},
		{
			MethodName: "ProfileCardSet",
			Handler:    _Msg_ProfileCardSet_Handler,
		},
		{
			MethodName: "ProfileWebsiteSet",
			Handler:    _Msg_ProfileWebsiteSet_Handler,
		},
		{
			MethodName: "ProfileBioSet",
			Handler:    _Msg_ProfileBioSet_Handler,
		},
		{
			MethodName: "BoosterPackOpen",
			Handler:    _Msg_BoosterPackOpen_Handler,
		},
		{
			MethodName: "BoosterPackTransfer",
			Handler:    _Msg_BoosterPackTransfer_Handler,
		},
		{
			MethodName: "SetStoryWriterSet",
			Handler:    _Msg_SetStoryWriterSet_Handler,
		},
		{
			MethodName: "SetArtistSet",
			Handler:    _Msg_SetArtistSet_Handler,
		},
		{
			MethodName: "CardVoteMulti",
			Handler:    _Msg_CardVoteMulti_Handler,
		},
		{
			MethodName: "MatchOpen",
			Handler:    _Msg_MatchOpen_Handler,
		},
		{
			MethodName: "SetNameSet",
			Handler:    _Msg_SetNameSet_Handler,
		},
		{
			MethodName: "ProfileAliasSet",
			Handler:    _Msg_ProfileAliasSet_Handler,
		},
		{
			MethodName: "EarlyAccessInvite",
			Handler:    _Msg_EarlyAccessInvite_Handler,
		},
		{
			MethodName: "ZealyConnect",
			Handler:    _Msg_ZealyConnect_Handler,
		},
		{
			MethodName: "EncounterCreate",
			Handler:    _Msg_EncounterCreate_Handler,
		},
		{
			MethodName: "EncounterDo",
			Handler:    _Msg_EncounterDo_Handler,
		},
		{
			MethodName: "EncounterClose",
			Handler:    _Msg_EncounterClose_Handler,
		},
		{
			MethodName: "CreateProductDetails",
			Handler:    _Msg_CreateProductDetails_Handler,
		},
		{
			MethodName: "UpdateProductDetails",
			Handler:    _Msg_UpdateProductDetails_Handler,
		},
		{
			MethodName: "DeleteProductDetails",
			Handler:    _Msg_DeleteProductDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cardchain/cardchain/tx.proto",
}
