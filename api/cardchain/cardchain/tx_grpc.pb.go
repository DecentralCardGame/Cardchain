// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cardchain/cardchain/tx.proto

package cardchain

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName      = "/cardchain.cardchain.Msg/UpdateParams"
	Msg_UserCreate_FullMethodName        = "/cardchain.cardchain.Msg/UserCreate"
	Msg_CardSchemeBuy_FullMethodName     = "/cardchain.cardchain.Msg/CardSchemeBuy"
	Msg_CardSaveContent_FullMethodName   = "/cardchain.cardchain.Msg/CardSaveContent"
	Msg_CardVote_FullMethodName          = "/cardchain.cardchain.Msg/CardVote"
	Msg_CardTransfer_FullMethodName      = "/cardchain.cardchain.Msg/CardTransfer"
	Msg_CardDonate_FullMethodName        = "/cardchain.cardchain.Msg/CardDonate"
	Msg_CardArtworkAdd_FullMethodName    = "/cardchain.cardchain.Msg/CardArtworkAdd"
	Msg_CardArtistChange_FullMethodName  = "/cardchain.cardchain.Msg/CardArtistChange"
	Msg_CouncilRegister_FullMethodName   = "/cardchain.cardchain.Msg/CouncilRegister"
	Msg_CouncilDeregister_FullMethodName = "/cardchain.cardchain.Msg/CouncilDeregister"
	Msg_MatchReport_FullMethodName       = "/cardchain.cardchain.Msg/MatchReport"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UserCreate(ctx context.Context, in *MsgUserCreate, opts ...grpc.CallOption) (*MsgUserCreateResponse, error)
	CardSchemeBuy(ctx context.Context, in *MsgCardSchemeBuy, opts ...grpc.CallOption) (*MsgCardSchemeBuyResponse, error)
	CardSaveContent(ctx context.Context, in *MsgCardSaveContent, opts ...grpc.CallOption) (*MsgCardSaveContentResponse, error)
	CardVote(ctx context.Context, in *MsgCardVote, opts ...grpc.CallOption) (*MsgCardVoteResponse, error)
	CardTransfer(ctx context.Context, in *MsgCardTransfer, opts ...grpc.CallOption) (*MsgCardTransferResponse, error)
	CardDonate(ctx context.Context, in *MsgCardDonate, opts ...grpc.CallOption) (*MsgCardDonateResponse, error)
	CardArtworkAdd(ctx context.Context, in *MsgCardArtworkAdd, opts ...grpc.CallOption) (*MsgCardArtworkAddResponse, error)
	CardArtistChange(ctx context.Context, in *MsgCardArtistChange, opts ...grpc.CallOption) (*MsgCardArtistChangeResponse, error)
	CouncilRegister(ctx context.Context, in *MsgCouncilRegister, opts ...grpc.CallOption) (*MsgCouncilRegisterResponse, error)
	CouncilDeregister(ctx context.Context, in *MsgCouncilDeregister, opts ...grpc.CallOption) (*MsgCouncilDeregisterResponse, error)
	MatchReport(ctx context.Context, in *MsgMatchReport, opts ...grpc.CallOption) (*MsgMatchReportResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UserCreate(ctx context.Context, in *MsgUserCreate, opts ...grpc.CallOption) (*MsgUserCreateResponse, error) {
	out := new(MsgUserCreateResponse)
	err := c.cc.Invoke(ctx, Msg_UserCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardSchemeBuy(ctx context.Context, in *MsgCardSchemeBuy, opts ...grpc.CallOption) (*MsgCardSchemeBuyResponse, error) {
	out := new(MsgCardSchemeBuyResponse)
	err := c.cc.Invoke(ctx, Msg_CardSchemeBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardSaveContent(ctx context.Context, in *MsgCardSaveContent, opts ...grpc.CallOption) (*MsgCardSaveContentResponse, error) {
	out := new(MsgCardSaveContentResponse)
	err := c.cc.Invoke(ctx, Msg_CardSaveContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardVote(ctx context.Context, in *MsgCardVote, opts ...grpc.CallOption) (*MsgCardVoteResponse, error) {
	out := new(MsgCardVoteResponse)
	err := c.cc.Invoke(ctx, Msg_CardVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardTransfer(ctx context.Context, in *MsgCardTransfer, opts ...grpc.CallOption) (*MsgCardTransferResponse, error) {
	out := new(MsgCardTransferResponse)
	err := c.cc.Invoke(ctx, Msg_CardTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardDonate(ctx context.Context, in *MsgCardDonate, opts ...grpc.CallOption) (*MsgCardDonateResponse, error) {
	out := new(MsgCardDonateResponse)
	err := c.cc.Invoke(ctx, Msg_CardDonate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardArtworkAdd(ctx context.Context, in *MsgCardArtworkAdd, opts ...grpc.CallOption) (*MsgCardArtworkAddResponse, error) {
	out := new(MsgCardArtworkAddResponse)
	err := c.cc.Invoke(ctx, Msg_CardArtworkAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CardArtistChange(ctx context.Context, in *MsgCardArtistChange, opts ...grpc.CallOption) (*MsgCardArtistChangeResponse, error) {
	out := new(MsgCardArtistChangeResponse)
	err := c.cc.Invoke(ctx, Msg_CardArtistChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CouncilRegister(ctx context.Context, in *MsgCouncilRegister, opts ...grpc.CallOption) (*MsgCouncilRegisterResponse, error) {
	out := new(MsgCouncilRegisterResponse)
	err := c.cc.Invoke(ctx, Msg_CouncilRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CouncilDeregister(ctx context.Context, in *MsgCouncilDeregister, opts ...grpc.CallOption) (*MsgCouncilDeregisterResponse, error) {
	out := new(MsgCouncilDeregisterResponse)
	err := c.cc.Invoke(ctx, Msg_CouncilDeregister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MatchReport(ctx context.Context, in *MsgMatchReport, opts ...grpc.CallOption) (*MsgMatchReportResponse, error) {
	out := new(MsgMatchReportResponse)
	err := c.cc.Invoke(ctx, Msg_MatchReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	UserCreate(context.Context, *MsgUserCreate) (*MsgUserCreateResponse, error)
	CardSchemeBuy(context.Context, *MsgCardSchemeBuy) (*MsgCardSchemeBuyResponse, error)
	CardSaveContent(context.Context, *MsgCardSaveContent) (*MsgCardSaveContentResponse, error)
	CardVote(context.Context, *MsgCardVote) (*MsgCardVoteResponse, error)
	CardTransfer(context.Context, *MsgCardTransfer) (*MsgCardTransferResponse, error)
	CardDonate(context.Context, *MsgCardDonate) (*MsgCardDonateResponse, error)
	CardArtworkAdd(context.Context, *MsgCardArtworkAdd) (*MsgCardArtworkAddResponse, error)
	CardArtistChange(context.Context, *MsgCardArtistChange) (*MsgCardArtistChangeResponse, error)
	CouncilRegister(context.Context, *MsgCouncilRegister) (*MsgCouncilRegisterResponse, error)
	CouncilDeregister(context.Context, *MsgCouncilDeregister) (*MsgCouncilDeregisterResponse, error)
	MatchReport(context.Context, *MsgMatchReport) (*MsgMatchReportResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) UserCreate(context.Context, *MsgUserCreate) (*MsgUserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedMsgServer) CardSchemeBuy(context.Context, *MsgCardSchemeBuy) (*MsgCardSchemeBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardSchemeBuy not implemented")
}
func (UnimplementedMsgServer) CardSaveContent(context.Context, *MsgCardSaveContent) (*MsgCardSaveContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardSaveContent not implemented")
}
func (UnimplementedMsgServer) CardVote(context.Context, *MsgCardVote) (*MsgCardVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardVote not implemented")
}
func (UnimplementedMsgServer) CardTransfer(context.Context, *MsgCardTransfer) (*MsgCardTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardTransfer not implemented")
}
func (UnimplementedMsgServer) CardDonate(context.Context, *MsgCardDonate) (*MsgCardDonateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardDonate not implemented")
}
func (UnimplementedMsgServer) CardArtworkAdd(context.Context, *MsgCardArtworkAdd) (*MsgCardArtworkAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardArtworkAdd not implemented")
}
func (UnimplementedMsgServer) CardArtistChange(context.Context, *MsgCardArtistChange) (*MsgCardArtistChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardArtistChange not implemented")
}
func (UnimplementedMsgServer) CouncilRegister(context.Context, *MsgCouncilRegister) (*MsgCouncilRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilRegister not implemented")
}
func (UnimplementedMsgServer) CouncilDeregister(context.Context, *MsgCouncilDeregister) (*MsgCouncilDeregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilDeregister not implemented")
}
func (UnimplementedMsgServer) MatchReport(context.Context, *MsgMatchReport) (*MsgMatchReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchReport not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUserCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UserCreate(ctx, req.(*MsgUserCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardSchemeBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardSchemeBuy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardSchemeBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardSchemeBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardSchemeBuy(ctx, req.(*MsgCardSchemeBuy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardSaveContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardSaveContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardSaveContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardSaveContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardSaveContent(ctx, req.(*MsgCardSaveContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardVote(ctx, req.(*MsgCardVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardTransfer(ctx, req.(*MsgCardTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardDonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardDonate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardDonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardDonate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardDonate(ctx, req.(*MsgCardDonate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardArtworkAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardArtworkAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardArtworkAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardArtworkAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardArtworkAdd(ctx, req.(*MsgCardArtworkAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CardArtistChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCardArtistChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CardArtistChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CardArtistChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CardArtistChange(ctx, req.(*MsgCardArtistChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CouncilRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCouncilRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CouncilRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CouncilRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CouncilRegister(ctx, req.(*MsgCouncilRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CouncilDeregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCouncilDeregister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CouncilDeregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CouncilDeregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CouncilDeregister(ctx, req.(*MsgCouncilDeregister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MatchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMatchReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MatchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MatchReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MatchReport(ctx, req.(*MsgMatchReport))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cardchain.cardchain.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _Msg_UserCreate_Handler,
		},
		{
			MethodName: "CardSchemeBuy",
			Handler:    _Msg_CardSchemeBuy_Handler,
		},
		{
			MethodName: "CardSaveContent",
			Handler:    _Msg_CardSaveContent_Handler,
		},
		{
			MethodName: "CardVote",
			Handler:    _Msg_CardVote_Handler,
		},
		{
			MethodName: "CardTransfer",
			Handler:    _Msg_CardTransfer_Handler,
		},
		{
			MethodName: "CardDonate",
			Handler:    _Msg_CardDonate_Handler,
		},
		{
			MethodName: "CardArtworkAdd",
			Handler:    _Msg_CardArtworkAdd_Handler,
		},
		{
			MethodName: "CardArtistChange",
			Handler:    _Msg_CardArtistChange_Handler,
		},
		{
			MethodName: "CouncilRegister",
			Handler:    _Msg_CouncilRegister_Handler,
		},
		{
			MethodName: "CouncilDeregister",
			Handler:    _Msg_CouncilDeregister_Handler,
		},
		{
			MethodName: "MatchReport",
			Handler:    _Msg_MatchReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cardchain/cardchain/tx.proto",
}
