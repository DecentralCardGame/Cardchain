// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package cardchain

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Params                                 protoreflect.MessageDescriptor
	fd_Params_votingRightsExpirationTime      protoreflect.FieldDescriptor
	fd_Params_setSize                         protoreflect.FieldDescriptor
	fd_Params_setPrice                        protoreflect.FieldDescriptor
	fd_Params_activeSetsAmount                protoreflect.FieldDescriptor
	fd_Params_setCreationFee                  protoreflect.FieldDescriptor
	fd_Params_collateralDeposit               protoreflect.FieldDescriptor
	fd_Params_winnerReward                    protoreflect.FieldDescriptor
	fd_Params_hourlyFaucet                    protoreflect.FieldDescriptor
	fd_Params_inflationRate                   protoreflect.FieldDescriptor
	fd_Params_raresPerPack                    protoreflect.FieldDescriptor
	fd_Params_commonsPerPack                  protoreflect.FieldDescriptor
	fd_Params_unCommonsPerPack                protoreflect.FieldDescriptor
	fd_Params_trialPeriod                     protoreflect.FieldDescriptor
	fd_Params_gameVoteRatio                   protoreflect.FieldDescriptor
	fd_Params_cardAuctionPriceReductionPeriod protoreflect.FieldDescriptor
	fd_Params_airDropValue                    protoreflect.FieldDescriptor
	fd_Params_airDropMaxBlockHeight           protoreflect.FieldDescriptor
	fd_Params_trialVoteReward                 protoreflect.FieldDescriptor
	fd_Params_votePoolFraction                protoreflect.FieldDescriptor
	fd_Params_votingRewardCap                 protoreflect.FieldDescriptor
	fd_Params_matchWorkerDelay                protoreflect.FieldDescriptor
	fd_Params_rareDropRatio                   protoreflect.FieldDescriptor
	fd_Params_exceptionalDropRatio            protoreflect.FieldDescriptor
	fd_Params_uniqueDropRatio                 protoreflect.FieldDescriptor
)

func init() {
	file_cardchain_cardchain_params_proto_init()
	md_Params = File_cardchain_cardchain_params_proto.Messages().ByName("Params")
	fd_Params_votingRightsExpirationTime = md_Params.Fields().ByName("votingRightsExpirationTime")
	fd_Params_setSize = md_Params.Fields().ByName("setSize")
	fd_Params_setPrice = md_Params.Fields().ByName("setPrice")
	fd_Params_activeSetsAmount = md_Params.Fields().ByName("activeSetsAmount")
	fd_Params_setCreationFee = md_Params.Fields().ByName("setCreationFee")
	fd_Params_collateralDeposit = md_Params.Fields().ByName("collateralDeposit")
	fd_Params_winnerReward = md_Params.Fields().ByName("winnerReward")
	fd_Params_hourlyFaucet = md_Params.Fields().ByName("hourlyFaucet")
	fd_Params_inflationRate = md_Params.Fields().ByName("inflationRate")
	fd_Params_raresPerPack = md_Params.Fields().ByName("raresPerPack")
	fd_Params_commonsPerPack = md_Params.Fields().ByName("commonsPerPack")
	fd_Params_unCommonsPerPack = md_Params.Fields().ByName("unCommonsPerPack")
	fd_Params_trialPeriod = md_Params.Fields().ByName("trialPeriod")
	fd_Params_gameVoteRatio = md_Params.Fields().ByName("gameVoteRatio")
	fd_Params_cardAuctionPriceReductionPeriod = md_Params.Fields().ByName("cardAuctionPriceReductionPeriod")
	fd_Params_airDropValue = md_Params.Fields().ByName("airDropValue")
	fd_Params_airDropMaxBlockHeight = md_Params.Fields().ByName("airDropMaxBlockHeight")
	fd_Params_trialVoteReward = md_Params.Fields().ByName("trialVoteReward")
	fd_Params_votePoolFraction = md_Params.Fields().ByName("votePoolFraction")
	fd_Params_votingRewardCap = md_Params.Fields().ByName("votingRewardCap")
	fd_Params_matchWorkerDelay = md_Params.Fields().ByName("matchWorkerDelay")
	fd_Params_rareDropRatio = md_Params.Fields().ByName("rareDropRatio")
	fd_Params_exceptionalDropRatio = md_Params.Fields().ByName("exceptionalDropRatio")
	fd_Params_uniqueDropRatio = md_Params.Fields().ByName("uniqueDropRatio")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_cardchain_cardchain_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.VotingRightsExpirationTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.VotingRightsExpirationTime)
		if !f(fd_Params_votingRightsExpirationTime, value) {
			return
		}
	}
	if x.SetSize != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SetSize)
		if !f(fd_Params_setSize, value) {
			return
		}
	}
	if x.SetPrice != nil {
		value := protoreflect.ValueOfMessage(x.SetPrice.ProtoReflect())
		if !f(fd_Params_setPrice, value) {
			return
		}
	}
	if x.ActiveSetsAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ActiveSetsAmount)
		if !f(fd_Params_activeSetsAmount, value) {
			return
		}
	}
	if x.SetCreationFee != nil {
		value := protoreflect.ValueOfMessage(x.SetCreationFee.ProtoReflect())
		if !f(fd_Params_setCreationFee, value) {
			return
		}
	}
	if x.CollateralDeposit != nil {
		value := protoreflect.ValueOfMessage(x.CollateralDeposit.ProtoReflect())
		if !f(fd_Params_collateralDeposit, value) {
			return
		}
	}
	if x.WinnerReward != int64(0) {
		value := protoreflect.ValueOfInt64(x.WinnerReward)
		if !f(fd_Params_winnerReward, value) {
			return
		}
	}
	if x.HourlyFaucet != nil {
		value := protoreflect.ValueOfMessage(x.HourlyFaucet.ProtoReflect())
		if !f(fd_Params_hourlyFaucet, value) {
			return
		}
	}
	if x.InflationRate != "" {
		value := protoreflect.ValueOfString(x.InflationRate)
		if !f(fd_Params_inflationRate, value) {
			return
		}
	}
	if x.RaresPerPack != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RaresPerPack)
		if !f(fd_Params_raresPerPack, value) {
			return
		}
	}
	if x.CommonsPerPack != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CommonsPerPack)
		if !f(fd_Params_commonsPerPack, value) {
			return
		}
	}
	if x.UnCommonsPerPack != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UnCommonsPerPack)
		if !f(fd_Params_unCommonsPerPack, value) {
			return
		}
	}
	if x.TrialPeriod != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TrialPeriod)
		if !f(fd_Params_trialPeriod, value) {
			return
		}
	}
	if x.GameVoteRatio != int64(0) {
		value := protoreflect.ValueOfInt64(x.GameVoteRatio)
		if !f(fd_Params_gameVoteRatio, value) {
			return
		}
	}
	if x.CardAuctionPriceReductionPeriod != int64(0) {
		value := protoreflect.ValueOfInt64(x.CardAuctionPriceReductionPeriod)
		if !f(fd_Params_cardAuctionPriceReductionPeriod, value) {
			return
		}
	}
	if x.AirDropValue != nil {
		value := protoreflect.ValueOfMessage(x.AirDropValue.ProtoReflect())
		if !f(fd_Params_airDropValue, value) {
			return
		}
	}
	if x.AirDropMaxBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.AirDropMaxBlockHeight)
		if !f(fd_Params_airDropMaxBlockHeight, value) {
			return
		}
	}
	if x.TrialVoteReward != nil {
		value := protoreflect.ValueOfMessage(x.TrialVoteReward.ProtoReflect())
		if !f(fd_Params_trialVoteReward, value) {
			return
		}
	}
	if x.VotePoolFraction != int64(0) {
		value := protoreflect.ValueOfInt64(x.VotePoolFraction)
		if !f(fd_Params_votePoolFraction, value) {
			return
		}
	}
	if x.VotingRewardCap != int64(0) {
		value := protoreflect.ValueOfInt64(x.VotingRewardCap)
		if !f(fd_Params_votingRewardCap, value) {
			return
		}
	}
	if x.MatchWorkerDelay != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MatchWorkerDelay)
		if !f(fd_Params_matchWorkerDelay, value) {
			return
		}
	}
	if x.RareDropRatio != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RareDropRatio)
		if !f(fd_Params_rareDropRatio, value) {
			return
		}
	}
	if x.ExceptionalDropRatio != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExceptionalDropRatio)
		if !f(fd_Params_exceptionalDropRatio, value) {
			return
		}
	}
	if x.UniqueDropRatio != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UniqueDropRatio)
		if !f(fd_Params_uniqueDropRatio, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cardchain.cardchain.Params.votingRightsExpirationTime":
		return x.VotingRightsExpirationTime != int64(0)
	case "cardchain.cardchain.Params.setSize":
		return x.SetSize != uint64(0)
	case "cardchain.cardchain.Params.setPrice":
		return x.SetPrice != nil
	case "cardchain.cardchain.Params.activeSetsAmount":
		return x.ActiveSetsAmount != uint64(0)
	case "cardchain.cardchain.Params.setCreationFee":
		return x.SetCreationFee != nil
	case "cardchain.cardchain.Params.collateralDeposit":
		return x.CollateralDeposit != nil
	case "cardchain.cardchain.Params.winnerReward":
		return x.WinnerReward != int64(0)
	case "cardchain.cardchain.Params.hourlyFaucet":
		return x.HourlyFaucet != nil
	case "cardchain.cardchain.Params.inflationRate":
		return x.InflationRate != ""
	case "cardchain.cardchain.Params.raresPerPack":
		return x.RaresPerPack != uint64(0)
	case "cardchain.cardchain.Params.commonsPerPack":
		return x.CommonsPerPack != uint64(0)
	case "cardchain.cardchain.Params.unCommonsPerPack":
		return x.UnCommonsPerPack != uint64(0)
	case "cardchain.cardchain.Params.trialPeriod":
		return x.TrialPeriod != uint64(0)
	case "cardchain.cardchain.Params.gameVoteRatio":
		return x.GameVoteRatio != int64(0)
	case "cardchain.cardchain.Params.cardAuctionPriceReductionPeriod":
		return x.CardAuctionPriceReductionPeriod != int64(0)
	case "cardchain.cardchain.Params.airDropValue":
		return x.AirDropValue != nil
	case "cardchain.cardchain.Params.airDropMaxBlockHeight":
		return x.AirDropMaxBlockHeight != int64(0)
	case "cardchain.cardchain.Params.trialVoteReward":
		return x.TrialVoteReward != nil
	case "cardchain.cardchain.Params.votePoolFraction":
		return x.VotePoolFraction != int64(0)
	case "cardchain.cardchain.Params.votingRewardCap":
		return x.VotingRewardCap != int64(0)
	case "cardchain.cardchain.Params.matchWorkerDelay":
		return x.MatchWorkerDelay != uint64(0)
	case "cardchain.cardchain.Params.rareDropRatio":
		return x.RareDropRatio != uint64(0)
	case "cardchain.cardchain.Params.exceptionalDropRatio":
		return x.ExceptionalDropRatio != uint64(0)
	case "cardchain.cardchain.Params.uniqueDropRatio":
		return x.UniqueDropRatio != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Params"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cardchain.cardchain.Params.votingRightsExpirationTime":
		x.VotingRightsExpirationTime = int64(0)
	case "cardchain.cardchain.Params.setSize":
		x.SetSize = uint64(0)
	case "cardchain.cardchain.Params.setPrice":
		x.SetPrice = nil
	case "cardchain.cardchain.Params.activeSetsAmount":
		x.ActiveSetsAmount = uint64(0)
	case "cardchain.cardchain.Params.setCreationFee":
		x.SetCreationFee = nil
	case "cardchain.cardchain.Params.collateralDeposit":
		x.CollateralDeposit = nil
	case "cardchain.cardchain.Params.winnerReward":
		x.WinnerReward = int64(0)
	case "cardchain.cardchain.Params.hourlyFaucet":
		x.HourlyFaucet = nil
	case "cardchain.cardchain.Params.inflationRate":
		x.InflationRate = ""
	case "cardchain.cardchain.Params.raresPerPack":
		x.RaresPerPack = uint64(0)
	case "cardchain.cardchain.Params.commonsPerPack":
		x.CommonsPerPack = uint64(0)
	case "cardchain.cardchain.Params.unCommonsPerPack":
		x.UnCommonsPerPack = uint64(0)
	case "cardchain.cardchain.Params.trialPeriod":
		x.TrialPeriod = uint64(0)
	case "cardchain.cardchain.Params.gameVoteRatio":
		x.GameVoteRatio = int64(0)
	case "cardchain.cardchain.Params.cardAuctionPriceReductionPeriod":
		x.CardAuctionPriceReductionPeriod = int64(0)
	case "cardchain.cardchain.Params.airDropValue":
		x.AirDropValue = nil
	case "cardchain.cardchain.Params.airDropMaxBlockHeight":
		x.AirDropMaxBlockHeight = int64(0)
	case "cardchain.cardchain.Params.trialVoteReward":
		x.TrialVoteReward = nil
	case "cardchain.cardchain.Params.votePoolFraction":
		x.VotePoolFraction = int64(0)
	case "cardchain.cardchain.Params.votingRewardCap":
		x.VotingRewardCap = int64(0)
	case "cardchain.cardchain.Params.matchWorkerDelay":
		x.MatchWorkerDelay = uint64(0)
	case "cardchain.cardchain.Params.rareDropRatio":
		x.RareDropRatio = uint64(0)
	case "cardchain.cardchain.Params.exceptionalDropRatio":
		x.ExceptionalDropRatio = uint64(0)
	case "cardchain.cardchain.Params.uniqueDropRatio":
		x.UniqueDropRatio = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Params"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cardchain.cardchain.Params.votingRightsExpirationTime":
		value := x.VotingRightsExpirationTime
		return protoreflect.ValueOfInt64(value)
	case "cardchain.cardchain.Params.setSize":
		value := x.SetSize
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.setPrice":
		value := x.SetPrice
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.Params.activeSetsAmount":
		value := x.ActiveSetsAmount
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.setCreationFee":
		value := x.SetCreationFee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.Params.collateralDeposit":
		value := x.CollateralDeposit
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.Params.winnerReward":
		value := x.WinnerReward
		return protoreflect.ValueOfInt64(value)
	case "cardchain.cardchain.Params.hourlyFaucet":
		value := x.HourlyFaucet
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.Params.inflationRate":
		value := x.InflationRate
		return protoreflect.ValueOfString(value)
	case "cardchain.cardchain.Params.raresPerPack":
		value := x.RaresPerPack
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.commonsPerPack":
		value := x.CommonsPerPack
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.unCommonsPerPack":
		value := x.UnCommonsPerPack
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.trialPeriod":
		value := x.TrialPeriod
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.gameVoteRatio":
		value := x.GameVoteRatio
		return protoreflect.ValueOfInt64(value)
	case "cardchain.cardchain.Params.cardAuctionPriceReductionPeriod":
		value := x.CardAuctionPriceReductionPeriod
		return protoreflect.ValueOfInt64(value)
	case "cardchain.cardchain.Params.airDropValue":
		value := x.AirDropValue
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.Params.airDropMaxBlockHeight":
		value := x.AirDropMaxBlockHeight
		return protoreflect.ValueOfInt64(value)
	case "cardchain.cardchain.Params.trialVoteReward":
		value := x.TrialVoteReward
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.Params.votePoolFraction":
		value := x.VotePoolFraction
		return protoreflect.ValueOfInt64(value)
	case "cardchain.cardchain.Params.votingRewardCap":
		value := x.VotingRewardCap
		return protoreflect.ValueOfInt64(value)
	case "cardchain.cardchain.Params.matchWorkerDelay":
		value := x.MatchWorkerDelay
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.rareDropRatio":
		value := x.RareDropRatio
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.exceptionalDropRatio":
		value := x.ExceptionalDropRatio
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Params.uniqueDropRatio":
		value := x.UniqueDropRatio
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Params"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cardchain.cardchain.Params.votingRightsExpirationTime":
		x.VotingRightsExpirationTime = value.Int()
	case "cardchain.cardchain.Params.setSize":
		x.SetSize = value.Uint()
	case "cardchain.cardchain.Params.setPrice":
		x.SetPrice = value.Message().Interface().(*v1beta1.Coin)
	case "cardchain.cardchain.Params.activeSetsAmount":
		x.ActiveSetsAmount = value.Uint()
	case "cardchain.cardchain.Params.setCreationFee":
		x.SetCreationFee = value.Message().Interface().(*v1beta1.Coin)
	case "cardchain.cardchain.Params.collateralDeposit":
		x.CollateralDeposit = value.Message().Interface().(*v1beta1.Coin)
	case "cardchain.cardchain.Params.winnerReward":
		x.WinnerReward = value.Int()
	case "cardchain.cardchain.Params.hourlyFaucet":
		x.HourlyFaucet = value.Message().Interface().(*v1beta1.Coin)
	case "cardchain.cardchain.Params.inflationRate":
		x.InflationRate = value.Interface().(string)
	case "cardchain.cardchain.Params.raresPerPack":
		x.RaresPerPack = value.Uint()
	case "cardchain.cardchain.Params.commonsPerPack":
		x.CommonsPerPack = value.Uint()
	case "cardchain.cardchain.Params.unCommonsPerPack":
		x.UnCommonsPerPack = value.Uint()
	case "cardchain.cardchain.Params.trialPeriod":
		x.TrialPeriod = value.Uint()
	case "cardchain.cardchain.Params.gameVoteRatio":
		x.GameVoteRatio = value.Int()
	case "cardchain.cardchain.Params.cardAuctionPriceReductionPeriod":
		x.CardAuctionPriceReductionPeriod = value.Int()
	case "cardchain.cardchain.Params.airDropValue":
		x.AirDropValue = value.Message().Interface().(*v1beta1.Coin)
	case "cardchain.cardchain.Params.airDropMaxBlockHeight":
		x.AirDropMaxBlockHeight = value.Int()
	case "cardchain.cardchain.Params.trialVoteReward":
		x.TrialVoteReward = value.Message().Interface().(*v1beta1.Coin)
	case "cardchain.cardchain.Params.votePoolFraction":
		x.VotePoolFraction = value.Int()
	case "cardchain.cardchain.Params.votingRewardCap":
		x.VotingRewardCap = value.Int()
	case "cardchain.cardchain.Params.matchWorkerDelay":
		x.MatchWorkerDelay = value.Uint()
	case "cardchain.cardchain.Params.rareDropRatio":
		x.RareDropRatio = value.Uint()
	case "cardchain.cardchain.Params.exceptionalDropRatio":
		x.ExceptionalDropRatio = value.Uint()
	case "cardchain.cardchain.Params.uniqueDropRatio":
		x.UniqueDropRatio = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Params"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.Params.setPrice":
		if x.SetPrice == nil {
			x.SetPrice = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.SetPrice.ProtoReflect())
	case "cardchain.cardchain.Params.setCreationFee":
		if x.SetCreationFee == nil {
			x.SetCreationFee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.SetCreationFee.ProtoReflect())
	case "cardchain.cardchain.Params.collateralDeposit":
		if x.CollateralDeposit == nil {
			x.CollateralDeposit = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.CollateralDeposit.ProtoReflect())
	case "cardchain.cardchain.Params.hourlyFaucet":
		if x.HourlyFaucet == nil {
			x.HourlyFaucet = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.HourlyFaucet.ProtoReflect())
	case "cardchain.cardchain.Params.airDropValue":
		if x.AirDropValue == nil {
			x.AirDropValue = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.AirDropValue.ProtoReflect())
	case "cardchain.cardchain.Params.trialVoteReward":
		if x.TrialVoteReward == nil {
			x.TrialVoteReward = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.TrialVoteReward.ProtoReflect())
	case "cardchain.cardchain.Params.votingRightsExpirationTime":
		panic(fmt.Errorf("field votingRightsExpirationTime of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.setSize":
		panic(fmt.Errorf("field setSize of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.activeSetsAmount":
		panic(fmt.Errorf("field activeSetsAmount of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.winnerReward":
		panic(fmt.Errorf("field winnerReward of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.inflationRate":
		panic(fmt.Errorf("field inflationRate of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.raresPerPack":
		panic(fmt.Errorf("field raresPerPack of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.commonsPerPack":
		panic(fmt.Errorf("field commonsPerPack of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.unCommonsPerPack":
		panic(fmt.Errorf("field unCommonsPerPack of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.trialPeriod":
		panic(fmt.Errorf("field trialPeriod of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.gameVoteRatio":
		panic(fmt.Errorf("field gameVoteRatio of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.cardAuctionPriceReductionPeriod":
		panic(fmt.Errorf("field cardAuctionPriceReductionPeriod of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.airDropMaxBlockHeight":
		panic(fmt.Errorf("field airDropMaxBlockHeight of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.votePoolFraction":
		panic(fmt.Errorf("field votePoolFraction of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.votingRewardCap":
		panic(fmt.Errorf("field votingRewardCap of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.matchWorkerDelay":
		panic(fmt.Errorf("field matchWorkerDelay of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.rareDropRatio":
		panic(fmt.Errorf("field rareDropRatio of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.exceptionalDropRatio":
		panic(fmt.Errorf("field exceptionalDropRatio of message cardchain.cardchain.Params is not mutable"))
	case "cardchain.cardchain.Params.uniqueDropRatio":
		panic(fmt.Errorf("field uniqueDropRatio of message cardchain.cardchain.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Params"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.Params.votingRightsExpirationTime":
		return protoreflect.ValueOfInt64(int64(0))
	case "cardchain.cardchain.Params.setSize":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.setPrice":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.Params.activeSetsAmount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.setCreationFee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.Params.collateralDeposit":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.Params.winnerReward":
		return protoreflect.ValueOfInt64(int64(0))
	case "cardchain.cardchain.Params.hourlyFaucet":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.Params.inflationRate":
		return protoreflect.ValueOfString("")
	case "cardchain.cardchain.Params.raresPerPack":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.commonsPerPack":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.unCommonsPerPack":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.trialPeriod":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.gameVoteRatio":
		return protoreflect.ValueOfInt64(int64(0))
	case "cardchain.cardchain.Params.cardAuctionPriceReductionPeriod":
		return protoreflect.ValueOfInt64(int64(0))
	case "cardchain.cardchain.Params.airDropValue":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.Params.airDropMaxBlockHeight":
		return protoreflect.ValueOfInt64(int64(0))
	case "cardchain.cardchain.Params.trialVoteReward":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.Params.votePoolFraction":
		return protoreflect.ValueOfInt64(int64(0))
	case "cardchain.cardchain.Params.votingRewardCap":
		return protoreflect.ValueOfInt64(int64(0))
	case "cardchain.cardchain.Params.matchWorkerDelay":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.rareDropRatio":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.exceptionalDropRatio":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Params.uniqueDropRatio":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Params"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cardchain.cardchain.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.VotingRightsExpirationTime != 0 {
			n += 1 + runtime.Sov(uint64(x.VotingRightsExpirationTime))
		}
		if x.SetSize != 0 {
			n += 1 + runtime.Sov(uint64(x.SetSize))
		}
		if x.SetPrice != nil {
			l = options.Size(x.SetPrice)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ActiveSetsAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.ActiveSetsAmount))
		}
		if x.SetCreationFee != nil {
			l = options.Size(x.SetCreationFee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CollateralDeposit != nil {
			l = options.Size(x.CollateralDeposit)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.WinnerReward != 0 {
			n += 1 + runtime.Sov(uint64(x.WinnerReward))
		}
		if x.HourlyFaucet != nil {
			l = options.Size(x.HourlyFaucet)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InflationRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RaresPerPack != 0 {
			n += 1 + runtime.Sov(uint64(x.RaresPerPack))
		}
		if x.CommonsPerPack != 0 {
			n += 1 + runtime.Sov(uint64(x.CommonsPerPack))
		}
		if x.UnCommonsPerPack != 0 {
			n += 1 + runtime.Sov(uint64(x.UnCommonsPerPack))
		}
		if x.TrialPeriod != 0 {
			n += 1 + runtime.Sov(uint64(x.TrialPeriod))
		}
		if x.GameVoteRatio != 0 {
			n += 1 + runtime.Sov(uint64(x.GameVoteRatio))
		}
		if x.CardAuctionPriceReductionPeriod != 0 {
			n += 2 + runtime.Sov(uint64(x.CardAuctionPriceReductionPeriod))
		}
		if x.AirDropValue != nil {
			l = options.Size(x.AirDropValue)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.AirDropMaxBlockHeight != 0 {
			n += 2 + runtime.Sov(uint64(x.AirDropMaxBlockHeight))
		}
		if x.TrialVoteReward != nil {
			l = options.Size(x.TrialVoteReward)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.VotePoolFraction != 0 {
			n += 2 + runtime.Sov(uint64(x.VotePoolFraction))
		}
		if x.VotingRewardCap != 0 {
			n += 1 + runtime.Sov(uint64(x.VotingRewardCap))
		}
		if x.MatchWorkerDelay != 0 {
			n += 2 + runtime.Sov(uint64(x.MatchWorkerDelay))
		}
		if x.RareDropRatio != 0 {
			n += 2 + runtime.Sov(uint64(x.RareDropRatio))
		}
		if x.ExceptionalDropRatio != 0 {
			n += 2 + runtime.Sov(uint64(x.ExceptionalDropRatio))
		}
		if x.UniqueDropRatio != 0 {
			n += 2 + runtime.Sov(uint64(x.UniqueDropRatio))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.UniqueDropRatio != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UniqueDropRatio))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc0
		}
		if x.ExceptionalDropRatio != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExceptionalDropRatio))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb8
		}
		if x.RareDropRatio != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RareDropRatio))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb0
		}
		if x.MatchWorkerDelay != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MatchWorkerDelay))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa8
		}
		if x.VotePoolFraction != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VotePoolFraction))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if x.TrialVoteReward != nil {
			encoded, err := options.Marshal(x.TrialVoteReward)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
		if x.AirDropMaxBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AirDropMaxBlockHeight))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.AirDropValue != nil {
			encoded, err := options.Marshal(x.AirDropValue)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if x.CardAuctionPriceReductionPeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CardAuctionPriceReductionPeriod))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.GameVoteRatio != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GameVoteRatio))
			i--
			dAtA[i] = 0x78
		}
		if x.TrialPeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TrialPeriod))
			i--
			dAtA[i] = 0x70
		}
		if x.UnCommonsPerPack != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnCommonsPerPack))
			i--
			dAtA[i] = 0x68
		}
		if x.CommonsPerPack != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CommonsPerPack))
			i--
			dAtA[i] = 0x60
		}
		if x.RaresPerPack != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RaresPerPack))
			i--
			dAtA[i] = 0x58
		}
		if len(x.InflationRate) > 0 {
			i -= len(x.InflationRate)
			copy(dAtA[i:], x.InflationRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InflationRate)))
			i--
			dAtA[i] = 0x52
		}
		if x.HourlyFaucet != nil {
			encoded, err := options.Marshal(x.HourlyFaucet)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.VotingRewardCap != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VotingRewardCap))
			i--
			dAtA[i] = 0x40
		}
		if x.WinnerReward != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WinnerReward))
			i--
			dAtA[i] = 0x38
		}
		if x.CollateralDeposit != nil {
			encoded, err := options.Marshal(x.CollateralDeposit)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.SetCreationFee != nil {
			encoded, err := options.Marshal(x.SetCreationFee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.ActiveSetsAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActiveSetsAmount))
			i--
			dAtA[i] = 0x20
		}
		if x.SetPrice != nil {
			encoded, err := options.Marshal(x.SetPrice)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.SetSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SetSize))
			i--
			dAtA[i] = 0x10
		}
		if x.VotingRightsExpirationTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VotingRightsExpirationTime))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotingRightsExpirationTime", wireType)
				}
				x.VotingRightsExpirationTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VotingRightsExpirationTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SetSize", wireType)
				}
				x.SetSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SetSize |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SetPrice", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SetPrice == nil {
					x.SetPrice = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SetPrice); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveSetsAmount", wireType)
				}
				x.ActiveSetsAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActiveSetsAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SetCreationFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SetCreationFee == nil {
					x.SetCreationFee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SetCreationFee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CollateralDeposit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CollateralDeposit == nil {
					x.CollateralDeposit = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CollateralDeposit); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WinnerReward", wireType)
				}
				x.WinnerReward = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WinnerReward |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HourlyFaucet", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.HourlyFaucet == nil {
					x.HourlyFaucet = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.HourlyFaucet); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InflationRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InflationRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RaresPerPack", wireType)
				}
				x.RaresPerPack = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RaresPerPack |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommonsPerPack", wireType)
				}
				x.CommonsPerPack = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CommonsPerPack |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnCommonsPerPack", wireType)
				}
				x.UnCommonsPerPack = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnCommonsPerPack |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TrialPeriod", wireType)
				}
				x.TrialPeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TrialPeriod |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GameVoteRatio", wireType)
				}
				x.GameVoteRatio = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GameVoteRatio |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CardAuctionPriceReductionPeriod", wireType)
				}
				x.CardAuctionPriceReductionPeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CardAuctionPriceReductionPeriod |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AirDropValue", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AirDropValue == nil {
					x.AirDropValue = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AirDropValue); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AirDropMaxBlockHeight", wireType)
				}
				x.AirDropMaxBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AirDropMaxBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TrialVoteReward", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TrialVoteReward == nil {
					x.TrialVoteReward = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TrialVoteReward); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotePoolFraction", wireType)
				}
				x.VotePoolFraction = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VotePoolFraction |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotingRewardCap", wireType)
				}
				x.VotingRewardCap = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VotingRewardCap |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 21:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MatchWorkerDelay", wireType)
				}
				x.MatchWorkerDelay = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MatchWorkerDelay |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 22:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RareDropRatio", wireType)
				}
				x.RareDropRatio = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RareDropRatio |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 23:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExceptionalDropRatio", wireType)
				}
				x.ExceptionalDropRatio = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExceptionalDropRatio |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 24:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UniqueDropRatio", wireType)
				}
				x.UniqueDropRatio = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UniqueDropRatio |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: cardchain/cardchain/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VotingRightsExpirationTime      int64         `protobuf:"varint,1,opt,name=votingRightsExpirationTime,proto3" json:"votingRightsExpirationTime,omitempty"`
	SetSize                         uint64        `protobuf:"varint,2,opt,name=setSize,proto3" json:"setSize,omitempty"`
	SetPrice                        *v1beta1.Coin `protobuf:"bytes,3,opt,name=setPrice,proto3" json:"setPrice,omitempty"`
	ActiveSetsAmount                uint64        `protobuf:"varint,4,opt,name=activeSetsAmount,proto3" json:"activeSetsAmount,omitempty"`
	SetCreationFee                  *v1beta1.Coin `protobuf:"bytes,5,opt,name=setCreationFee,proto3" json:"setCreationFee,omitempty"`
	CollateralDeposit               *v1beta1.Coin `protobuf:"bytes,6,opt,name=collateralDeposit,proto3" json:"collateralDeposit,omitempty"`
	WinnerReward                    int64         `protobuf:"varint,7,opt,name=winnerReward,proto3" json:"winnerReward,omitempty"`
	HourlyFaucet                    *v1beta1.Coin `protobuf:"bytes,9,opt,name=hourlyFaucet,proto3" json:"hourlyFaucet,omitempty"`
	InflationRate                   string        `protobuf:"bytes,10,opt,name=inflationRate,proto3" json:"inflationRate,omitempty"`
	RaresPerPack                    uint64        `protobuf:"varint,11,opt,name=raresPerPack,proto3" json:"raresPerPack,omitempty"`
	CommonsPerPack                  uint64        `protobuf:"varint,12,opt,name=commonsPerPack,proto3" json:"commonsPerPack,omitempty"`
	UnCommonsPerPack                uint64        `protobuf:"varint,13,opt,name=unCommonsPerPack,proto3" json:"unCommonsPerPack,omitempty"`
	TrialPeriod                     uint64        `protobuf:"varint,14,opt,name=trialPeriod,proto3" json:"trialPeriod,omitempty"`
	GameVoteRatio                   int64         `protobuf:"varint,15,opt,name=gameVoteRatio,proto3" json:"gameVoteRatio,omitempty"`
	CardAuctionPriceReductionPeriod int64         `protobuf:"varint,16,opt,name=cardAuctionPriceReductionPeriod,proto3" json:"cardAuctionPriceReductionPeriod,omitempty"`
	AirDropValue                    *v1beta1.Coin `protobuf:"bytes,17,opt,name=airDropValue,proto3" json:"airDropValue,omitempty"`
	AirDropMaxBlockHeight           int64         `protobuf:"varint,18,opt,name=airDropMaxBlockHeight,proto3" json:"airDropMaxBlockHeight,omitempty"`
	TrialVoteReward                 *v1beta1.Coin `protobuf:"bytes,19,opt,name=trialVoteReward,proto3" json:"trialVoteReward,omitempty"`
	VotePoolFraction                int64         `protobuf:"varint,20,opt,name=votePoolFraction,proto3" json:"votePoolFraction,omitempty"`
	VotingRewardCap                 int64         `protobuf:"varint,8,opt,name=votingRewardCap,proto3" json:"votingRewardCap,omitempty"`
	MatchWorkerDelay                uint64        `protobuf:"varint,21,opt,name=matchWorkerDelay,proto3" json:"matchWorkerDelay,omitempty"`
	RareDropRatio                   uint64        `protobuf:"varint,22,opt,name=rareDropRatio,proto3" json:"rareDropRatio,omitempty"`
	ExceptionalDropRatio            uint64        `protobuf:"varint,23,opt,name=exceptionalDropRatio,proto3" json:"exceptionalDropRatio,omitempty"`
	UniqueDropRatio                 uint64        `protobuf:"varint,24,opt,name=uniqueDropRatio,proto3" json:"uniqueDropRatio,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardchain_cardchain_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_cardchain_cardchain_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetVotingRightsExpirationTime() int64 {
	if x != nil {
		return x.VotingRightsExpirationTime
	}
	return 0
}

func (x *Params) GetSetSize() uint64 {
	if x != nil {
		return x.SetSize
	}
	return 0
}

func (x *Params) GetSetPrice() *v1beta1.Coin {
	if x != nil {
		return x.SetPrice
	}
	return nil
}

func (x *Params) GetActiveSetsAmount() uint64 {
	if x != nil {
		return x.ActiveSetsAmount
	}
	return 0
}

func (x *Params) GetSetCreationFee() *v1beta1.Coin {
	if x != nil {
		return x.SetCreationFee
	}
	return nil
}

func (x *Params) GetCollateralDeposit() *v1beta1.Coin {
	if x != nil {
		return x.CollateralDeposit
	}
	return nil
}

func (x *Params) GetWinnerReward() int64 {
	if x != nil {
		return x.WinnerReward
	}
	return 0
}

func (x *Params) GetHourlyFaucet() *v1beta1.Coin {
	if x != nil {
		return x.HourlyFaucet
	}
	return nil
}

func (x *Params) GetInflationRate() string {
	if x != nil {
		return x.InflationRate
	}
	return ""
}

func (x *Params) GetRaresPerPack() uint64 {
	if x != nil {
		return x.RaresPerPack
	}
	return 0
}

func (x *Params) GetCommonsPerPack() uint64 {
	if x != nil {
		return x.CommonsPerPack
	}
	return 0
}

func (x *Params) GetUnCommonsPerPack() uint64 {
	if x != nil {
		return x.UnCommonsPerPack
	}
	return 0
}

func (x *Params) GetTrialPeriod() uint64 {
	if x != nil {
		return x.TrialPeriod
	}
	return 0
}

func (x *Params) GetGameVoteRatio() int64 {
	if x != nil {
		return x.GameVoteRatio
	}
	return 0
}

func (x *Params) GetCardAuctionPriceReductionPeriod() int64 {
	if x != nil {
		return x.CardAuctionPriceReductionPeriod
	}
	return 0
}

func (x *Params) GetAirDropValue() *v1beta1.Coin {
	if x != nil {
		return x.AirDropValue
	}
	return nil
}

func (x *Params) GetAirDropMaxBlockHeight() int64 {
	if x != nil {
		return x.AirDropMaxBlockHeight
	}
	return 0
}

func (x *Params) GetTrialVoteReward() *v1beta1.Coin {
	if x != nil {
		return x.TrialVoteReward
	}
	return nil
}

func (x *Params) GetVotePoolFraction() int64 {
	if x != nil {
		return x.VotePoolFraction
	}
	return 0
}

func (x *Params) GetVotingRewardCap() int64 {
	if x != nil {
		return x.VotingRewardCap
	}
	return 0
}

func (x *Params) GetMatchWorkerDelay() uint64 {
	if x != nil {
		return x.MatchWorkerDelay
	}
	return 0
}

func (x *Params) GetRareDropRatio() uint64 {
	if x != nil {
		return x.RareDropRatio
	}
	return 0
}

func (x *Params) GetExceptionalDropRatio() uint64 {
	if x != nil {
		return x.ExceptionalDropRatio
	}
	return 0
}

func (x *Params) GetUniqueDropRatio() uint64 {
	if x != nil {
		return x.UniqueDropRatio
	}
	return 0
}

var File_cardchain_cardchain_params_proto protoreflect.FileDescriptor

var file_cardchain_cardchain_params_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61,
	0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xef, 0x09, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x73,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x0e, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x6f,
	0x75, 0x72, 0x6c, 0x79, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0c, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x61, 0x72, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x61, 0x72,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x50, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f,
	0x63, 0x61, 0x72, 0x64, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x43, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x61, 0x69, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x69, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x4d,
	0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x69, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x78, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x72, 0x65, 0x44,
	0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x72, 0x61, 0x72, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x32, 0x0a,
	0x14, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x3a, 0x25, 0xe8, 0xa0, 0x1f,
	0x01, 0x8a, 0xe7, 0xb0, 0x2a, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x78, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0xd3, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x0b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0xa2, 0x02, 0x03,
	0x43, 0x43, 0x58, 0xaa, 0x02, 0x13, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0xca, 0x02, 0x13, 0x43, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0xe2,
	0x02, 0x1f, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x14, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x43,
	0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cardchain_cardchain_params_proto_rawDescOnce sync.Once
	file_cardchain_cardchain_params_proto_rawDescData = file_cardchain_cardchain_params_proto_rawDesc
)

func file_cardchain_cardchain_params_proto_rawDescGZIP() []byte {
	file_cardchain_cardchain_params_proto_rawDescOnce.Do(func() {
		file_cardchain_cardchain_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_cardchain_cardchain_params_proto_rawDescData)
	})
	return file_cardchain_cardchain_params_proto_rawDescData
}

var file_cardchain_cardchain_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cardchain_cardchain_params_proto_goTypes = []interface{}{
	(*Params)(nil),       // 0: cardchain.cardchain.Params
	(*v1beta1.Coin)(nil), // 1: cosmos.base.v1beta1.Coin
}
var file_cardchain_cardchain_params_proto_depIdxs = []int32{
	1, // 0: cardchain.cardchain.Params.setPrice:type_name -> cosmos.base.v1beta1.Coin
	1, // 1: cardchain.cardchain.Params.setCreationFee:type_name -> cosmos.base.v1beta1.Coin
	1, // 2: cardchain.cardchain.Params.collateralDeposit:type_name -> cosmos.base.v1beta1.Coin
	1, // 3: cardchain.cardchain.Params.hourlyFaucet:type_name -> cosmos.base.v1beta1.Coin
	1, // 4: cardchain.cardchain.Params.airDropValue:type_name -> cosmos.base.v1beta1.Coin
	1, // 5: cardchain.cardchain.Params.trialVoteReward:type_name -> cosmos.base.v1beta1.Coin
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_cardchain_cardchain_params_proto_init() }
func file_cardchain_cardchain_params_proto_init() {
	if File_cardchain_cardchain_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cardchain_cardchain_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cardchain_cardchain_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cardchain_cardchain_params_proto_goTypes,
		DependencyIndexes: file_cardchain_cardchain_params_proto_depIdxs,
		MessageInfos:      file_cardchain_cardchain_params_proto_msgTypes,
	}.Build()
	File_cardchain_cardchain_params_proto = out.File
	file_cardchain_cardchain_params_proto_rawDesc = nil
	file_cardchain_cardchain_params_proto_goTypes = nil
	file_cardchain_cardchain_params_proto_depIdxs = nil
}
