// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package cardchain

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_User_2_list)(nil)

type _User_2_list struct {
	list *[]uint64
}

func (x *_User_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_User_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_User_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_User_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_User_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message User at list field OwnedCardSchemes as it is not of Message kind"))
}

func (x *_User_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_User_2_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_User_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_User_3_list)(nil)

type _User_3_list struct {
	list *[]uint64
}

func (x *_User_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_User_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_User_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_User_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_User_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message User at list field OwnedPrototypes as it is not of Message kind"))
}

func (x *_User_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_User_3_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_User_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_User_4_list)(nil)

type _User_4_list struct {
	list *[]uint64
}

func (x *_User_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_User_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_User_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_User_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_User_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message User at list field Cards as it is not of Message kind"))
}

func (x *_User_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_User_4_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_User_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_User_10_list)(nil)

type _User_10_list struct {
	list *[]*BoosterPack
}

func (x *_User_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_User_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_User_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BoosterPack)
	(*x.list)[i] = concreteValue
}

func (x *_User_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BoosterPack)
	*x.list = append(*x.list, concreteValue)
}

func (x *_User_10_list) AppendMutable() protoreflect.Value {
	v := new(BoosterPack)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_User_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_User_10_list) NewElement() protoreflect.Value {
	v := new(BoosterPack)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_User_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_User_13_list)(nil)

type _User_13_list struct {
	list *[]uint64
}

func (x *_User_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_User_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_User_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_User_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_User_13_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message User at list field VotableCards as it is not of Message kind"))
}

func (x *_User_13_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_User_13_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_User_13_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_User_14_list)(nil)

type _User_14_list struct {
	list *[]uint64
}

func (x *_User_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_User_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_User_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_User_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_User_14_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message User at list field VotedCards as it is not of Message kind"))
}

func (x *_User_14_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_User_14_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_User_14_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_User_16_list)(nil)

type _User_16_list struct {
	list *[]uint64
}

func (x *_User_16_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_User_16_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_User_16_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_User_16_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_User_16_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message User at list field OpenEncounters as it is not of Message kind"))
}

func (x *_User_16_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_User_16_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_User_16_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_User_17_list)(nil)

type _User_17_list struct {
	list *[]uint64
}

func (x *_User_17_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_User_17_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_User_17_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_User_17_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_User_17_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message User at list field WonEncounters as it is not of Message kind"))
}

func (x *_User_17_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_User_17_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_User_17_list) IsValid() bool {
	return x.list != nil
}

var (
	md_User                  protoreflect.MessageDescriptor
	fd_User_alias            protoreflect.FieldDescriptor
	fd_User_ownedCardSchemes protoreflect.FieldDescriptor
	fd_User_ownedPrototypes  protoreflect.FieldDescriptor
	fd_User_cards            protoreflect.FieldDescriptor
	fd_User_CouncilStatus    protoreflect.FieldDescriptor
	fd_User_ReportMatches    protoreflect.FieldDescriptor
	fd_User_profileCard      protoreflect.FieldDescriptor
	fd_User_airDrops         protoreflect.FieldDescriptor
	fd_User_boosterPacks     protoreflect.FieldDescriptor
	fd_User_website          protoreflect.FieldDescriptor
	fd_User_biography        protoreflect.FieldDescriptor
	fd_User_votableCards     protoreflect.FieldDescriptor
	fd_User_votedCards       protoreflect.FieldDescriptor
	fd_User_earlyAccess      protoreflect.FieldDescriptor
	fd_User_OpenEncounters   protoreflect.FieldDescriptor
	fd_User_WonEncounters    protoreflect.FieldDescriptor
)

func init() {
	file_cardchain_cardchain_user_proto_init()
	md_User = File_cardchain_cardchain_user_proto.Messages().ByName("User")
	fd_User_alias = md_User.Fields().ByName("alias")
	fd_User_ownedCardSchemes = md_User.Fields().ByName("ownedCardSchemes")
	fd_User_ownedPrototypes = md_User.Fields().ByName("ownedPrototypes")
	fd_User_cards = md_User.Fields().ByName("cards")
	fd_User_CouncilStatus = md_User.Fields().ByName("CouncilStatus")
	fd_User_ReportMatches = md_User.Fields().ByName("ReportMatches")
	fd_User_profileCard = md_User.Fields().ByName("profileCard")
	fd_User_airDrops = md_User.Fields().ByName("airDrops")
	fd_User_boosterPacks = md_User.Fields().ByName("boosterPacks")
	fd_User_website = md_User.Fields().ByName("website")
	fd_User_biography = md_User.Fields().ByName("biography")
	fd_User_votableCards = md_User.Fields().ByName("votableCards")
	fd_User_votedCards = md_User.Fields().ByName("votedCards")
	fd_User_earlyAccess = md_User.Fields().ByName("earlyAccess")
	fd_User_OpenEncounters = md_User.Fields().ByName("OpenEncounters")
	fd_User_WonEncounters = md_User.Fields().ByName("WonEncounters")
}

var _ protoreflect.Message = (*fastReflection_User)(nil)

type fastReflection_User User

func (x *User) ProtoReflect() protoreflect.Message {
	return (*fastReflection_User)(x)
}

func (x *User) slowProtoReflect() protoreflect.Message {
	mi := &file_cardchain_cardchain_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_User_messageType fastReflection_User_messageType
var _ protoreflect.MessageType = fastReflection_User_messageType{}

type fastReflection_User_messageType struct{}

func (x fastReflection_User_messageType) Zero() protoreflect.Message {
	return (*fastReflection_User)(nil)
}
func (x fastReflection_User_messageType) New() protoreflect.Message {
	return new(fastReflection_User)
}
func (x fastReflection_User_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_User
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_User) Descriptor() protoreflect.MessageDescriptor {
	return md_User
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_User) Type() protoreflect.MessageType {
	return _fastReflection_User_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_User) New() protoreflect.Message {
	return new(fastReflection_User)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_User) Interface() protoreflect.ProtoMessage {
	return (*User)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_User) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Alias != "" {
		value := protoreflect.ValueOfString(x.Alias)
		if !f(fd_User_alias, value) {
			return
		}
	}
	if len(x.OwnedCardSchemes) != 0 {
		value := protoreflect.ValueOfList(&_User_2_list{list: &x.OwnedCardSchemes})
		if !f(fd_User_ownedCardSchemes, value) {
			return
		}
	}
	if len(x.OwnedPrototypes) != 0 {
		value := protoreflect.ValueOfList(&_User_3_list{list: &x.OwnedPrototypes})
		if !f(fd_User_ownedPrototypes, value) {
			return
		}
	}
	if len(x.Cards) != 0 {
		value := protoreflect.ValueOfList(&_User_4_list{list: &x.Cards})
		if !f(fd_User_cards, value) {
			return
		}
	}
	if x.CouncilStatus != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.CouncilStatus))
		if !f(fd_User_CouncilStatus, value) {
			return
		}
	}
	if x.ReportMatches != false {
		value := protoreflect.ValueOfBool(x.ReportMatches)
		if !f(fd_User_ReportMatches, value) {
			return
		}
	}
	if x.ProfileCard != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ProfileCard)
		if !f(fd_User_profileCard, value) {
			return
		}
	}
	if x.AirDrops != nil {
		value := protoreflect.ValueOfMessage(x.AirDrops.ProtoReflect())
		if !f(fd_User_airDrops, value) {
			return
		}
	}
	if len(x.BoosterPacks) != 0 {
		value := protoreflect.ValueOfList(&_User_10_list{list: &x.BoosterPacks})
		if !f(fd_User_boosterPacks, value) {
			return
		}
	}
	if x.Website != "" {
		value := protoreflect.ValueOfString(x.Website)
		if !f(fd_User_website, value) {
			return
		}
	}
	if x.Biography != "" {
		value := protoreflect.ValueOfString(x.Biography)
		if !f(fd_User_biography, value) {
			return
		}
	}
	if len(x.VotableCards) != 0 {
		value := protoreflect.ValueOfList(&_User_13_list{list: &x.VotableCards})
		if !f(fd_User_votableCards, value) {
			return
		}
	}
	if len(x.VotedCards) != 0 {
		value := protoreflect.ValueOfList(&_User_14_list{list: &x.VotedCards})
		if !f(fd_User_votedCards, value) {
			return
		}
	}
	if x.EarlyAccess != nil {
		value := protoreflect.ValueOfMessage(x.EarlyAccess.ProtoReflect())
		if !f(fd_User_earlyAccess, value) {
			return
		}
	}
	if len(x.OpenEncounters) != 0 {
		value := protoreflect.ValueOfList(&_User_16_list{list: &x.OpenEncounters})
		if !f(fd_User_OpenEncounters, value) {
			return
		}
	}
	if len(x.WonEncounters) != 0 {
		value := protoreflect.ValueOfList(&_User_17_list{list: &x.WonEncounters})
		if !f(fd_User_WonEncounters, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_User) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cardchain.cardchain.User.alias":
		return x.Alias != ""
	case "cardchain.cardchain.User.ownedCardSchemes":
		return len(x.OwnedCardSchemes) != 0
	case "cardchain.cardchain.User.ownedPrototypes":
		return len(x.OwnedPrototypes) != 0
	case "cardchain.cardchain.User.cards":
		return len(x.Cards) != 0
	case "cardchain.cardchain.User.CouncilStatus":
		return x.CouncilStatus != 0
	case "cardchain.cardchain.User.ReportMatches":
		return x.ReportMatches != false
	case "cardchain.cardchain.User.profileCard":
		return x.ProfileCard != uint64(0)
	case "cardchain.cardchain.User.airDrops":
		return x.AirDrops != nil
	case "cardchain.cardchain.User.boosterPacks":
		return len(x.BoosterPacks) != 0
	case "cardchain.cardchain.User.website":
		return x.Website != ""
	case "cardchain.cardchain.User.biography":
		return x.Biography != ""
	case "cardchain.cardchain.User.votableCards":
		return len(x.VotableCards) != 0
	case "cardchain.cardchain.User.votedCards":
		return len(x.VotedCards) != 0
	case "cardchain.cardchain.User.earlyAccess":
		return x.EarlyAccess != nil
	case "cardchain.cardchain.User.OpenEncounters":
		return len(x.OpenEncounters) != 0
	case "cardchain.cardchain.User.WonEncounters":
		return len(x.WonEncounters) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.User"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.User does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_User) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cardchain.cardchain.User.alias":
		x.Alias = ""
	case "cardchain.cardchain.User.ownedCardSchemes":
		x.OwnedCardSchemes = nil
	case "cardchain.cardchain.User.ownedPrototypes":
		x.OwnedPrototypes = nil
	case "cardchain.cardchain.User.cards":
		x.Cards = nil
	case "cardchain.cardchain.User.CouncilStatus":
		x.CouncilStatus = 0
	case "cardchain.cardchain.User.ReportMatches":
		x.ReportMatches = false
	case "cardchain.cardchain.User.profileCard":
		x.ProfileCard = uint64(0)
	case "cardchain.cardchain.User.airDrops":
		x.AirDrops = nil
	case "cardchain.cardchain.User.boosterPacks":
		x.BoosterPacks = nil
	case "cardchain.cardchain.User.website":
		x.Website = ""
	case "cardchain.cardchain.User.biography":
		x.Biography = ""
	case "cardchain.cardchain.User.votableCards":
		x.VotableCards = nil
	case "cardchain.cardchain.User.votedCards":
		x.VotedCards = nil
	case "cardchain.cardchain.User.earlyAccess":
		x.EarlyAccess = nil
	case "cardchain.cardchain.User.OpenEncounters":
		x.OpenEncounters = nil
	case "cardchain.cardchain.User.WonEncounters":
		x.WonEncounters = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.User"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.User does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_User) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cardchain.cardchain.User.alias":
		value := x.Alias
		return protoreflect.ValueOfString(value)
	case "cardchain.cardchain.User.ownedCardSchemes":
		if len(x.OwnedCardSchemes) == 0 {
			return protoreflect.ValueOfList(&_User_2_list{})
		}
		listValue := &_User_2_list{list: &x.OwnedCardSchemes}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.User.ownedPrototypes":
		if len(x.OwnedPrototypes) == 0 {
			return protoreflect.ValueOfList(&_User_3_list{})
		}
		listValue := &_User_3_list{list: &x.OwnedPrototypes}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.User.cards":
		if len(x.Cards) == 0 {
			return protoreflect.ValueOfList(&_User_4_list{})
		}
		listValue := &_User_4_list{list: &x.Cards}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.User.CouncilStatus":
		value := x.CouncilStatus
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "cardchain.cardchain.User.ReportMatches":
		value := x.ReportMatches
		return protoreflect.ValueOfBool(value)
	case "cardchain.cardchain.User.profileCard":
		value := x.ProfileCard
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.User.airDrops":
		value := x.AirDrops
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.User.boosterPacks":
		if len(x.BoosterPacks) == 0 {
			return protoreflect.ValueOfList(&_User_10_list{})
		}
		listValue := &_User_10_list{list: &x.BoosterPacks}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.User.website":
		value := x.Website
		return protoreflect.ValueOfString(value)
	case "cardchain.cardchain.User.biography":
		value := x.Biography
		return protoreflect.ValueOfString(value)
	case "cardchain.cardchain.User.votableCards":
		if len(x.VotableCards) == 0 {
			return protoreflect.ValueOfList(&_User_13_list{})
		}
		listValue := &_User_13_list{list: &x.VotableCards}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.User.votedCards":
		if len(x.VotedCards) == 0 {
			return protoreflect.ValueOfList(&_User_14_list{})
		}
		listValue := &_User_14_list{list: &x.VotedCards}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.User.earlyAccess":
		value := x.EarlyAccess
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.User.OpenEncounters":
		if len(x.OpenEncounters) == 0 {
			return protoreflect.ValueOfList(&_User_16_list{})
		}
		listValue := &_User_16_list{list: &x.OpenEncounters}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.User.WonEncounters":
		if len(x.WonEncounters) == 0 {
			return protoreflect.ValueOfList(&_User_17_list{})
		}
		listValue := &_User_17_list{list: &x.WonEncounters}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.User"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.User does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_User) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cardchain.cardchain.User.alias":
		x.Alias = value.Interface().(string)
	case "cardchain.cardchain.User.ownedCardSchemes":
		lv := value.List()
		clv := lv.(*_User_2_list)
		x.OwnedCardSchemes = *clv.list
	case "cardchain.cardchain.User.ownedPrototypes":
		lv := value.List()
		clv := lv.(*_User_3_list)
		x.OwnedPrototypes = *clv.list
	case "cardchain.cardchain.User.cards":
		lv := value.List()
		clv := lv.(*_User_4_list)
		x.Cards = *clv.list
	case "cardchain.cardchain.User.CouncilStatus":
		x.CouncilStatus = (CouncilStatus)(value.Enum())
	case "cardchain.cardchain.User.ReportMatches":
		x.ReportMatches = value.Bool()
	case "cardchain.cardchain.User.profileCard":
		x.ProfileCard = value.Uint()
	case "cardchain.cardchain.User.airDrops":
		x.AirDrops = value.Message().Interface().(*AirDrops)
	case "cardchain.cardchain.User.boosterPacks":
		lv := value.List()
		clv := lv.(*_User_10_list)
		x.BoosterPacks = *clv.list
	case "cardchain.cardchain.User.website":
		x.Website = value.Interface().(string)
	case "cardchain.cardchain.User.biography":
		x.Biography = value.Interface().(string)
	case "cardchain.cardchain.User.votableCards":
		lv := value.List()
		clv := lv.(*_User_13_list)
		x.VotableCards = *clv.list
	case "cardchain.cardchain.User.votedCards":
		lv := value.List()
		clv := lv.(*_User_14_list)
		x.VotedCards = *clv.list
	case "cardchain.cardchain.User.earlyAccess":
		x.EarlyAccess = value.Message().Interface().(*EarlyAccess)
	case "cardchain.cardchain.User.OpenEncounters":
		lv := value.List()
		clv := lv.(*_User_16_list)
		x.OpenEncounters = *clv.list
	case "cardchain.cardchain.User.WonEncounters":
		lv := value.List()
		clv := lv.(*_User_17_list)
		x.WonEncounters = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.User"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.User does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_User) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.User.ownedCardSchemes":
		if x.OwnedCardSchemes == nil {
			x.OwnedCardSchemes = []uint64{}
		}
		value := &_User_2_list{list: &x.OwnedCardSchemes}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.User.ownedPrototypes":
		if x.OwnedPrototypes == nil {
			x.OwnedPrototypes = []uint64{}
		}
		value := &_User_3_list{list: &x.OwnedPrototypes}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.User.cards":
		if x.Cards == nil {
			x.Cards = []uint64{}
		}
		value := &_User_4_list{list: &x.Cards}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.User.airDrops":
		if x.AirDrops == nil {
			x.AirDrops = new(AirDrops)
		}
		return protoreflect.ValueOfMessage(x.AirDrops.ProtoReflect())
	case "cardchain.cardchain.User.boosterPacks":
		if x.BoosterPacks == nil {
			x.BoosterPacks = []*BoosterPack{}
		}
		value := &_User_10_list{list: &x.BoosterPacks}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.User.votableCards":
		if x.VotableCards == nil {
			x.VotableCards = []uint64{}
		}
		value := &_User_13_list{list: &x.VotableCards}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.User.votedCards":
		if x.VotedCards == nil {
			x.VotedCards = []uint64{}
		}
		value := &_User_14_list{list: &x.VotedCards}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.User.earlyAccess":
		if x.EarlyAccess == nil {
			x.EarlyAccess = new(EarlyAccess)
		}
		return protoreflect.ValueOfMessage(x.EarlyAccess.ProtoReflect())
	case "cardchain.cardchain.User.OpenEncounters":
		if x.OpenEncounters == nil {
			x.OpenEncounters = []uint64{}
		}
		value := &_User_16_list{list: &x.OpenEncounters}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.User.WonEncounters":
		if x.WonEncounters == nil {
			x.WonEncounters = []uint64{}
		}
		value := &_User_17_list{list: &x.WonEncounters}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.User.alias":
		panic(fmt.Errorf("field alias of message cardchain.cardchain.User is not mutable"))
	case "cardchain.cardchain.User.CouncilStatus":
		panic(fmt.Errorf("field CouncilStatus of message cardchain.cardchain.User is not mutable"))
	case "cardchain.cardchain.User.ReportMatches":
		panic(fmt.Errorf("field ReportMatches of message cardchain.cardchain.User is not mutable"))
	case "cardchain.cardchain.User.profileCard":
		panic(fmt.Errorf("field profileCard of message cardchain.cardchain.User is not mutable"))
	case "cardchain.cardchain.User.website":
		panic(fmt.Errorf("field website of message cardchain.cardchain.User is not mutable"))
	case "cardchain.cardchain.User.biography":
		panic(fmt.Errorf("field biography of message cardchain.cardchain.User is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.User"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.User does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_User) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.User.alias":
		return protoreflect.ValueOfString("")
	case "cardchain.cardchain.User.ownedCardSchemes":
		list := []uint64{}
		return protoreflect.ValueOfList(&_User_2_list{list: &list})
	case "cardchain.cardchain.User.ownedPrototypes":
		list := []uint64{}
		return protoreflect.ValueOfList(&_User_3_list{list: &list})
	case "cardchain.cardchain.User.cards":
		list := []uint64{}
		return protoreflect.ValueOfList(&_User_4_list{list: &list})
	case "cardchain.cardchain.User.CouncilStatus":
		return protoreflect.ValueOfEnum(0)
	case "cardchain.cardchain.User.ReportMatches":
		return protoreflect.ValueOfBool(false)
	case "cardchain.cardchain.User.profileCard":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.User.airDrops":
		m := new(AirDrops)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.User.boosterPacks":
		list := []*BoosterPack{}
		return protoreflect.ValueOfList(&_User_10_list{list: &list})
	case "cardchain.cardchain.User.website":
		return protoreflect.ValueOfString("")
	case "cardchain.cardchain.User.biography":
		return protoreflect.ValueOfString("")
	case "cardchain.cardchain.User.votableCards":
		list := []uint64{}
		return protoreflect.ValueOfList(&_User_13_list{list: &list})
	case "cardchain.cardchain.User.votedCards":
		list := []uint64{}
		return protoreflect.ValueOfList(&_User_14_list{list: &list})
	case "cardchain.cardchain.User.earlyAccess":
		m := new(EarlyAccess)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.User.OpenEncounters":
		list := []uint64{}
		return protoreflect.ValueOfList(&_User_16_list{list: &list})
	case "cardchain.cardchain.User.WonEncounters":
		list := []uint64{}
		return protoreflect.ValueOfList(&_User_17_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.User"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.User does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_User) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cardchain.cardchain.User", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_User) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_User) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_User) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_User) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*User)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Alias)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.OwnedCardSchemes) > 0 {
			l = 0
			for _, e := range x.OwnedCardSchemes {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if len(x.OwnedPrototypes) > 0 {
			l = 0
			for _, e := range x.OwnedPrototypes {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if len(x.Cards) > 0 {
			l = 0
			for _, e := range x.Cards {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.CouncilStatus != 0 {
			n += 1 + runtime.Sov(uint64(x.CouncilStatus))
		}
		if x.ReportMatches {
			n += 2
		}
		if x.ProfileCard != 0 {
			n += 1 + runtime.Sov(uint64(x.ProfileCard))
		}
		if x.AirDrops != nil {
			l = options.Size(x.AirDrops)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.BoosterPacks) > 0 {
			for _, e := range x.BoosterPacks {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Website)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Biography)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.VotableCards) > 0 {
			l = 0
			for _, e := range x.VotableCards {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if len(x.VotedCards) > 0 {
			l = 0
			for _, e := range x.VotedCards {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.EarlyAccess != nil {
			l = options.Size(x.EarlyAccess)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.OpenEncounters) > 0 {
			l = 0
			for _, e := range x.OpenEncounters {
				l += runtime.Sov(uint64(e))
			}
			n += 2 + runtime.Sov(uint64(l)) + l
		}
		if len(x.WonEncounters) > 0 {
			l = 0
			for _, e := range x.WonEncounters {
				l += runtime.Sov(uint64(e))
			}
			n += 2 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*User)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.WonEncounters) > 0 {
			var pksize2 int
			for _, num := range x.WonEncounters {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.WonEncounters {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.OpenEncounters) > 0 {
			var pksize4 int
			for _, num := range x.OpenEncounters {
				pksize4 += runtime.Sov(uint64(num))
			}
			i -= pksize4
			j3 := i
			for _, num := range x.OpenEncounters {
				for num >= 1<<7 {
					dAtA[j3] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j3++
				}
				dAtA[j3] = uint8(num)
				j3++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize4))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if x.EarlyAccess != nil {
			encoded, err := options.Marshal(x.EarlyAccess)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.VotedCards) > 0 {
			var pksize6 int
			for _, num := range x.VotedCards {
				pksize6 += runtime.Sov(uint64(num))
			}
			i -= pksize6
			j5 := i
			for _, num := range x.VotedCards {
				for num >= 1<<7 {
					dAtA[j5] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j5++
				}
				dAtA[j5] = uint8(num)
				j5++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize6))
			i--
			dAtA[i] = 0x72
		}
		if len(x.VotableCards) > 0 {
			var pksize8 int
			for _, num := range x.VotableCards {
				pksize8 += runtime.Sov(uint64(num))
			}
			i -= pksize8
			j7 := i
			for _, num := range x.VotableCards {
				for num >= 1<<7 {
					dAtA[j7] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j7++
				}
				dAtA[j7] = uint8(num)
				j7++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize8))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.Biography) > 0 {
			i -= len(x.Biography)
			copy(dAtA[i:], x.Biography)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Biography)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.Website) > 0 {
			i -= len(x.Website)
			copy(dAtA[i:], x.Website)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Website)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.BoosterPacks) > 0 {
			for iNdEx := len(x.BoosterPacks) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BoosterPacks[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.AirDrops != nil {
			encoded, err := options.Marshal(x.AirDrops)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.ProfileCard != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProfileCard))
			i--
			dAtA[i] = 0x40
		}
		if x.ReportMatches {
			i--
			if x.ReportMatches {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.CouncilStatus != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CouncilStatus))
			i--
			dAtA[i] = 0x30
		}
		if len(x.Cards) > 0 {
			var pksize10 int
			for _, num := range x.Cards {
				pksize10 += runtime.Sov(uint64(num))
			}
			i -= pksize10
			j9 := i
			for _, num := range x.Cards {
				for num >= 1<<7 {
					dAtA[j9] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j9++
				}
				dAtA[j9] = uint8(num)
				j9++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize10))
			i--
			dAtA[i] = 0x22
		}
		if len(x.OwnedPrototypes) > 0 {
			var pksize12 int
			for _, num := range x.OwnedPrototypes {
				pksize12 += runtime.Sov(uint64(num))
			}
			i -= pksize12
			j11 := i
			for _, num := range x.OwnedPrototypes {
				for num >= 1<<7 {
					dAtA[j11] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j11++
				}
				dAtA[j11] = uint8(num)
				j11++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize12))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.OwnedCardSchemes) > 0 {
			var pksize14 int
			for _, num := range x.OwnedCardSchemes {
				pksize14 += runtime.Sov(uint64(num))
			}
			i -= pksize14
			j13 := i
			for _, num := range x.OwnedCardSchemes {
				for num >= 1<<7 {
					dAtA[j13] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j13++
				}
				dAtA[j13] = uint8(num)
				j13++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize14))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Alias) > 0 {
			i -= len(x.Alias)
			copy(dAtA[i:], x.Alias)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Alias)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*User)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: User: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Alias = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.OwnedCardSchemes = append(x.OwnedCardSchemes, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.OwnedCardSchemes) == 0 {
						x.OwnedCardSchemes = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.OwnedCardSchemes = append(x.OwnedCardSchemes, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OwnedCardSchemes", wireType)
				}
			case 3:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.OwnedPrototypes = append(x.OwnedPrototypes, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.OwnedPrototypes) == 0 {
						x.OwnedPrototypes = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.OwnedPrototypes = append(x.OwnedPrototypes, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OwnedPrototypes", wireType)
				}
			case 4:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Cards = append(x.Cards, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Cards) == 0 {
						x.Cards = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Cards = append(x.Cards, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CouncilStatus", wireType)
				}
				x.CouncilStatus = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CouncilStatus |= CouncilStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReportMatches", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.ReportMatches = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProfileCard", wireType)
				}
				x.ProfileCard = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProfileCard |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AirDrops", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AirDrops == nil {
					x.AirDrops = &AirDrops{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AirDrops); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BoosterPacks", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BoosterPacks = append(x.BoosterPacks, &BoosterPack{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BoosterPacks[len(x.BoosterPacks)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Website = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Biography", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Biography = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.VotableCards = append(x.VotableCards, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.VotableCards) == 0 {
						x.VotableCards = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.VotableCards = append(x.VotableCards, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotableCards", wireType)
				}
			case 14:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.VotedCards = append(x.VotedCards, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.VotedCards) == 0 {
						x.VotedCards = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.VotedCards = append(x.VotedCards, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotedCards", wireType)
				}
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EarlyAccess", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EarlyAccess == nil {
					x.EarlyAccess = &EarlyAccess{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EarlyAccess); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.OpenEncounters = append(x.OpenEncounters, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.OpenEncounters) == 0 {
						x.OpenEncounters = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.OpenEncounters = append(x.OpenEncounters, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OpenEncounters", wireType)
				}
			case 17:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.WonEncounters = append(x.WonEncounters, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.WonEncounters) == 0 {
						x.WonEncounters = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.WonEncounters = append(x.WonEncounters, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WonEncounters", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EarlyAccess               protoreflect.MessageDescriptor
	fd_EarlyAccess_active        protoreflect.FieldDescriptor
	fd_EarlyAccess_invitedByUser protoreflect.FieldDescriptor
	fd_EarlyAccess_invitedUser   protoreflect.FieldDescriptor
)

func init() {
	file_cardchain_cardchain_user_proto_init()
	md_EarlyAccess = File_cardchain_cardchain_user_proto.Messages().ByName("EarlyAccess")
	fd_EarlyAccess_active = md_EarlyAccess.Fields().ByName("active")
	fd_EarlyAccess_invitedByUser = md_EarlyAccess.Fields().ByName("invitedByUser")
	fd_EarlyAccess_invitedUser = md_EarlyAccess.Fields().ByName("invitedUser")
}

var _ protoreflect.Message = (*fastReflection_EarlyAccess)(nil)

type fastReflection_EarlyAccess EarlyAccess

func (x *EarlyAccess) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EarlyAccess)(x)
}

func (x *EarlyAccess) slowProtoReflect() protoreflect.Message {
	mi := &file_cardchain_cardchain_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EarlyAccess_messageType fastReflection_EarlyAccess_messageType
var _ protoreflect.MessageType = fastReflection_EarlyAccess_messageType{}

type fastReflection_EarlyAccess_messageType struct{}

func (x fastReflection_EarlyAccess_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EarlyAccess)(nil)
}
func (x fastReflection_EarlyAccess_messageType) New() protoreflect.Message {
	return new(fastReflection_EarlyAccess)
}
func (x fastReflection_EarlyAccess_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EarlyAccess
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EarlyAccess) Descriptor() protoreflect.MessageDescriptor {
	return md_EarlyAccess
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EarlyAccess) Type() protoreflect.MessageType {
	return _fastReflection_EarlyAccess_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EarlyAccess) New() protoreflect.Message {
	return new(fastReflection_EarlyAccess)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EarlyAccess) Interface() protoreflect.ProtoMessage {
	return (*EarlyAccess)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EarlyAccess) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Active != false {
		value := protoreflect.ValueOfBool(x.Active)
		if !f(fd_EarlyAccess_active, value) {
			return
		}
	}
	if x.InvitedByUser != "" {
		value := protoreflect.ValueOfString(x.InvitedByUser)
		if !f(fd_EarlyAccess_invitedByUser, value) {
			return
		}
	}
	if x.InvitedUser != "" {
		value := protoreflect.ValueOfString(x.InvitedUser)
		if !f(fd_EarlyAccess_invitedUser, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EarlyAccess) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cardchain.cardchain.EarlyAccess.active":
		return x.Active != false
	case "cardchain.cardchain.EarlyAccess.invitedByUser":
		return x.InvitedByUser != ""
	case "cardchain.cardchain.EarlyAccess.invitedUser":
		return x.InvitedUser != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.EarlyAccess"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.EarlyAccess does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EarlyAccess) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cardchain.cardchain.EarlyAccess.active":
		x.Active = false
	case "cardchain.cardchain.EarlyAccess.invitedByUser":
		x.InvitedByUser = ""
	case "cardchain.cardchain.EarlyAccess.invitedUser":
		x.InvitedUser = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.EarlyAccess"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.EarlyAccess does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EarlyAccess) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cardchain.cardchain.EarlyAccess.active":
		value := x.Active
		return protoreflect.ValueOfBool(value)
	case "cardchain.cardchain.EarlyAccess.invitedByUser":
		value := x.InvitedByUser
		return protoreflect.ValueOfString(value)
	case "cardchain.cardchain.EarlyAccess.invitedUser":
		value := x.InvitedUser
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.EarlyAccess"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.EarlyAccess does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EarlyAccess) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cardchain.cardchain.EarlyAccess.active":
		x.Active = value.Bool()
	case "cardchain.cardchain.EarlyAccess.invitedByUser":
		x.InvitedByUser = value.Interface().(string)
	case "cardchain.cardchain.EarlyAccess.invitedUser":
		x.InvitedUser = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.EarlyAccess"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.EarlyAccess does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EarlyAccess) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.EarlyAccess.active":
		panic(fmt.Errorf("field active of message cardchain.cardchain.EarlyAccess is not mutable"))
	case "cardchain.cardchain.EarlyAccess.invitedByUser":
		panic(fmt.Errorf("field invitedByUser of message cardchain.cardchain.EarlyAccess is not mutable"))
	case "cardchain.cardchain.EarlyAccess.invitedUser":
		panic(fmt.Errorf("field invitedUser of message cardchain.cardchain.EarlyAccess is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.EarlyAccess"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.EarlyAccess does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EarlyAccess) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.EarlyAccess.active":
		return protoreflect.ValueOfBool(false)
	case "cardchain.cardchain.EarlyAccess.invitedByUser":
		return protoreflect.ValueOfString("")
	case "cardchain.cardchain.EarlyAccess.invitedUser":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.EarlyAccess"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.EarlyAccess does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EarlyAccess) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cardchain.cardchain.EarlyAccess", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EarlyAccess) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EarlyAccess) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EarlyAccess) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EarlyAccess) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EarlyAccess)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Active {
			n += 2
		}
		l = len(x.InvitedByUser)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InvitedUser)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EarlyAccess)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.InvitedUser) > 0 {
			i -= len(x.InvitedUser)
			copy(dAtA[i:], x.InvitedUser)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InvitedUser)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.InvitedByUser) > 0 {
			i -= len(x.InvitedByUser)
			copy(dAtA[i:], x.InvitedByUser)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InvitedByUser)))
			i--
			dAtA[i] = 0x12
		}
		if x.Active {
			i--
			if x.Active {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EarlyAccess)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EarlyAccess: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EarlyAccess: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Active = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InvitedByUser", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InvitedByUser = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InvitedUser", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InvitedUser = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_BoosterPack_3_list)(nil)

type _BoosterPack_3_list struct {
	list *[]uint64
}

func (x *_BoosterPack_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BoosterPack_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_BoosterPack_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BoosterPack_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BoosterPack_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BoosterPack at list field RaritiesPerPack as it is not of Message kind"))
}

func (x *_BoosterPack_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BoosterPack_3_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_BoosterPack_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BoosterPack_4_list)(nil)

type _BoosterPack_4_list struct {
	list *[]uint64
}

func (x *_BoosterPack_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BoosterPack_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_BoosterPack_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BoosterPack_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BoosterPack_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BoosterPack at list field DropRatiosPerPack as it is not of Message kind"))
}

func (x *_BoosterPack_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BoosterPack_4_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_BoosterPack_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_BoosterPack                   protoreflect.MessageDescriptor
	fd_BoosterPack_setId             protoreflect.FieldDescriptor
	fd_BoosterPack_timeStamp         protoreflect.FieldDescriptor
	fd_BoosterPack_raritiesPerPack   protoreflect.FieldDescriptor
	fd_BoosterPack_dropRatiosPerPack protoreflect.FieldDescriptor
)

func init() {
	file_cardchain_cardchain_user_proto_init()
	md_BoosterPack = File_cardchain_cardchain_user_proto.Messages().ByName("BoosterPack")
	fd_BoosterPack_setId = md_BoosterPack.Fields().ByName("setId")
	fd_BoosterPack_timeStamp = md_BoosterPack.Fields().ByName("timeStamp")
	fd_BoosterPack_raritiesPerPack = md_BoosterPack.Fields().ByName("raritiesPerPack")
	fd_BoosterPack_dropRatiosPerPack = md_BoosterPack.Fields().ByName("dropRatiosPerPack")
}

var _ protoreflect.Message = (*fastReflection_BoosterPack)(nil)

type fastReflection_BoosterPack BoosterPack

func (x *BoosterPack) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BoosterPack)(x)
}

func (x *BoosterPack) slowProtoReflect() protoreflect.Message {
	mi := &file_cardchain_cardchain_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BoosterPack_messageType fastReflection_BoosterPack_messageType
var _ protoreflect.MessageType = fastReflection_BoosterPack_messageType{}

type fastReflection_BoosterPack_messageType struct{}

func (x fastReflection_BoosterPack_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BoosterPack)(nil)
}
func (x fastReflection_BoosterPack_messageType) New() protoreflect.Message {
	return new(fastReflection_BoosterPack)
}
func (x fastReflection_BoosterPack_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BoosterPack
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BoosterPack) Descriptor() protoreflect.MessageDescriptor {
	return md_BoosterPack
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BoosterPack) Type() protoreflect.MessageType {
	return _fastReflection_BoosterPack_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BoosterPack) New() protoreflect.Message {
	return new(fastReflection_BoosterPack)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BoosterPack) Interface() protoreflect.ProtoMessage {
	return (*BoosterPack)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BoosterPack) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SetId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SetId)
		if !f(fd_BoosterPack_setId, value) {
			return
		}
	}
	if x.TimeStamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.TimeStamp)
		if !f(fd_BoosterPack_timeStamp, value) {
			return
		}
	}
	if len(x.RaritiesPerPack) != 0 {
		value := protoreflect.ValueOfList(&_BoosterPack_3_list{list: &x.RaritiesPerPack})
		if !f(fd_BoosterPack_raritiesPerPack, value) {
			return
		}
	}
	if len(x.DropRatiosPerPack) != 0 {
		value := protoreflect.ValueOfList(&_BoosterPack_4_list{list: &x.DropRatiosPerPack})
		if !f(fd_BoosterPack_dropRatiosPerPack, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BoosterPack) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cardchain.cardchain.BoosterPack.setId":
		return x.SetId != uint64(0)
	case "cardchain.cardchain.BoosterPack.timeStamp":
		return x.TimeStamp != int64(0)
	case "cardchain.cardchain.BoosterPack.raritiesPerPack":
		return len(x.RaritiesPerPack) != 0
	case "cardchain.cardchain.BoosterPack.dropRatiosPerPack":
		return len(x.DropRatiosPerPack) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.BoosterPack"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.BoosterPack does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BoosterPack) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cardchain.cardchain.BoosterPack.setId":
		x.SetId = uint64(0)
	case "cardchain.cardchain.BoosterPack.timeStamp":
		x.TimeStamp = int64(0)
	case "cardchain.cardchain.BoosterPack.raritiesPerPack":
		x.RaritiesPerPack = nil
	case "cardchain.cardchain.BoosterPack.dropRatiosPerPack":
		x.DropRatiosPerPack = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.BoosterPack"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.BoosterPack does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BoosterPack) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cardchain.cardchain.BoosterPack.setId":
		value := x.SetId
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.BoosterPack.timeStamp":
		value := x.TimeStamp
		return protoreflect.ValueOfInt64(value)
	case "cardchain.cardchain.BoosterPack.raritiesPerPack":
		if len(x.RaritiesPerPack) == 0 {
			return protoreflect.ValueOfList(&_BoosterPack_3_list{})
		}
		listValue := &_BoosterPack_3_list{list: &x.RaritiesPerPack}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.BoosterPack.dropRatiosPerPack":
		if len(x.DropRatiosPerPack) == 0 {
			return protoreflect.ValueOfList(&_BoosterPack_4_list{})
		}
		listValue := &_BoosterPack_4_list{list: &x.DropRatiosPerPack}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.BoosterPack"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.BoosterPack does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BoosterPack) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cardchain.cardchain.BoosterPack.setId":
		x.SetId = value.Uint()
	case "cardchain.cardchain.BoosterPack.timeStamp":
		x.TimeStamp = value.Int()
	case "cardchain.cardchain.BoosterPack.raritiesPerPack":
		lv := value.List()
		clv := lv.(*_BoosterPack_3_list)
		x.RaritiesPerPack = *clv.list
	case "cardchain.cardchain.BoosterPack.dropRatiosPerPack":
		lv := value.List()
		clv := lv.(*_BoosterPack_4_list)
		x.DropRatiosPerPack = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.BoosterPack"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.BoosterPack does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BoosterPack) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.BoosterPack.raritiesPerPack":
		if x.RaritiesPerPack == nil {
			x.RaritiesPerPack = []uint64{}
		}
		value := &_BoosterPack_3_list{list: &x.RaritiesPerPack}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.BoosterPack.dropRatiosPerPack":
		if x.DropRatiosPerPack == nil {
			x.DropRatiosPerPack = []uint64{}
		}
		value := &_BoosterPack_4_list{list: &x.DropRatiosPerPack}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.BoosterPack.setId":
		panic(fmt.Errorf("field setId of message cardchain.cardchain.BoosterPack is not mutable"))
	case "cardchain.cardchain.BoosterPack.timeStamp":
		panic(fmt.Errorf("field timeStamp of message cardchain.cardchain.BoosterPack is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.BoosterPack"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.BoosterPack does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BoosterPack) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.BoosterPack.setId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.BoosterPack.timeStamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "cardchain.cardchain.BoosterPack.raritiesPerPack":
		list := []uint64{}
		return protoreflect.ValueOfList(&_BoosterPack_3_list{list: &list})
	case "cardchain.cardchain.BoosterPack.dropRatiosPerPack":
		list := []uint64{}
		return protoreflect.ValueOfList(&_BoosterPack_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.BoosterPack"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.BoosterPack does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BoosterPack) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cardchain.cardchain.BoosterPack", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BoosterPack) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BoosterPack) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BoosterPack) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BoosterPack) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BoosterPack)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.SetId != 0 {
			n += 1 + runtime.Sov(uint64(x.SetId))
		}
		if x.TimeStamp != 0 {
			n += 1 + runtime.Sov(uint64(x.TimeStamp))
		}
		if len(x.RaritiesPerPack) > 0 {
			l = 0
			for _, e := range x.RaritiesPerPack {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if len(x.DropRatiosPerPack) > 0 {
			l = 0
			for _, e := range x.DropRatiosPerPack {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BoosterPack)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.DropRatiosPerPack) > 0 {
			var pksize2 int
			for _, num := range x.DropRatiosPerPack {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.DropRatiosPerPack {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x22
		}
		if len(x.RaritiesPerPack) > 0 {
			var pksize4 int
			for _, num := range x.RaritiesPerPack {
				pksize4 += runtime.Sov(uint64(num))
			}
			i -= pksize4
			j3 := i
			for _, num := range x.RaritiesPerPack {
				for num >= 1<<7 {
					dAtA[j3] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j3++
				}
				dAtA[j3] = uint8(num)
				j3++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize4))
			i--
			dAtA[i] = 0x1a
		}
		if x.TimeStamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TimeStamp))
			i--
			dAtA[i] = 0x10
		}
		if x.SetId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SetId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BoosterPack)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BoosterPack: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BoosterPack: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
				}
				x.SetId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SetId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
				}
				x.TimeStamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TimeStamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.RaritiesPerPack = append(x.RaritiesPerPack, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.RaritiesPerPack) == 0 {
						x.RaritiesPerPack = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.RaritiesPerPack = append(x.RaritiesPerPack, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RaritiesPerPack", wireType)
				}
			case 4:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.DropRatiosPerPack = append(x.DropRatiosPerPack, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.DropRatiosPerPack) == 0 {
						x.DropRatiosPerPack = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.DropRatiosPerPack = append(x.DropRatiosPerPack, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DropRatiosPerPack", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_AirDrops        protoreflect.MessageDescriptor
	fd_AirDrops_vote   protoreflect.FieldDescriptor
	fd_AirDrops_create protoreflect.FieldDescriptor
	fd_AirDrops_buy    protoreflect.FieldDescriptor
	fd_AirDrops_play   protoreflect.FieldDescriptor
	fd_AirDrops_user   protoreflect.FieldDescriptor
)

func init() {
	file_cardchain_cardchain_user_proto_init()
	md_AirDrops = File_cardchain_cardchain_user_proto.Messages().ByName("AirDrops")
	fd_AirDrops_vote = md_AirDrops.Fields().ByName("vote")
	fd_AirDrops_create = md_AirDrops.Fields().ByName("create")
	fd_AirDrops_buy = md_AirDrops.Fields().ByName("buy")
	fd_AirDrops_play = md_AirDrops.Fields().ByName("play")
	fd_AirDrops_user = md_AirDrops.Fields().ByName("user")
}

var _ protoreflect.Message = (*fastReflection_AirDrops)(nil)

type fastReflection_AirDrops AirDrops

func (x *AirDrops) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AirDrops)(x)
}

func (x *AirDrops) slowProtoReflect() protoreflect.Message {
	mi := &file_cardchain_cardchain_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AirDrops_messageType fastReflection_AirDrops_messageType
var _ protoreflect.MessageType = fastReflection_AirDrops_messageType{}

type fastReflection_AirDrops_messageType struct{}

func (x fastReflection_AirDrops_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AirDrops)(nil)
}
func (x fastReflection_AirDrops_messageType) New() protoreflect.Message {
	return new(fastReflection_AirDrops)
}
func (x fastReflection_AirDrops_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AirDrops
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AirDrops) Descriptor() protoreflect.MessageDescriptor {
	return md_AirDrops
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AirDrops) Type() protoreflect.MessageType {
	return _fastReflection_AirDrops_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AirDrops) New() protoreflect.Message {
	return new(fastReflection_AirDrops)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AirDrops) Interface() protoreflect.ProtoMessage {
	return (*AirDrops)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AirDrops) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Vote != false {
		value := protoreflect.ValueOfBool(x.Vote)
		if !f(fd_AirDrops_vote, value) {
			return
		}
	}
	if x.Create != false {
		value := protoreflect.ValueOfBool(x.Create)
		if !f(fd_AirDrops_create, value) {
			return
		}
	}
	if x.Buy != false {
		value := protoreflect.ValueOfBool(x.Buy)
		if !f(fd_AirDrops_buy, value) {
			return
		}
	}
	if x.Play != false {
		value := protoreflect.ValueOfBool(x.Play)
		if !f(fd_AirDrops_play, value) {
			return
		}
	}
	if x.User != false {
		value := protoreflect.ValueOfBool(x.User)
		if !f(fd_AirDrops_user, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AirDrops) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cardchain.cardchain.AirDrops.vote":
		return x.Vote != false
	case "cardchain.cardchain.AirDrops.create":
		return x.Create != false
	case "cardchain.cardchain.AirDrops.buy":
		return x.Buy != false
	case "cardchain.cardchain.AirDrops.play":
		return x.Play != false
	case "cardchain.cardchain.AirDrops.user":
		return x.User != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.AirDrops"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.AirDrops does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AirDrops) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cardchain.cardchain.AirDrops.vote":
		x.Vote = false
	case "cardchain.cardchain.AirDrops.create":
		x.Create = false
	case "cardchain.cardchain.AirDrops.buy":
		x.Buy = false
	case "cardchain.cardchain.AirDrops.play":
		x.Play = false
	case "cardchain.cardchain.AirDrops.user":
		x.User = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.AirDrops"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.AirDrops does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AirDrops) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cardchain.cardchain.AirDrops.vote":
		value := x.Vote
		return protoreflect.ValueOfBool(value)
	case "cardchain.cardchain.AirDrops.create":
		value := x.Create
		return protoreflect.ValueOfBool(value)
	case "cardchain.cardchain.AirDrops.buy":
		value := x.Buy
		return protoreflect.ValueOfBool(value)
	case "cardchain.cardchain.AirDrops.play":
		value := x.Play
		return protoreflect.ValueOfBool(value)
	case "cardchain.cardchain.AirDrops.user":
		value := x.User
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.AirDrops"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.AirDrops does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AirDrops) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cardchain.cardchain.AirDrops.vote":
		x.Vote = value.Bool()
	case "cardchain.cardchain.AirDrops.create":
		x.Create = value.Bool()
	case "cardchain.cardchain.AirDrops.buy":
		x.Buy = value.Bool()
	case "cardchain.cardchain.AirDrops.play":
		x.Play = value.Bool()
	case "cardchain.cardchain.AirDrops.user":
		x.User = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.AirDrops"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.AirDrops does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AirDrops) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.AirDrops.vote":
		panic(fmt.Errorf("field vote of message cardchain.cardchain.AirDrops is not mutable"))
	case "cardchain.cardchain.AirDrops.create":
		panic(fmt.Errorf("field create of message cardchain.cardchain.AirDrops is not mutable"))
	case "cardchain.cardchain.AirDrops.buy":
		panic(fmt.Errorf("field buy of message cardchain.cardchain.AirDrops is not mutable"))
	case "cardchain.cardchain.AirDrops.play":
		panic(fmt.Errorf("field play of message cardchain.cardchain.AirDrops is not mutable"))
	case "cardchain.cardchain.AirDrops.user":
		panic(fmt.Errorf("field user of message cardchain.cardchain.AirDrops is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.AirDrops"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.AirDrops does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AirDrops) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.AirDrops.vote":
		return protoreflect.ValueOfBool(false)
	case "cardchain.cardchain.AirDrops.create":
		return protoreflect.ValueOfBool(false)
	case "cardchain.cardchain.AirDrops.buy":
		return protoreflect.ValueOfBool(false)
	case "cardchain.cardchain.AirDrops.play":
		return protoreflect.ValueOfBool(false)
	case "cardchain.cardchain.AirDrops.user":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.AirDrops"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.AirDrops does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AirDrops) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cardchain.cardchain.AirDrops", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AirDrops) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AirDrops) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AirDrops) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AirDrops) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AirDrops)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Vote {
			n += 2
		}
		if x.Create {
			n += 2
		}
		if x.Buy {
			n += 2
		}
		if x.Play {
			n += 2
		}
		if x.User {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AirDrops)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.User {
			i--
			if x.User {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.Play {
			i--
			if x.Play {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if x.Buy {
			i--
			if x.Buy {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.Create {
			i--
			if x.Create {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if x.Vote {
			i--
			if x.Vote {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AirDrops)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AirDrops: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AirDrops: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Vote = bool(v != 0)
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Create", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Create = bool(v != 0)
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Buy = bool(v != 0)
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Play", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Play = bool(v != 0)
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.User = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: cardchain/cardchain/user.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CouncilStatus int32

const (
	CouncilStatus_available      CouncilStatus = 0
	CouncilStatus_unavailable    CouncilStatus = 1
	CouncilStatus_openCouncil    CouncilStatus = 2
	CouncilStatus_startedCouncil CouncilStatus = 3
)

// Enum value maps for CouncilStatus.
var (
	CouncilStatus_name = map[int32]string{
		0: "available",
		1: "unavailable",
		2: "openCouncil",
		3: "startedCouncil",
	}
	CouncilStatus_value = map[string]int32{
		"available":      0,
		"unavailable":    1,
		"openCouncil":    2,
		"startedCouncil": 3,
	}
)

func (x CouncilStatus) Enum() *CouncilStatus {
	p := new(CouncilStatus)
	*p = x
	return p
}

func (x CouncilStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouncilStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cardchain_cardchain_user_proto_enumTypes[0].Descriptor()
}

func (CouncilStatus) Type() protoreflect.EnumType {
	return &file_cardchain_cardchain_user_proto_enumTypes[0]
}

func (x CouncilStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouncilStatus.Descriptor instead.
func (CouncilStatus) EnumDescriptor() ([]byte, []int) {
	return file_cardchain_cardchain_user_proto_rawDescGZIP(), []int{0}
}

type AirDrop int32

const (
	AirDrop_play   AirDrop = 0
	AirDrop_vote   AirDrop = 1
	AirDrop_create AirDrop = 2
	AirDrop_buy    AirDrop = 3
	AirDrop_user   AirDrop = 4
)

// Enum value maps for AirDrop.
var (
	AirDrop_name = map[int32]string{
		0: "play",
		1: "vote",
		2: "create",
		3: "buy",
		4: "user",
	}
	AirDrop_value = map[string]int32{
		"play":   0,
		"vote":   1,
		"create": 2,
		"buy":    3,
		"user":   4,
	}
)

func (x AirDrop) Enum() *AirDrop {
	p := new(AirDrop)
	*p = x
	return p
}

func (x AirDrop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirDrop) Descriptor() protoreflect.EnumDescriptor {
	return file_cardchain_cardchain_user_proto_enumTypes[1].Descriptor()
}

func (AirDrop) Type() protoreflect.EnumType {
	return &file_cardchain_cardchain_user_proto_enumTypes[1]
}

func (x AirDrop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirDrop.Descriptor instead.
func (AirDrop) EnumDescriptor() ([]byte, []int) {
	return file_cardchain_cardchain_user_proto_rawDescGZIP(), []int{1}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias            string         `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	OwnedCardSchemes []uint64       `protobuf:"varint,2,rep,packed,name=ownedCardSchemes,proto3" json:"ownedCardSchemes,omitempty"`
	OwnedPrototypes  []uint64       `protobuf:"varint,3,rep,packed,name=ownedPrototypes,proto3" json:"ownedPrototypes,omitempty"`
	Cards            []uint64       `protobuf:"varint,4,rep,packed,name=cards,proto3" json:"cards,omitempty"`
	CouncilStatus    CouncilStatus  `protobuf:"varint,6,opt,name=CouncilStatus,proto3,enum=cardchain.cardchain.CouncilStatus" json:"CouncilStatus,omitempty"`
	ReportMatches    bool           `protobuf:"varint,7,opt,name=ReportMatches,proto3" json:"ReportMatches,omitempty"`
	ProfileCard      uint64         `protobuf:"varint,8,opt,name=profileCard,proto3" json:"profileCard,omitempty"`
	AirDrops         *AirDrops      `protobuf:"bytes,9,opt,name=airDrops,proto3" json:"airDrops,omitempty"`
	BoosterPacks     []*BoosterPack `protobuf:"bytes,10,rep,name=boosterPacks,proto3" json:"boosterPacks,omitempty"`
	Website          string         `protobuf:"bytes,11,opt,name=website,proto3" json:"website,omitempty"`
	Biography        string         `protobuf:"bytes,12,opt,name=biography,proto3" json:"biography,omitempty"`
	VotableCards     []uint64       `protobuf:"varint,13,rep,packed,name=votableCards,proto3" json:"votableCards,omitempty"`
	VotedCards       []uint64       `protobuf:"varint,14,rep,packed,name=votedCards,proto3" json:"votedCards,omitempty"`
	EarlyAccess      *EarlyAccess   `protobuf:"bytes,15,opt,name=earlyAccess,proto3" json:"earlyAccess,omitempty"`
	OpenEncounters   []uint64       `protobuf:"varint,16,rep,packed,name=OpenEncounters,proto3" json:"OpenEncounters,omitempty"`
	WonEncounters    []uint64       `protobuf:"varint,17,rep,packed,name=WonEncounters,proto3" json:"WonEncounters,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardchain_cardchain_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cardchain_cardchain_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *User) GetOwnedCardSchemes() []uint64 {
	if x != nil {
		return x.OwnedCardSchemes
	}
	return nil
}

func (x *User) GetOwnedPrototypes() []uint64 {
	if x != nil {
		return x.OwnedPrototypes
	}
	return nil
}

func (x *User) GetCards() []uint64 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *User) GetCouncilStatus() CouncilStatus {
	if x != nil {
		return x.CouncilStatus
	}
	return CouncilStatus_available
}

func (x *User) GetReportMatches() bool {
	if x != nil {
		return x.ReportMatches
	}
	return false
}

func (x *User) GetProfileCard() uint64 {
	if x != nil {
		return x.ProfileCard
	}
	return 0
}

func (x *User) GetAirDrops() *AirDrops {
	if x != nil {
		return x.AirDrops
	}
	return nil
}

func (x *User) GetBoosterPacks() []*BoosterPack {
	if x != nil {
		return x.BoosterPacks
	}
	return nil
}

func (x *User) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *User) GetBiography() string {
	if x != nil {
		return x.Biography
	}
	return ""
}

func (x *User) GetVotableCards() []uint64 {
	if x != nil {
		return x.VotableCards
	}
	return nil
}

func (x *User) GetVotedCards() []uint64 {
	if x != nil {
		return x.VotedCards
	}
	return nil
}

func (x *User) GetEarlyAccess() *EarlyAccess {
	if x != nil {
		return x.EarlyAccess
	}
	return nil
}

func (x *User) GetOpenEncounters() []uint64 {
	if x != nil {
		return x.OpenEncounters
	}
	return nil
}

func (x *User) GetWonEncounters() []uint64 {
	if x != nil {
		return x.WonEncounters
	}
	return nil
}

type EarlyAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active        bool   `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	InvitedByUser string `protobuf:"bytes,2,opt,name=invitedByUser,proto3" json:"invitedByUser,omitempty"`
	InvitedUser   string `protobuf:"bytes,3,opt,name=invitedUser,proto3" json:"invitedUser,omitempty"`
}

func (x *EarlyAccess) Reset() {
	*x = EarlyAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardchain_cardchain_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarlyAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlyAccess) ProtoMessage() {}

// Deprecated: Use EarlyAccess.ProtoReflect.Descriptor instead.
func (*EarlyAccess) Descriptor() ([]byte, []int) {
	return file_cardchain_cardchain_user_proto_rawDescGZIP(), []int{1}
}

func (x *EarlyAccess) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *EarlyAccess) GetInvitedByUser() string {
	if x != nil {
		return x.InvitedByUser
	}
	return ""
}

func (x *EarlyAccess) GetInvitedUser() string {
	if x != nil {
		return x.InvitedUser
	}
	return ""
}

type BoosterPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId     uint64 `protobuf:"varint,1,opt,name=setId,proto3" json:"setId,omitempty"`
	TimeStamp int64  `protobuf:"varint,2,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	// How often the different rarities will appear in a BoosterPack
	RaritiesPerPack []uint64 `protobuf:"varint,3,rep,packed,name=raritiesPerPack,proto3" json:"raritiesPerPack,omitempty"`
	// The chances of the rare beeing a normal rare, an exceptional or a unique
	DropRatiosPerPack []uint64 `protobuf:"varint,4,rep,packed,name=dropRatiosPerPack,proto3" json:"dropRatiosPerPack,omitempty"`
}

func (x *BoosterPack) Reset() {
	*x = BoosterPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardchain_cardchain_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoosterPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoosterPack) ProtoMessage() {}

// Deprecated: Use BoosterPack.ProtoReflect.Descriptor instead.
func (*BoosterPack) Descriptor() ([]byte, []int) {
	return file_cardchain_cardchain_user_proto_rawDescGZIP(), []int{2}
}

func (x *BoosterPack) GetSetId() uint64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

func (x *BoosterPack) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *BoosterPack) GetRaritiesPerPack() []uint64 {
	if x != nil {
		return x.RaritiesPerPack
	}
	return nil
}

func (x *BoosterPack) GetDropRatiosPerPack() []uint64 {
	if x != nil {
		return x.DropRatiosPerPack
	}
	return nil
}

type AirDrops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote   bool `protobuf:"varint,1,opt,name=vote,proto3" json:"vote,omitempty"`
	Create bool `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
	Buy    bool `protobuf:"varint,3,opt,name=buy,proto3" json:"buy,omitempty"`
	Play   bool `protobuf:"varint,4,opt,name=play,proto3" json:"play,omitempty"`
	User   bool `protobuf:"varint,5,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AirDrops) Reset() {
	*x = AirDrops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardchain_cardchain_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirDrops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirDrops) ProtoMessage() {}

// Deprecated: Use AirDrops.ProtoReflect.Descriptor instead.
func (*AirDrops) Descriptor() ([]byte, []int) {
	return file_cardchain_cardchain_user_proto_rawDescGZIP(), []int{3}
}

func (x *AirDrops) GetVote() bool {
	if x != nil {
		return x.Vote
	}
	return false
}

func (x *AirDrops) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *AirDrops) GetBuy() bool {
	if x != nil {
		return x.Buy
	}
	return false
}

func (x *AirDrops) GetPlay() bool {
	if x != nil {
		return x.Play
	}
	return false
}

func (x *AirDrops) GetUser() bool {
	if x != nil {
		return x.User
	}
	return false
}

var File_cardchain_cardchain_user_proto protoreflect.FileDescriptor

var file_cardchain_cardchain_user_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x20, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x05, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x77, 0x6e,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x43,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x69, 0x72,
	0x44, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x08, 0x61, 0x69, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x44, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x76, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x61, 0x72,
	0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x4f,
	0x70, 0x65, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x57, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x57, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x61, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0f, 0x72, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x50, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11, 0x64, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x22, 0x70,
	0x0a, 0x08, 0x41, 0x69, 0x72, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x2a, 0x54, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x63, 0x69, 0x6c, 0x10, 0x03, 0x2a, 0x3c, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x44, 0x72, 0x6f,
	0x70, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x10, 0x04, 0x42, 0xd1, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x42, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0xa2, 0x02, 0x03,
	0x43, 0x43, 0x58, 0xaa, 0x02, 0x13, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0xca, 0x02, 0x13, 0x43, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0xe2,
	0x02, 0x1f, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x14, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x43,
	0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cardchain_cardchain_user_proto_rawDescOnce sync.Once
	file_cardchain_cardchain_user_proto_rawDescData = file_cardchain_cardchain_user_proto_rawDesc
)

func file_cardchain_cardchain_user_proto_rawDescGZIP() []byte {
	file_cardchain_cardchain_user_proto_rawDescOnce.Do(func() {
		file_cardchain_cardchain_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_cardchain_cardchain_user_proto_rawDescData)
	})
	return file_cardchain_cardchain_user_proto_rawDescData
}

var file_cardchain_cardchain_user_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cardchain_cardchain_user_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cardchain_cardchain_user_proto_goTypes = []interface{}{
	(CouncilStatus)(0),  // 0: cardchain.cardchain.CouncilStatus
	(AirDrop)(0),        // 1: cardchain.cardchain.AirDrop
	(*User)(nil),        // 2: cardchain.cardchain.User
	(*EarlyAccess)(nil), // 3: cardchain.cardchain.EarlyAccess
	(*BoosterPack)(nil), // 4: cardchain.cardchain.BoosterPack
	(*AirDrops)(nil),    // 5: cardchain.cardchain.AirDrops
}
var file_cardchain_cardchain_user_proto_depIdxs = []int32{
	0, // 0: cardchain.cardchain.User.CouncilStatus:type_name -> cardchain.cardchain.CouncilStatus
	5, // 1: cardchain.cardchain.User.airDrops:type_name -> cardchain.cardchain.AirDrops
	4, // 2: cardchain.cardchain.User.boosterPacks:type_name -> cardchain.cardchain.BoosterPack
	3, // 3: cardchain.cardchain.User.earlyAccess:type_name -> cardchain.cardchain.EarlyAccess
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cardchain_cardchain_user_proto_init() }
func file_cardchain_cardchain_user_proto_init() {
	if File_cardchain_cardchain_user_proto != nil {
		return
	}
	file_cardchain_cardchain_voting_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cardchain_cardchain_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardchain_cardchain_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarlyAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardchain_cardchain_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoosterPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardchain_cardchain_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirDrops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cardchain_cardchain_user_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cardchain_cardchain_user_proto_goTypes,
		DependencyIndexes: file_cardchain_cardchain_user_proto_depIdxs,
		EnumInfos:         file_cardchain_cardchain_user_proto_enumTypes,
		MessageInfos:      file_cardchain_cardchain_user_proto_msgTypes,
	}.Build()
	File_cardchain_cardchain_user_proto = out.File
	file_cardchain_cardchain_user_proto_rawDesc = nil
	file_cardchain_cardchain_user_proto_goTypes = nil
	file_cardchain_cardchain_user_proto_depIdxs = nil
}
