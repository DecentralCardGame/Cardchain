// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package cardchain

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var (
	md_Match                  protoreflect.MessageDescriptor
	fd_Match_timestamp        protoreflect.FieldDescriptor
	fd_Match_reporter         protoreflect.FieldDescriptor
	fd_Match_playerA          protoreflect.FieldDescriptor
	fd_Match_playerB          protoreflect.FieldDescriptor
	fd_Match_outcome          protoreflect.FieldDescriptor
	fd_Match_coinsDistributed protoreflect.FieldDescriptor
	fd_Match_serverConfirmed  protoreflect.FieldDescriptor
)

func init() {
	file_cardchain_cardchain_match_proto_init()
	md_Match = File_cardchain_cardchain_match_proto.Messages().ByName("Match")
	fd_Match_timestamp = md_Match.Fields().ByName("timestamp")
	fd_Match_reporter = md_Match.Fields().ByName("reporter")
	fd_Match_playerA = md_Match.Fields().ByName("playerA")
	fd_Match_playerB = md_Match.Fields().ByName("playerB")
	fd_Match_outcome = md_Match.Fields().ByName("outcome")
	fd_Match_coinsDistributed = md_Match.Fields().ByName("coinsDistributed")
	fd_Match_serverConfirmed = md_Match.Fields().ByName("serverConfirmed")
}

var _ protoreflect.Message = (*fastReflection_Match)(nil)

type fastReflection_Match Match

func (x *Match) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Match)(x)
}

func (x *Match) slowProtoReflect() protoreflect.Message {
	mi := &file_cardchain_cardchain_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Match_messageType fastReflection_Match_messageType
var _ protoreflect.MessageType = fastReflection_Match_messageType{}

type fastReflection_Match_messageType struct{}

func (x fastReflection_Match_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Match)(nil)
}
func (x fastReflection_Match_messageType) New() protoreflect.Message {
	return new(fastReflection_Match)
}
func (x fastReflection_Match_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Match
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Match) Descriptor() protoreflect.MessageDescriptor {
	return md_Match
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Match) Type() protoreflect.MessageType {
	return _fastReflection_Match_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Match) New() protoreflect.Message {
	return new(fastReflection_Match)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Match) Interface() protoreflect.ProtoMessage {
	return (*Match)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Match) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Timestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timestamp)
		if !f(fd_Match_timestamp, value) {
			return
		}
	}
	if x.Reporter != "" {
		value := protoreflect.ValueOfString(x.Reporter)
		if !f(fd_Match_reporter, value) {
			return
		}
	}
	if x.PlayerA != nil {
		value := protoreflect.ValueOfMessage(x.PlayerA.ProtoReflect())
		if !f(fd_Match_playerA, value) {
			return
		}
	}
	if x.PlayerB != nil {
		value := protoreflect.ValueOfMessage(x.PlayerB.ProtoReflect())
		if !f(fd_Match_playerB, value) {
			return
		}
	}
	if x.Outcome != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Outcome))
		if !f(fd_Match_outcome, value) {
			return
		}
	}
	if x.CoinsDistributed != false {
		value := protoreflect.ValueOfBool(x.CoinsDistributed)
		if !f(fd_Match_coinsDistributed, value) {
			return
		}
	}
	if x.ServerConfirmed != false {
		value := protoreflect.ValueOfBool(x.ServerConfirmed)
		if !f(fd_Match_serverConfirmed, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Match) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cardchain.cardchain.Match.timestamp":
		return x.Timestamp != uint64(0)
	case "cardchain.cardchain.Match.reporter":
		return x.Reporter != ""
	case "cardchain.cardchain.Match.playerA":
		return x.PlayerA != nil
	case "cardchain.cardchain.Match.playerB":
		return x.PlayerB != nil
	case "cardchain.cardchain.Match.outcome":
		return x.Outcome != 0
	case "cardchain.cardchain.Match.coinsDistributed":
		return x.CoinsDistributed != false
	case "cardchain.cardchain.Match.serverConfirmed":
		return x.ServerConfirmed != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Match"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Match does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Match) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cardchain.cardchain.Match.timestamp":
		x.Timestamp = uint64(0)
	case "cardchain.cardchain.Match.reporter":
		x.Reporter = ""
	case "cardchain.cardchain.Match.playerA":
		x.PlayerA = nil
	case "cardchain.cardchain.Match.playerB":
		x.PlayerB = nil
	case "cardchain.cardchain.Match.outcome":
		x.Outcome = 0
	case "cardchain.cardchain.Match.coinsDistributed":
		x.CoinsDistributed = false
	case "cardchain.cardchain.Match.serverConfirmed":
		x.ServerConfirmed = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Match"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Match does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Match) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cardchain.cardchain.Match.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfUint64(value)
	case "cardchain.cardchain.Match.reporter":
		value := x.Reporter
		return protoreflect.ValueOfString(value)
	case "cardchain.cardchain.Match.playerA":
		value := x.PlayerA
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.Match.playerB":
		value := x.PlayerB
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cardchain.cardchain.Match.outcome":
		value := x.Outcome
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "cardchain.cardchain.Match.coinsDistributed":
		value := x.CoinsDistributed
		return protoreflect.ValueOfBool(value)
	case "cardchain.cardchain.Match.serverConfirmed":
		value := x.ServerConfirmed
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Match"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Match does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Match) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cardchain.cardchain.Match.timestamp":
		x.Timestamp = value.Uint()
	case "cardchain.cardchain.Match.reporter":
		x.Reporter = value.Interface().(string)
	case "cardchain.cardchain.Match.playerA":
		x.PlayerA = value.Message().Interface().(*MatchPlayer)
	case "cardchain.cardchain.Match.playerB":
		x.PlayerB = value.Message().Interface().(*MatchPlayer)
	case "cardchain.cardchain.Match.outcome":
		x.Outcome = (Outcome)(value.Enum())
	case "cardchain.cardchain.Match.coinsDistributed":
		x.CoinsDistributed = value.Bool()
	case "cardchain.cardchain.Match.serverConfirmed":
		x.ServerConfirmed = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Match"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Match does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Match) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.Match.playerA":
		if x.PlayerA == nil {
			x.PlayerA = new(MatchPlayer)
		}
		return protoreflect.ValueOfMessage(x.PlayerA.ProtoReflect())
	case "cardchain.cardchain.Match.playerB":
		if x.PlayerB == nil {
			x.PlayerB = new(MatchPlayer)
		}
		return protoreflect.ValueOfMessage(x.PlayerB.ProtoReflect())
	case "cardchain.cardchain.Match.timestamp":
		panic(fmt.Errorf("field timestamp of message cardchain.cardchain.Match is not mutable"))
	case "cardchain.cardchain.Match.reporter":
		panic(fmt.Errorf("field reporter of message cardchain.cardchain.Match is not mutable"))
	case "cardchain.cardchain.Match.outcome":
		panic(fmt.Errorf("field outcome of message cardchain.cardchain.Match is not mutable"))
	case "cardchain.cardchain.Match.coinsDistributed":
		panic(fmt.Errorf("field coinsDistributed of message cardchain.cardchain.Match is not mutable"))
	case "cardchain.cardchain.Match.serverConfirmed":
		panic(fmt.Errorf("field serverConfirmed of message cardchain.cardchain.Match is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Match"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Match does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Match) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.Match.timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cardchain.cardchain.Match.reporter":
		return protoreflect.ValueOfString("")
	case "cardchain.cardchain.Match.playerA":
		m := new(MatchPlayer)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.Match.playerB":
		m := new(MatchPlayer)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cardchain.cardchain.Match.outcome":
		return protoreflect.ValueOfEnum(0)
	case "cardchain.cardchain.Match.coinsDistributed":
		return protoreflect.ValueOfBool(false)
	case "cardchain.cardchain.Match.serverConfirmed":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.Match"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.Match does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Match) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cardchain.cardchain.Match", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Match) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Match) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Match) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Match) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Match)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		l = len(x.Reporter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PlayerA != nil {
			l = options.Size(x.PlayerA)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PlayerB != nil {
			l = options.Size(x.PlayerB)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Outcome != 0 {
			n += 1 + runtime.Sov(uint64(x.Outcome))
		}
		if x.CoinsDistributed {
			n += 2
		}
		if x.ServerConfirmed {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Match)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CoinsDistributed {
			i--
			if x.CoinsDistributed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x50
		}
		if x.ServerConfirmed {
			i--
			if x.ServerConfirmed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.Outcome != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Outcome))
			i--
			dAtA[i] = 0x38
		}
		if x.PlayerB != nil {
			encoded, err := options.Marshal(x.PlayerB)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.PlayerA != nil {
			encoded, err := options.Marshal(x.PlayerA)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Reporter) > 0 {
			i -= len(x.Reporter)
			copy(dAtA[i:], x.Reporter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Reporter)))
			i--
			dAtA[i] = 0x12
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Match)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Match: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Match: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Reporter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlayerA", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PlayerA == nil {
					x.PlayerA = &MatchPlayer{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PlayerA); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlayerB", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PlayerB == nil {
					x.PlayerB = &MatchPlayer{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PlayerB); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
				}
				x.Outcome = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Outcome |= Outcome(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CoinsDistributed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.CoinsDistributed = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ServerConfirmed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.ServerConfirmed = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MatchPlayer_2_list)(nil)

type _MatchPlayer_2_list struct {
	list *[]uint64
}

func (x *_MatchPlayer_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MatchPlayer_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_MatchPlayer_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_MatchPlayer_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_MatchPlayer_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MatchPlayer at list field PlayedCards as it is not of Message kind"))
}

func (x *_MatchPlayer_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MatchPlayer_2_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_MatchPlayer_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_MatchPlayer_5_list)(nil)

type _MatchPlayer_5_list struct {
	list *[]uint64
}

func (x *_MatchPlayer_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MatchPlayer_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_MatchPlayer_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_MatchPlayer_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_MatchPlayer_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MatchPlayer at list field Deck as it is not of Message kind"))
}

func (x *_MatchPlayer_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MatchPlayer_5_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_MatchPlayer_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_MatchPlayer_6_list)(nil)

type _MatchPlayer_6_list struct {
	list *[]*SingleVote
}

func (x *_MatchPlayer_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MatchPlayer_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MatchPlayer_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SingleVote)
	(*x.list)[i] = concreteValue
}

func (x *_MatchPlayer_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SingleVote)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MatchPlayer_6_list) AppendMutable() protoreflect.Value {
	v := new(SingleVote)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MatchPlayer_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MatchPlayer_6_list) NewElement() protoreflect.Value {
	v := new(SingleVote)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MatchPlayer_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MatchPlayer             protoreflect.MessageDescriptor
	fd_MatchPlayer_addr        protoreflect.FieldDescriptor
	fd_MatchPlayer_playedCards protoreflect.FieldDescriptor
	fd_MatchPlayer_confirmed   protoreflect.FieldDescriptor
	fd_MatchPlayer_outcome     protoreflect.FieldDescriptor
	fd_MatchPlayer_deck        protoreflect.FieldDescriptor
	fd_MatchPlayer_votedCards  protoreflect.FieldDescriptor
)

func init() {
	file_cardchain_cardchain_match_proto_init()
	md_MatchPlayer = File_cardchain_cardchain_match_proto.Messages().ByName("MatchPlayer")
	fd_MatchPlayer_addr = md_MatchPlayer.Fields().ByName("addr")
	fd_MatchPlayer_playedCards = md_MatchPlayer.Fields().ByName("playedCards")
	fd_MatchPlayer_confirmed = md_MatchPlayer.Fields().ByName("confirmed")
	fd_MatchPlayer_outcome = md_MatchPlayer.Fields().ByName("outcome")
	fd_MatchPlayer_deck = md_MatchPlayer.Fields().ByName("deck")
	fd_MatchPlayer_votedCards = md_MatchPlayer.Fields().ByName("votedCards")
}

var _ protoreflect.Message = (*fastReflection_MatchPlayer)(nil)

type fastReflection_MatchPlayer MatchPlayer

func (x *MatchPlayer) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MatchPlayer)(x)
}

func (x *MatchPlayer) slowProtoReflect() protoreflect.Message {
	mi := &file_cardchain_cardchain_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MatchPlayer_messageType fastReflection_MatchPlayer_messageType
var _ protoreflect.MessageType = fastReflection_MatchPlayer_messageType{}

type fastReflection_MatchPlayer_messageType struct{}

func (x fastReflection_MatchPlayer_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MatchPlayer)(nil)
}
func (x fastReflection_MatchPlayer_messageType) New() protoreflect.Message {
	return new(fastReflection_MatchPlayer)
}
func (x fastReflection_MatchPlayer_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MatchPlayer
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MatchPlayer) Descriptor() protoreflect.MessageDescriptor {
	return md_MatchPlayer
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MatchPlayer) Type() protoreflect.MessageType {
	return _fastReflection_MatchPlayer_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MatchPlayer) New() protoreflect.Message {
	return new(fastReflection_MatchPlayer)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MatchPlayer) Interface() protoreflect.ProtoMessage {
	return (*MatchPlayer)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MatchPlayer) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Addr != "" {
		value := protoreflect.ValueOfString(x.Addr)
		if !f(fd_MatchPlayer_addr, value) {
			return
		}
	}
	if len(x.PlayedCards) != 0 {
		value := protoreflect.ValueOfList(&_MatchPlayer_2_list{list: &x.PlayedCards})
		if !f(fd_MatchPlayer_playedCards, value) {
			return
		}
	}
	if x.Confirmed != false {
		value := protoreflect.ValueOfBool(x.Confirmed)
		if !f(fd_MatchPlayer_confirmed, value) {
			return
		}
	}
	if x.Outcome != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Outcome))
		if !f(fd_MatchPlayer_outcome, value) {
			return
		}
	}
	if len(x.Deck) != 0 {
		value := protoreflect.ValueOfList(&_MatchPlayer_5_list{list: &x.Deck})
		if !f(fd_MatchPlayer_deck, value) {
			return
		}
	}
	if len(x.VotedCards) != 0 {
		value := protoreflect.ValueOfList(&_MatchPlayer_6_list{list: &x.VotedCards})
		if !f(fd_MatchPlayer_votedCards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MatchPlayer) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cardchain.cardchain.MatchPlayer.addr":
		return x.Addr != ""
	case "cardchain.cardchain.MatchPlayer.playedCards":
		return len(x.PlayedCards) != 0
	case "cardchain.cardchain.MatchPlayer.confirmed":
		return x.Confirmed != false
	case "cardchain.cardchain.MatchPlayer.outcome":
		return x.Outcome != 0
	case "cardchain.cardchain.MatchPlayer.deck":
		return len(x.Deck) != 0
	case "cardchain.cardchain.MatchPlayer.votedCards":
		return len(x.VotedCards) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.MatchPlayer"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.MatchPlayer does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MatchPlayer) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cardchain.cardchain.MatchPlayer.addr":
		x.Addr = ""
	case "cardchain.cardchain.MatchPlayer.playedCards":
		x.PlayedCards = nil
	case "cardchain.cardchain.MatchPlayer.confirmed":
		x.Confirmed = false
	case "cardchain.cardchain.MatchPlayer.outcome":
		x.Outcome = 0
	case "cardchain.cardchain.MatchPlayer.deck":
		x.Deck = nil
	case "cardchain.cardchain.MatchPlayer.votedCards":
		x.VotedCards = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.MatchPlayer"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.MatchPlayer does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MatchPlayer) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cardchain.cardchain.MatchPlayer.addr":
		value := x.Addr
		return protoreflect.ValueOfString(value)
	case "cardchain.cardchain.MatchPlayer.playedCards":
		if len(x.PlayedCards) == 0 {
			return protoreflect.ValueOfList(&_MatchPlayer_2_list{})
		}
		listValue := &_MatchPlayer_2_list{list: &x.PlayedCards}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.MatchPlayer.confirmed":
		value := x.Confirmed
		return protoreflect.ValueOfBool(value)
	case "cardchain.cardchain.MatchPlayer.outcome":
		value := x.Outcome
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "cardchain.cardchain.MatchPlayer.deck":
		if len(x.Deck) == 0 {
			return protoreflect.ValueOfList(&_MatchPlayer_5_list{})
		}
		listValue := &_MatchPlayer_5_list{list: &x.Deck}
		return protoreflect.ValueOfList(listValue)
	case "cardchain.cardchain.MatchPlayer.votedCards":
		if len(x.VotedCards) == 0 {
			return protoreflect.ValueOfList(&_MatchPlayer_6_list{})
		}
		listValue := &_MatchPlayer_6_list{list: &x.VotedCards}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.MatchPlayer"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.MatchPlayer does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MatchPlayer) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cardchain.cardchain.MatchPlayer.addr":
		x.Addr = value.Interface().(string)
	case "cardchain.cardchain.MatchPlayer.playedCards":
		lv := value.List()
		clv := lv.(*_MatchPlayer_2_list)
		x.PlayedCards = *clv.list
	case "cardchain.cardchain.MatchPlayer.confirmed":
		x.Confirmed = value.Bool()
	case "cardchain.cardchain.MatchPlayer.outcome":
		x.Outcome = (Outcome)(value.Enum())
	case "cardchain.cardchain.MatchPlayer.deck":
		lv := value.List()
		clv := lv.(*_MatchPlayer_5_list)
		x.Deck = *clv.list
	case "cardchain.cardchain.MatchPlayer.votedCards":
		lv := value.List()
		clv := lv.(*_MatchPlayer_6_list)
		x.VotedCards = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.MatchPlayer"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.MatchPlayer does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MatchPlayer) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.MatchPlayer.playedCards":
		if x.PlayedCards == nil {
			x.PlayedCards = []uint64{}
		}
		value := &_MatchPlayer_2_list{list: &x.PlayedCards}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.MatchPlayer.deck":
		if x.Deck == nil {
			x.Deck = []uint64{}
		}
		value := &_MatchPlayer_5_list{list: &x.Deck}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.MatchPlayer.votedCards":
		if x.VotedCards == nil {
			x.VotedCards = []*SingleVote{}
		}
		value := &_MatchPlayer_6_list{list: &x.VotedCards}
		return protoreflect.ValueOfList(value)
	case "cardchain.cardchain.MatchPlayer.addr":
		panic(fmt.Errorf("field addr of message cardchain.cardchain.MatchPlayer is not mutable"))
	case "cardchain.cardchain.MatchPlayer.confirmed":
		panic(fmt.Errorf("field confirmed of message cardchain.cardchain.MatchPlayer is not mutable"))
	case "cardchain.cardchain.MatchPlayer.outcome":
		panic(fmt.Errorf("field outcome of message cardchain.cardchain.MatchPlayer is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.MatchPlayer"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.MatchPlayer does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MatchPlayer) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cardchain.cardchain.MatchPlayer.addr":
		return protoreflect.ValueOfString("")
	case "cardchain.cardchain.MatchPlayer.playedCards":
		list := []uint64{}
		return protoreflect.ValueOfList(&_MatchPlayer_2_list{list: &list})
	case "cardchain.cardchain.MatchPlayer.confirmed":
		return protoreflect.ValueOfBool(false)
	case "cardchain.cardchain.MatchPlayer.outcome":
		return protoreflect.ValueOfEnum(0)
	case "cardchain.cardchain.MatchPlayer.deck":
		list := []uint64{}
		return protoreflect.ValueOfList(&_MatchPlayer_5_list{list: &list})
	case "cardchain.cardchain.MatchPlayer.votedCards":
		list := []*SingleVote{}
		return protoreflect.ValueOfList(&_MatchPlayer_6_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cardchain.cardchain.MatchPlayer"))
		}
		panic(fmt.Errorf("message cardchain.cardchain.MatchPlayer does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MatchPlayer) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cardchain.cardchain.MatchPlayer", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MatchPlayer) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MatchPlayer) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MatchPlayer) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MatchPlayer) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MatchPlayer)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Addr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PlayedCards) > 0 {
			l = 0
			for _, e := range x.PlayedCards {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.Confirmed {
			n += 2
		}
		if x.Outcome != 0 {
			n += 1 + runtime.Sov(uint64(x.Outcome))
		}
		if len(x.Deck) > 0 {
			l = 0
			for _, e := range x.Deck {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if len(x.VotedCards) > 0 {
			for _, e := range x.VotedCards {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MatchPlayer)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.VotedCards) > 0 {
			for iNdEx := len(x.VotedCards) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.VotedCards[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.Deck) > 0 {
			var pksize2 int
			for _, num := range x.Deck {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.Deck {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x2a
		}
		if x.Outcome != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Outcome))
			i--
			dAtA[i] = 0x20
		}
		if x.Confirmed {
			i--
			if x.Confirmed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if len(x.PlayedCards) > 0 {
			var pksize4 int
			for _, num := range x.PlayedCards {
				pksize4 += runtime.Sov(uint64(num))
			}
			i -= pksize4
			j3 := i
			for _, num := range x.PlayedCards {
				for num >= 1<<7 {
					dAtA[j3] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j3++
				}
				dAtA[j3] = uint8(num)
				j3++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize4))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Addr) > 0 {
			i -= len(x.Addr)
			copy(dAtA[i:], x.Addr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Addr)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MatchPlayer)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MatchPlayer: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MatchPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Addr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.PlayedCards = append(x.PlayedCards, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.PlayedCards) == 0 {
						x.PlayedCards = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.PlayedCards = append(x.PlayedCards, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlayedCards", wireType)
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Confirmed = bool(v != 0)
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
				}
				x.Outcome = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Outcome |= Outcome(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Deck = append(x.Deck, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Deck) == 0 {
						x.Deck = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Deck = append(x.Deck, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Deck", wireType)
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VotedCards", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VotedCards = append(x.VotedCards, &SingleVote{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VotedCards[len(x.VotedCards)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: cardchain/cardchain/match.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Outcome int32

const (
	Outcome_AWon    Outcome = 0
	Outcome_BWon    Outcome = 1
	Outcome_Draw    Outcome = 2
	Outcome_Aborted Outcome = 3
)

// Enum value maps for Outcome.
var (
	Outcome_name = map[int32]string{
		0: "AWon",
		1: "BWon",
		2: "Draw",
		3: "Aborted",
	}
	Outcome_value = map[string]int32{
		"AWon":    0,
		"BWon":    1,
		"Draw":    2,
		"Aborted": 3,
	}
)

func (x Outcome) Enum() *Outcome {
	p := new(Outcome)
	*p = x
	return p
}

func (x Outcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Outcome) Descriptor() protoreflect.EnumDescriptor {
	return file_cardchain_cardchain_match_proto_enumTypes[0].Descriptor()
}

func (Outcome) Type() protoreflect.EnumType {
	return &file_cardchain_cardchain_match_proto_enumTypes[0]
}

func (x Outcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Outcome.Descriptor instead.
func (Outcome) EnumDescriptor() ([]byte, []int) {
	return file_cardchain_cardchain_match_proto_rawDescGZIP(), []int{0}
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp        uint64       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reporter         string       `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	PlayerA          *MatchPlayer `protobuf:"bytes,3,opt,name=playerA,proto3" json:"playerA,omitempty"`
	PlayerB          *MatchPlayer `protobuf:"bytes,4,opt,name=playerB,proto3" json:"playerB,omitempty"`
	Outcome          Outcome      `protobuf:"varint,7,opt,name=outcome,proto3,enum=cardchain.cardchain.Outcome" json:"outcome,omitempty"`
	CoinsDistributed bool         `protobuf:"varint,10,opt,name=coinsDistributed,proto3" json:"coinsDistributed,omitempty"`
	ServerConfirmed  bool         `protobuf:"varint,8,opt,name=serverConfirmed,proto3" json:"serverConfirmed,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardchain_cardchain_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_cardchain_cardchain_match_proto_rawDescGZIP(), []int{0}
}

func (x *Match) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Match) GetReporter() string {
	if x != nil {
		return x.Reporter
	}
	return ""
}

func (x *Match) GetPlayerA() *MatchPlayer {
	if x != nil {
		return x.PlayerA
	}
	return nil
}

func (x *Match) GetPlayerB() *MatchPlayer {
	if x != nil {
		return x.PlayerB
	}
	return nil
}

func (x *Match) GetOutcome() Outcome {
	if x != nil {
		return x.Outcome
	}
	return Outcome_AWon
}

func (x *Match) GetCoinsDistributed() bool {
	if x != nil {
		return x.CoinsDistributed
	}
	return false
}

func (x *Match) GetServerConfirmed() bool {
	if x != nil {
		return x.ServerConfirmed
	}
	return false
}

type MatchPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr        string        `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	PlayedCards []uint64      `protobuf:"varint,2,rep,packed,name=playedCards,proto3" json:"playedCards,omitempty"`
	Confirmed   bool          `protobuf:"varint,3,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Outcome     Outcome       `protobuf:"varint,4,opt,name=outcome,proto3,enum=cardchain.cardchain.Outcome" json:"outcome,omitempty"`
	Deck        []uint64      `protobuf:"varint,5,rep,packed,name=deck,proto3" json:"deck,omitempty"`
	VotedCards  []*SingleVote `protobuf:"bytes,6,rep,name=votedCards,proto3" json:"votedCards,omitempty"`
}

func (x *MatchPlayer) Reset() {
	*x = MatchPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardchain_cardchain_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPlayer) ProtoMessage() {}

// Deprecated: Use MatchPlayer.ProtoReflect.Descriptor instead.
func (*MatchPlayer) Descriptor() ([]byte, []int) {
	return file_cardchain_cardchain_match_proto_rawDescGZIP(), []int{1}
}

func (x *MatchPlayer) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *MatchPlayer) GetPlayedCards() []uint64 {
	if x != nil {
		return x.PlayedCards
	}
	return nil
}

func (x *MatchPlayer) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *MatchPlayer) GetOutcome() Outcome {
	if x != nil {
		return x.Outcome
	}
	return Outcome_AWon
}

func (x *MatchPlayer) GetDeck() []uint64 {
	if x != nil {
		return x.Deck
	}
	return nil
}

func (x *MatchPlayer) GetVotedCards() []*SingleVote {
	if x != nil {
		return x.VotedCards
	}
	return nil
}

var File_cardchain_cardchain_match_proto protoreflect.FileDescriptor

var file_cardchain_cardchain_match_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x20, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x05, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x69, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x64, 0x65,
	0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x2a, 0x34, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x57, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x57, 0x6f, 0x6e,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03, 0x42, 0xd2, 0x01, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x44, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x13, 0x43, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0xca,
	0x02, 0x13, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x61, 0x72, 0x64,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0xe2, 0x02, 0x1f, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5c, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x43, 0x61, 0x72, 0x64, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cardchain_cardchain_match_proto_rawDescOnce sync.Once
	file_cardchain_cardchain_match_proto_rawDescData = file_cardchain_cardchain_match_proto_rawDesc
)

func file_cardchain_cardchain_match_proto_rawDescGZIP() []byte {
	file_cardchain_cardchain_match_proto_rawDescOnce.Do(func() {
		file_cardchain_cardchain_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_cardchain_cardchain_match_proto_rawDescData)
	})
	return file_cardchain_cardchain_match_proto_rawDescData
}

var file_cardchain_cardchain_match_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cardchain_cardchain_match_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cardchain_cardchain_match_proto_goTypes = []interface{}{
	(Outcome)(0),        // 0: cardchain.cardchain.Outcome
	(*Match)(nil),       // 1: cardchain.cardchain.Match
	(*MatchPlayer)(nil), // 2: cardchain.cardchain.MatchPlayer
	(*SingleVote)(nil),  // 3: cardchain.cardchain.SingleVote
}
var file_cardchain_cardchain_match_proto_depIdxs = []int32{
	2, // 0: cardchain.cardchain.Match.playerA:type_name -> cardchain.cardchain.MatchPlayer
	2, // 1: cardchain.cardchain.Match.playerB:type_name -> cardchain.cardchain.MatchPlayer
	0, // 2: cardchain.cardchain.Match.outcome:type_name -> cardchain.cardchain.Outcome
	0, // 3: cardchain.cardchain.MatchPlayer.outcome:type_name -> cardchain.cardchain.Outcome
	3, // 4: cardchain.cardchain.MatchPlayer.votedCards:type_name -> cardchain.cardchain.SingleVote
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_cardchain_cardchain_match_proto_init() }
func file_cardchain_cardchain_match_proto_init() {
	if File_cardchain_cardchain_match_proto != nil {
		return
	}
	file_cardchain_cardchain_voting_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cardchain_cardchain_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardchain_cardchain_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cardchain_cardchain_match_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cardchain_cardchain_match_proto_goTypes,
		DependencyIndexes: file_cardchain_cardchain_match_proto_depIdxs,
		EnumInfos:         file_cardchain_cardchain_match_proto_enumTypes,
		MessageInfos:      file_cardchain_cardchain_match_proto_msgTypes,
	}.Build()
	File_cardchain_cardchain_match_proto = out.File
	file_cardchain_cardchain_match_proto_rawDesc = nil
	file_cardchain_cardchain_match_proto_goTypes = nil
	file_cardchain_cardchain_match_proto_depIdxs = nil
}
