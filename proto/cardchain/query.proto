syntax = "proto3";
package DecentralCardGame.cardchain.cardchain;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cardchain/params.proto";
import "cardchain/vote_right.proto";
import "cardchain/voting_results.proto";
import "cardchain/card.proto";
import "cardchain/user.proto";
import "cardchain/collection.proto";
import "cardchain/tx.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/DecentralCardGame/Cardchain/x/cardchain/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/params";
  }
  // Queries a list of QCard items.
	rpc QCard(QueryQCardRequest) returns (QueryQCardResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_card/{cardId}";
	}

// Queries a list of QCardContent items.
	rpc QCardContent(QueryQCardContentRequest) returns (QueryQCardContentResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_card_content/{cardId}";
	}

// Queries a list of QUser items.
	rpc QUser(QueryQUserRequest) returns (QueryQUserResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_user/{address}";
	}

// Queries a list of QCardchainInfo items.
	rpc QCardchainInfo(QueryQCardchainInfoRequest) returns (QueryQCardchainInfoResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_cardchain_info";
	}

// Queries a list of QVotingResults items.
	rpc QVotingResults(QueryQVotingResultsRequest) returns (QueryQVotingResultsResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_voting_results";
	}

// Queries a list of QVotableCards items.
	rpc QVotableCards(QueryQVotableCardsRequest) returns (QueryQVotableCardsResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_votable_cards/{address}";
	}

// Queries a list of QCards items.
	rpc QCards(QueryQCardsRequest) returns (QueryQCardsResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_cards/{owner}/{status}/{cardType}/{classes}/{sortBy}/{nameContains}/{keywordsContains}/{notesContains}";
	}

// Queries a list of QMatch items.
	rpc QMatch(QueryQMatchRequest) returns (QueryQMatchResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_match/{matchId}";
	}

// Queries a list of QCollection items.
	rpc QCollection(QueryQCollectionRequest) returns (QueryQCollectionResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_collection/{collectionId}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryQCardRequest {
  string cardId = 1;
}

message QueryQCardResponse {
  string owner = 1;
  string content = 2;
  string artist = 3;
  string image = 4;
  bool fullArt = 5;
  string notes = 6;
  Status status = 7;
  string votePool = 8 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];;
  uint64 fairEnoughVotes = 9;
  uint64 overpoweredVotes = 10;
  uint64 underpoweredVotes = 11;
  uint64 inappropriateVotes = 12;
  int64 nerflevel = 13;
}

message QueryQCardContentRequest {
  string cardId = 1;
}

message QueryQCardContentResponse {
  string content = 1;
}

message QueryQUserRequest {
  string address = 1;
}

message QueryQUserResponse {
  string alias = 1;
  repeated uint64 ownedCardSchemes = 2;
  repeated uint64 ownedPrototypes = 3;
  repeated uint64 cards = 4;
  repeated VoteRight voteRights = 5;
  CouncilStatus councilStatus = 6;
  bool reportMatches = 7;
}

message QueryQCardchainInfoRequest {
}

message QueryQCardchainInfoResponse {
  string cardAuctionPrice = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];;
}

message QueryQVotingResultsRequest {
}

message QueryQVotingResultsResponse {
  VotingResults lastVotingResults = 1;
}

message QueryQVotableCardsRequest {
  string address = 1;
}

message QueryQVotableCardsResponse {
  bool unregistered = 1;
  bool noVoteRights = 2;
  repeated VoteRight voteRights = 3;
}

message QueryQCardsRequest {
  string owner = 1;
  Status status = 2;
  string cardType = 3;
  string classes = 4;
  string sortBy = 5;
  string nameContains = 6;
  string keywordsContains = 7;
  string notesContains = 8;
}

message QueryQCardsResponse {
  repeated uint64 cardsList = 1;
}

message QueryQMatchRequest {
  uint64 matchId = 1;
}

message QueryQMatchResponse {
  uint64 timestamp = 1;
  string reporter = 2;
  string playerA = 3;
  string playerB = 4;
  Outcome outcome = 5;
}

message QueryQCollectionRequest {
  uint64 collectionId = 1;
}

message QueryQCollectionResponse {
  string name = 1;
  repeated uint64 cards = 2;
  repeated string contributors = 3;
  string story = 4;
  bytes artwork = 5;
  CStatus status = 6;
}

// this line is used by starport scaffolding # 3
