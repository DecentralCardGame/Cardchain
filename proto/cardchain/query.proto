syntax = "proto3";
package DecentralCardGame.cardchain.cardchain;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cardchain/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/DecentralCardGame/Cardchain/x/cardchain/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/params";
  }
  // Queries a list of QCard items.
	rpc QCard(QueryQCardRequest) returns (QueryQCardResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_card/{cardId}";
	}

// Queries a list of QCardContent items.
	rpc QCardContent(QueryQCardContentRequest) returns (QueryQCardContentResponse) {
		option (google.api.http).get = "/DecentralCardGame/cardchain/cardchain/q_card_content/{cardId}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryQCardRequest {
  string cardId = 1;
}

message QueryQCardResponse {
  bytes card = 1;
}

message QueryQCardContentRequest {
  string cardId = 1;
}

message QueryQCardContentResponse {
  bytes content = 1;
}

// this line is used by starport scaffolding # 3
