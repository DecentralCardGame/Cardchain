syntax = "proto3";
package DecentralCardGame.cardchain.cardchain;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cardchain/cardchain/params.proto";
import "cardchain/cardchain/voting.proto";
import "cardchain/cardchain/card.proto";
import "cardchain/cardchain/user.proto";
import "cardchain/cardchain/match.proto";
import "cardchain/cardchain/set.proto";
import "cardchain/cardchain/sell_offer.proto";
import "cardchain/cardchain/council.proto";
import "cardchain/cardchain/server.proto";
import "cardchain/cardchain/tx.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/DecentralCardGame/Cardchain/x/cardchain/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/params";
  }
  // Queries a list of QCard items.
	rpc QCard(QueryQCardRequest) returns (OutpCard) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_card/{cardId}";
	}

// Queries a list of QCardContent items.
	rpc QCardContent(QueryQCardContentRequest) returns (QueryQCardContentResponse) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_card_content/{cardId}";
	}

// Queries a list of QUser items.
	rpc QUser(QueryQUserRequest) returns (User) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_user/{address}";
	}

// Queries a list of QCardchainInfo items.
	rpc QCardchainInfo(QueryQCardchainInfoRequest) returns (QueryQCardchainInfoResponse) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_cardchain_info";
	}

// Queries a list of QVotingResults items.
	rpc QVotingResults(QueryQVotingResultsRequest) returns (QueryQVotingResultsResponse) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_voting_results";
	}

// Queries a list of QCards items.
	rpc QCards(QueryQCardsRequest) returns (QueryQCardsResponse) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_cards/{status}";
	}

// Queries a list of QMatch items.
	rpc QMatch(QueryQMatchRequest) returns (Match) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_match/{matchId}";
	}

// Queries a list of QSet items.
	rpc QSet(QueryQSetRequest) returns (OutpSet) {
option (google.api.http).get =
"/DecentralCardGame/Cardchain/cardchain/q_set/{setId}"; }

// Queries a list of QSellOffer items.
	rpc QSellOffer(QueryQSellOfferRequest) returns (SellOffer) { option
(google.api.http).get =
"/DecentralCardGame/Cardchain/cardchain/q_sell_offer/{sellOfferId}"; }

// Queries a list of QCouncil items.
	rpc QCouncil(QueryQCouncilRequest) returns (Council) { option
(google.api.http).get =
"/DecentralCardGame/Cardchain/cardchain/q_council/{councilId}"; }

// Queries a list of QMatches items.
	rpc QMatches(QueryQMatchesRequest) returns (QueryQMatchesResponse) {
option (google.api.http).get =
"/DecentralCardGame/Cardchain/cardchain/q_matches"; }

// Queries a list of QSellOffers items.
	rpc QSellOffers(QueryQSellOffersRequest) returns
(QueryQSellOffersResponse) { option (google.api.http).get =
"/DecentralCardGame/Cardchain/cardchain/q_sell_offers/{status}"; }

// Queries a list of QServer items.
	rpc QServer(QueryQServerRequest) returns (Server) { option
(google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_server/{id}";
}

// Queries a list of QSets items.
	rpc QSets(QueryQSetsRequest) returns (QueryQSetsResponse) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/q_sets/{status}/{ignoreStatus}";
	}

// Queries a list of RarityDistribution items.
	rpc RarityDistribution(QueryRarityDistributionRequest) returns (QueryRarityDistributionResponse) {
		option (google.api.http).get = "/DecentralCardGame/Cardchain/cardchain/rarity_distribution/{setId}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryQCardRequest {
  string cardId = 1;
}

message QueryQCardContentRequest {
  string cardId = 1;
}

message QueryQCardContentResponse {
  string content = 1;
  string hash = 2;
}

message QueryQUserRequest {
  string address = 1;
}

message QueryQCardchainInfoRequest {
}

message QueryQCardchainInfoResponse {
  string cardAuctionPrice = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];;
  repeated uint64 activeSets = 2;
  uint64 cardsNumber = 3;
  uint64 matchesNumber = 4;
  uint64 sellOffersNumber = 5;
  uint64 councilsNumber = 6;
  uint64 lastCardModified = 7;
}

message QueryQVotingResultsRequest {
}

message QueryQVotingResultsResponse {
  VotingResults lastVotingResults = 1;
}

message QueryQCardsRequest {
  enum Status {
    scheme = 0;
    prototype = 1;
    trial = 2;
    permanent = 3;
    suspended = 4;
    banned = 5;
    bannedSoon = 6;
    bannedVerySoon = 7;
    none = 8;
    playable = 9;
    unplayable = 10;
  }
  string owner = 1;
  Status status = 2;
  string cardType = 3;
  string classes = 4;
  string sortBy = 5;
  string nameContains = 6;
  string keywordsContains = 7;
  string notesContains = 8;
  bool onlyStarterCard = 9;
  bool onlyBalanceAnchors = 10;
}

message QueryQCardsResponse {
  repeated uint64 cardsList = 1;
}

message QueryQMatchRequest {
  uint64 matchId = 1;
}

message QueryQSetRequest {
  uint64 setId = 1;
}

message QueryQSellOfferRequest {
  uint64 sellOfferId = 1;
}

message QueryQCouncilRequest {
  uint64 councilId = 1;
}

message QueryQMatchesRequest {
  uint64 timestampDown = 1;
  uint64 timestampUp = 2;
  repeated string containsUsers = 3;
  string reporter = 4;
  Outcome outcome = 5;
  repeated uint64 cardsPlayed = 6;
  IgnoreMatches ignore = 7;
}

message IgnoreMatches {
  bool outcome = 1;
}

message QueryQMatchesResponse {
  repeated uint64 matchesList = 1;
  repeated Match matches = 2;
}

/* message QueryQSellOffersRequest {
  message Query {
    string priceDown = 1;
    string priceUp = 2;
    string seller = 3;
    string buyer = 4;
    uint64 card = 5;
    SellOfferStatus status = 6;
  }
  Query query = 1;
} */

message QueryQSellOffersRequest {
  string priceDown = 1;
  string priceUp = 2;
  string seller = 3;
  string buyer = 4;
  uint64 card = 5;
  SellOfferStatus status = 6;
  IgnoreSellOffers ignore = 7;
}

message IgnoreSellOffers {
  bool status = 1;
  bool card = 2 ;
}

message QueryQSellOffersResponse {
  repeated uint64 sellOffersIds = 1;
  repeated SellOffer sellOffers = 2;
}

message QueryQServerRequest {
  uint64 id = 1;
}

message QueryQServerResponse {
}

message QueryQSetsRequest {
   CStatus status = 1;
   bool ignoreStatus = 2;
   repeated string contributors = 3;
   repeated uint64 containsCards = 4;
   string owner = 5;
}

message QueryQSetsResponse {
   repeated uint64 setIds = 1;
}

message QueryRarityDistributionRequest {
   uint64 setId = 1;
}

message QueryRarityDistributionResponse {
   repeated uint32 current = 1;
   repeated uint32 wanted = 2;
}

// this line is used by starport scaffolding # 3
