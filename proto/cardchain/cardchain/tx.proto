syntax = "proto3";

package cardchain.cardchain;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "cardchain/cardchain/params.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cardchain/cardchain/voting.proto";
import "cardchain/cardchain/match.proto";
import "cardchain/cardchain/council.proto";
import "cardchain/cardchain/card.proto";

option go_package = "github.com/DecentralCardGame/cardchain/x/cardchain/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc UserCreate(MsgUserCreate) returns (MsgUserCreateResponse);
  rpc CardSchemeBuy(MsgCardSchemeBuy) returns (MsgCardSchemeBuyResponse);
  rpc CardSaveContent(MsgCardSaveContent) returns (MsgCardSaveContentResponse);
  rpc CardVote(MsgCardVote) returns (MsgCardVoteResponse);
  rpc CardTransfer(MsgCardTransfer) returns (MsgCardTransferResponse);
  rpc CardDonate(MsgCardDonate) returns (MsgCardDonateResponse);
  rpc CardArtworkAdd(MsgCardArtworkAdd) returns (MsgCardArtworkAddResponse);
  rpc CardArtistChange(MsgCardArtistChange)
      returns (MsgCardArtistChangeResponse);
  rpc CouncilRegister(MsgCouncilRegister) returns (MsgCouncilRegisterResponse);
  rpc CouncilDeregister(MsgCouncilDeregister)
      returns (MsgCouncilDeregisterResponse);
  rpc MatchReport(MsgMatchReport) returns (MsgMatchReportResponse);
  rpc CouncilCreate(MsgCouncilCreate) returns (MsgCouncilCreateResponse);
  rpc MatchReporterAppoint(MsgMatchReporterAppoint)
      returns (MsgMatchReporterAppointResponse);
  rpc SetCreate(MsgSetCreate) returns (MsgSetCreateResponse);
  rpc SetCardAdd(MsgSetCardAdd) returns (MsgSetCardAddResponse);
  rpc SetCardRemove(MsgSetCardRemove) returns (MsgSetCardRemoveResponse);
  rpc SetContributorAdd(MsgSetContributorAdd)
      returns (MsgSetContributorAddResponse);
  rpc SetContributorRemove(MsgSetContributorRemove)
      returns (MsgSetContributorRemoveResponse);
  rpc SetFinalize(MsgSetFinalize) returns (MsgSetFinalizeResponse);
  rpc SetArtworkAdd(MsgSetArtworkAdd) returns (MsgSetArtworkAddResponse);
  rpc SetStoryAdd(MsgSetStoryAdd) returns (MsgSetStoryAddResponse);
  rpc BoosterPackBuy(MsgBoosterPackBuy) returns (MsgBoosterPackBuyResponse);
  rpc SellOfferCreate(MsgSellOfferCreate) returns (MsgSellOfferCreateResponse);
  rpc SellOfferBuy(MsgSellOfferBuy) returns (MsgSellOfferBuyResponse);
  rpc SellOfferRemove(MsgSellOfferRemove) returns (MsgSellOfferRemoveResponse);
  rpc CardRaritySet(MsgCardRaritySet) returns (MsgCardRaritySetResponse);
  rpc CouncilResponseCommit(MsgCouncilResponseCommit)
      returns (MsgCouncilResponseCommitResponse);
  rpc CouncilResponseReveal(MsgCouncilResponseReveal)
      returns (MsgCouncilResponseRevealResponse);
  rpc CouncilRestart(MsgCouncilRestart) returns (MsgCouncilRestartResponse);
  rpc MatchConfirm(MsgMatchConfirm) returns (MsgMatchConfirmResponse);
  rpc ProfileCardSet(MsgProfileCardSet) returns (MsgProfileCardSetResponse);
  rpc ProfileWebsiteSet(MsgProfileWebsiteSet)
      returns (MsgProfileWebsiteSetResponse);
  rpc ProfileBioSet(MsgProfileBioSet) returns (MsgProfileBioSetResponse);
  rpc BoosterPackOpen(MsgBoosterPackOpen) returns (MsgBoosterPackOpenResponse);
  rpc BoosterPackTransfer(MsgBoosterPackTransfer)
      returns (MsgBoosterPackTransferResponse);
  rpc SetStoryWriterSet(MsgSetStoryWriterSet)
      returns (MsgSetStoryWriterSetResponse);
  rpc SetArtistSet(MsgSetArtistSet) returns (MsgSetArtistSetResponse);
  rpc CardVoteMulti(MsgCardVoteMulti) returns (MsgCardVoteMultiResponse);
  rpc MatchOpen(MsgMatchOpen) returns (MsgMatchOpenResponse);
  rpc SetNameSet(MsgSetNameSet) returns (MsgSetNameSetResponse);
  rpc ProfileAliasSet(MsgProfileAliasSet) returns (MsgProfileAliasSetResponse);
  rpc EarlyAccessInvite(MsgEarlyAccessInvite)
      returns (MsgEarlyAccessInviteResponse);
  rpc ZealyConnect(MsgZealyConnect) returns (MsgZealyConnectResponse);
  rpc EncounterCreate(MsgEncounterCreate) returns (MsgEncounterCreateResponse);
  rpc EncounterDo(MsgEncounterDo) returns (MsgEncounterDoResponse);
  rpc EncounterClose(MsgEncounterClose) returns (MsgEncounterCloseResponse);
  rpc EarlyAccessDisinvite(MsgEarlyAccessDisinvite)
      returns (MsgEarlyAccessDisinviteResponse);
  rpc CardBan(MsgCardBan) returns (MsgCardBanResponse);
  rpc EarlyAccessGrant(MsgEarlyAccessGrant)
      returns (MsgEarlyAccessGrantResponse);
  rpc SetActivate(MsgSetActivate) returns (MsgSetActivateResponse);
  rpc CardCopyrightClaim(MsgCardCopyrightClaim)
      returns (MsgCardCopyrightClaimResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "cardchain/x/cardchain/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgUserCreate {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string newUser = 2;
  string alias = 3;
}

message MsgUserCreateResponse {}

message MsgCardSchemeBuy {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  cosmos.base.v1beta1.Coin bid = 2 [ (gogoproto.nullable) = false ];
}

message MsgCardSchemeBuyResponse { uint64 cardId = 1; }

message MsgCardSaveContent {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
  bytes content = 3;
  string notes = 4;
  string artist = 5;
  bool balanceAnchor = 6;
}

message MsgCardSaveContentResponse { bool airdropClaimed = 1; }

message MsgCardVote {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  SingleVote vote = 2;
}

message MsgCardVoteResponse { bool airdropClaimed = 1; }

message MsgCardTransfer {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
  string receiver = 3;
}

message MsgCardTransferResponse {}

message MsgCardDonate {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
  cosmos.base.v1beta1.Coin amount = 3 [ (gogoproto.nullable) = false ];
}

message MsgCardDonateResponse {}

message MsgCardArtworkAdd {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
  bytes image = 3;
  bool fullArt = 4;
}

message MsgCardArtworkAddResponse {}

message MsgCardArtistChange {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
  string artist = 3;
}

message MsgCardArtistChangeResponse {}

message MsgCouncilRegister {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
}

message MsgCouncilRegisterResponse {}

message MsgCouncilDeregister {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
}

message MsgCouncilDeregisterResponse {}

message MsgMatchReport {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 matchId = 2;
  repeated uint64 playedCardsA = 3;
  repeated uint64 playedCardsB = 4;
  Outcome outcome = 5;
}

message MsgMatchReportResponse {}

message MsgCouncilCreate {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
}

message MsgCouncilCreateResponse {}

message MsgMatchReporterAppoint {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string reporter = 2;
}

message MsgMatchReporterAppointResponse {}

message MsgSetCreate {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string name = 2;
  string artist = 3;
  string storyWriter = 4;
  repeated string contributors = 5;
}

message MsgSetCreateResponse {}

message MsgSetCardAdd {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  uint64 cardId = 3;
}

message MsgSetCardAddResponse {}

message MsgSetCardRemove {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  uint64 cardId = 3;
}

message MsgSetCardRemoveResponse {}

message MsgSetContributorAdd {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  string user = 3;
}

message MsgSetContributorAddResponse {}

message MsgSetContributorRemove {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  string user = 3;
}

message MsgSetContributorRemoveResponse {}

message MsgSetFinalize {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
}

message MsgSetFinalizeResponse {}

message MsgSetArtworkAdd {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  bytes image = 3;
}

message MsgSetArtworkAddResponse {}

message MsgSetStoryAdd {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  string story = 3;
}

message MsgSetStoryAddResponse {}

message MsgBoosterPackBuy {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
}

message MsgBoosterPackBuyResponse { bool airdropClaimed = 1; }

message MsgSellOfferCreate {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
  cosmos.base.v1beta1.Coin price = 3 [ (gogoproto.nullable) = false ];
}

message MsgSellOfferCreateResponse {}

message MsgSellOfferBuy {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 sellOfferId = 2;
}

message MsgSellOfferBuyResponse {}

message MsgSellOfferRemove {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 sellOfferId = 2;
}

message MsgSellOfferRemoveResponse {}

message MsgCardRaritySet {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
  uint64 setId = 3;
  CardRarity rarity = 4;
}

message MsgCardRaritySetResponse {}

message MsgCouncilResponseCommit {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 councilId = 2;
  string response = 3;
  string suggestion = 4;
}

message MsgCouncilResponseCommitResponse {}

message MsgCouncilResponseReveal {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 councilId = 2;
  Response response = 3;
  string secret = 4;
}

message MsgCouncilResponseRevealResponse {}

message MsgCouncilRestart {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 councilId = 2;
}

message MsgCouncilRestartResponse {}

message MsgMatchConfirm {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 matchId = 2;
  Outcome outcome = 3;
  repeated SingleVote votedCards = 4;
}

message MsgMatchConfirmResponse {}

message MsgProfileCardSet {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 cardId = 2;
}

message MsgProfileCardSetResponse {}

message MsgProfileWebsiteSet {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string website = 2;
}

message MsgProfileWebsiteSetResponse {}

message MsgProfileBioSet {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string bio = 2;
}

message MsgProfileBioSetResponse {}

message MsgBoosterPackOpen {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 boosterPackId = 2;
}

message MsgBoosterPackOpenResponse { repeated uint64 cardIds = 1; }

message MsgBoosterPackTransfer {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 boosterPackId = 2;
  string receiver = 3;
}

message MsgBoosterPackTransferResponse {}

message MsgSetStoryWriterSet {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  string storyWriter = 3;
}

message MsgSetStoryWriterSetResponse {}

message MsgSetArtistSet {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  string artist = 3;
}

message MsgSetArtistSetResponse {}

message MsgCardVoteMulti {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  repeated SingleVote votes = 2;
}

message MsgCardVoteMultiResponse { bool airdropClaimed = 1; }

message MsgMatchOpen {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string playerA = 2;
  string playerB = 3;
  repeated uint64 playerADeck = 4;
  repeated uint64 playerBDeck = 5;
}

message MsgMatchOpenResponse { uint64 matchId = 1; }

message MsgSetNameSet {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 setId = 2;
  string name = 3;
}

message MsgSetNameSetResponse {}

message MsgProfileAliasSet {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string alias = 2;
}

message MsgProfileAliasSetResponse {}

message MsgEarlyAccessInvite {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string user = 2;
}

message MsgEarlyAccessInviteResponse {}

message MsgZealyConnect {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string zealyId = 2;
}

message MsgZealyConnectResponse {}

message MsgEncounterCreate {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string name = 2;
  repeated uint64 drawlist = 3;
  map<string, string> parameters = 4;
  bytes image = 5;
}

message MsgEncounterCreateResponse {}

message MsgEncounterDo {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 encounterId = 2;
  string user = 3;
}

message MsgEncounterDoResponse {}

message MsgEncounterClose {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 encounterId = 2;
  string user = 3;
  bool won = 4;
}

message MsgEncounterCloseResponse {}

message MsgEarlyAccessDisinvite {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string user = 2;
}

message MsgEarlyAccessDisinviteResponse {}

message MsgCardBan {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 cardId = 2;
}

message MsgCardBanResponse {}

message MsgEarlyAccessGrant {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated string users = 2;
}

message MsgEarlyAccessGrantResponse {}

message MsgSetActivate {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 setId = 2;
}

message MsgSetActivateResponse {}

message MsgCardCopyrightClaim {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 cardId = 2;
}

message MsgCardCopyrightClaimResponse {}
