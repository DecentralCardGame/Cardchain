syntax = "proto3";

package decentralcardgame.cardchain.cardchain;

option go_package = "github.com/DecentralCardGame/cardchain/x/cardchain/types";

import "cardchain/cardchain/voting.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

// Msg defines the Msg service.
service Msg {
  rpc UserCreate(MsgUserCreate) returns (MsgUserCreateResponse);
  rpc CardSchemeBuy(MsgCardSchemeBuy) returns (MsgCardSchemeBuyResponse);
  rpc CardSaveContent(MsgCardSaveContent) returns (MsgCardSaveContentResponse);
  rpc CardVote(MsgCardVote) returns (MsgCardVoteResponse);
}
message MsgUserCreate {
  string creator = 1;
  string newUser = 2;
  string alias = 3;
}

message MsgUserCreateResponse {}

message MsgCardSchemeBuy {
  string creator = 1;
  cosmos.base.v1beta1.Coin bid = 2 [ (gogoproto.nullable) = false ];
}

message MsgCardSchemeBuyResponse { uint64 cardId = 1; }

message MsgCardSaveContent {
  string creator = 1;
  uint64 cardId = 2;
  string content = 3;
  string notes = 4;
  string artist = 5;
  bool balanceAnchor = 6;
}

message MsgCardSaveContentResponse { bool airdropClaimed = 1; }

message MsgCardVote {
  string creator = 1;
  SingleVote vote = 2;
}

message MsgCardVoteResponse { bool airdropClaimed = 1; }
