"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgCreateCouncil = exports.MsgDonateToCard = exports.MsgSetCollectionStoryWriter = exports.MsgSetProfileCard = exports.MsgChangeArtist = exports.MsgAddContributorToCollection = exports.MsgBuyCollection = exports.MsgRegisterForCouncil = exports.MsgSetCardRarity = exports.MsgCreateCollection = exports.MsgOpenBoosterPack = exports.MsgReportMatch = exports.MsgAddArtwork = exports.MsgCommitCouncilResponse = exports.MsgRemoveContributorFromCollection = exports.MsgSetUserWebsite = exports.MsgAddStoryToCollection = exports.MsgAddCardToCollection = exports.MsgVoteCard = exports.MsgSubmitMatchReporterProposal = exports.MsgConfirmMatch = exports.MsgSaveCardContent = exports.MsgFinalizeCollection = exports.MsgTransferCard = exports.MsgRestartCouncil = exports.MsgBuyCard = exports.MsgBuyCardScheme = exports.MsgCreateSellOffer = exports.MsgSubmitCollectionProposal = exports.MsgRewokeCouncilRegistration = exports.MsgRevealCouncilResponse = exports.MsgSetCollectionArtist = exports.MsgRemoveCardFromCollection = exports.MsgApointMatchReporter = exports.MsgCreateuser = exports.MsgAddArtworkToCollection = exports.MsgSubmitCopyrightProposal = exports.MsgTransferBoosterPack = exports.MsgSetUserBiography = exports.MsgRemoveSellOffer = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgRemoveSellOffer", { enumerable: true, get: function () { return tx_1.MsgRemoveSellOffer; } });
const tx_2 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSetUserBiography", { enumerable: true, get: function () { return tx_2.MsgSetUserBiography; } });
const tx_3 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgTransferBoosterPack", { enumerable: true, get: function () { return tx_3.MsgTransferBoosterPack; } });
const tx_4 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSubmitCopyrightProposal", { enumerable: true, get: function () { return tx_4.MsgSubmitCopyrightProposal; } });
const tx_5 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgAddArtworkToCollection", { enumerable: true, get: function () { return tx_5.MsgAddArtworkToCollection; } });
const tx_6 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgCreateuser", { enumerable: true, get: function () { return tx_6.MsgCreateuser; } });
const tx_7 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgApointMatchReporter", { enumerable: true, get: function () { return tx_7.MsgApointMatchReporter; } });
const tx_8 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgRemoveCardFromCollection", { enumerable: true, get: function () { return tx_8.MsgRemoveCardFromCollection; } });
const tx_9 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSetCollectionArtist", { enumerable: true, get: function () { return tx_9.MsgSetCollectionArtist; } });
const tx_10 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgRevealCouncilResponse", { enumerable: true, get: function () { return tx_10.MsgRevealCouncilResponse; } });
const tx_11 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgRewokeCouncilRegistration", { enumerable: true, get: function () { return tx_11.MsgRewokeCouncilRegistration; } });
const tx_12 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSubmitCollectionProposal", { enumerable: true, get: function () { return tx_12.MsgSubmitCollectionProposal; } });
const tx_13 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgCreateSellOffer", { enumerable: true, get: function () { return tx_13.MsgCreateSellOffer; } });
const tx_14 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgBuyCardScheme", { enumerable: true, get: function () { return tx_14.MsgBuyCardScheme; } });
const tx_15 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgBuyCard", { enumerable: true, get: function () { return tx_15.MsgBuyCard; } });
const tx_16 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgRestartCouncil", { enumerable: true, get: function () { return tx_16.MsgRestartCouncil; } });
const tx_17 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgTransferCard", { enumerable: true, get: function () { return tx_17.MsgTransferCard; } });
const tx_18 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgFinalizeCollection", { enumerable: true, get: function () { return tx_18.MsgFinalizeCollection; } });
const tx_19 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSaveCardContent", { enumerable: true, get: function () { return tx_19.MsgSaveCardContent; } });
const tx_20 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgConfirmMatch", { enumerable: true, get: function () { return tx_20.MsgConfirmMatch; } });
const tx_21 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSubmitMatchReporterProposal", { enumerable: true, get: function () { return tx_21.MsgSubmitMatchReporterProposal; } });
const tx_22 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgVoteCard", { enumerable: true, get: function () { return tx_22.MsgVoteCard; } });
const tx_23 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgAddCardToCollection", { enumerable: true, get: function () { return tx_23.MsgAddCardToCollection; } });
const tx_24 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgAddStoryToCollection", { enumerable: true, get: function () { return tx_24.MsgAddStoryToCollection; } });
const tx_25 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSetUserWebsite", { enumerable: true, get: function () { return tx_25.MsgSetUserWebsite; } });
const tx_26 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgRemoveContributorFromCollection", { enumerable: true, get: function () { return tx_26.MsgRemoveContributorFromCollection; } });
const tx_27 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgCommitCouncilResponse", { enumerable: true, get: function () { return tx_27.MsgCommitCouncilResponse; } });
const tx_28 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgAddArtwork", { enumerable: true, get: function () { return tx_28.MsgAddArtwork; } });
const tx_29 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgReportMatch", { enumerable: true, get: function () { return tx_29.MsgReportMatch; } });
const tx_30 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgOpenBoosterPack", { enumerable: true, get: function () { return tx_30.MsgOpenBoosterPack; } });
const tx_31 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgCreateCollection", { enumerable: true, get: function () { return tx_31.MsgCreateCollection; } });
const tx_32 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSetCardRarity", { enumerable: true, get: function () { return tx_32.MsgSetCardRarity; } });
const tx_33 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgRegisterForCouncil", { enumerable: true, get: function () { return tx_33.MsgRegisterForCouncil; } });
const tx_34 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgBuyCollection", { enumerable: true, get: function () { return tx_34.MsgBuyCollection; } });
const tx_35 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgAddContributorToCollection", { enumerable: true, get: function () { return tx_35.MsgAddContributorToCollection; } });
const tx_36 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgChangeArtist", { enumerable: true, get: function () { return tx_36.MsgChangeArtist; } });
const tx_37 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSetProfileCard", { enumerable: true, get: function () { return tx_37.MsgSetProfileCard; } });
const tx_38 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgSetCollectionStoryWriter", { enumerable: true, get: function () { return tx_38.MsgSetCollectionStoryWriter; } });
const tx_39 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgDonateToCard", { enumerable: true, get: function () { return tx_39.MsgDonateToCard; } });
const tx_40 = require("./types/cardchain/tx");
Object.defineProperty(exports, "MsgCreateCouncil", { enumerable: true, get: function () { return tx_40.MsgCreateCouncil; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgRemoveSellOffer({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRemoveSellOffer: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgRemoveSellOffer({ value: tx_1.MsgRemoveSellOffer.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRemoveSellOffer: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetUserBiography({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetUserBiography: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSetUserBiography({ value: tx_2.MsgSetUserBiography.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetUserBiography: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTransferBoosterPack({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTransferBoosterPack: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgTransferBoosterPack({ value: tx_3.MsgTransferBoosterPack.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTransferBoosterPack: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitCopyrightProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitCopyrightProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSubmitCopyrightProposal({ value: tx_4.MsgSubmitCopyrightProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitCopyrightProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAddArtworkToCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAddArtworkToCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgAddArtworkToCollection({ value: tx_5.MsgAddArtworkToCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAddArtworkToCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateuser({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateuser: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgCreateuser({ value: tx_6.MsgCreateuser.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateuser: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgApointMatchReporter({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgApointMatchReporter: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgApointMatchReporter({ value: tx_7.MsgApointMatchReporter.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgApointMatchReporter: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRemoveCardFromCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRemoveCardFromCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgRemoveCardFromCollection({ value: tx_8.MsgRemoveCardFromCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRemoveCardFromCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetCollectionArtist({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetCollectionArtist: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSetCollectionArtist({ value: tx_9.MsgSetCollectionArtist.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetCollectionArtist: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRevealCouncilResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRevealCouncilResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgRevealCouncilResponse({ value: tx_10.MsgRevealCouncilResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRevealCouncilResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRewokeCouncilRegistration({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRewokeCouncilRegistration: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgRewokeCouncilRegistration({ value: tx_11.MsgRewokeCouncilRegistration.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRewokeCouncilRegistration: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitCollectionProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitCollectionProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSubmitCollectionProposal({ value: tx_12.MsgSubmitCollectionProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitCollectionProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSellOffer({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSellOffer: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgCreateSellOffer({ value: tx_13.MsgCreateSellOffer.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSellOffer: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBuyCardScheme({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBuyCardScheme: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgBuyCardScheme({ value: tx_14.MsgBuyCardScheme.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBuyCardScheme: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBuyCard({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBuyCard: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgBuyCard({ value: tx_15.MsgBuyCard.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBuyCard: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRestartCouncil({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRestartCouncil: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgRestartCouncil({ value: tx_16.MsgRestartCouncil.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRestartCouncil: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTransferCard({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTransferCard: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgTransferCard({ value: tx_17.MsgTransferCard.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTransferCard: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgFinalizeCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgFinalizeCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgFinalizeCollection({ value: tx_18.MsgFinalizeCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgFinalizeCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSaveCardContent({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSaveCardContent: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSaveCardContent({ value: tx_19.MsgSaveCardContent.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSaveCardContent: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgConfirmMatch({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConfirmMatch: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgConfirmMatch({ value: tx_20.MsgConfirmMatch.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConfirmMatch: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitMatchReporterProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitMatchReporterProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSubmitMatchReporterProposal({ value: tx_21.MsgSubmitMatchReporterProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitMatchReporterProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgVoteCard({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgVoteCard: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgVoteCard({ value: tx_22.MsgVoteCard.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgVoteCard: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAddCardToCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAddCardToCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgAddCardToCollection({ value: tx_23.MsgAddCardToCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAddCardToCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAddStoryToCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAddStoryToCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgAddStoryToCollection({ value: tx_24.MsgAddStoryToCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAddStoryToCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetUserWebsite({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetUserWebsite: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSetUserWebsite({ value: tx_25.MsgSetUserWebsite.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetUserWebsite: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRemoveContributorFromCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRemoveContributorFromCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgRemoveContributorFromCollection({ value: tx_26.MsgRemoveContributorFromCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRemoveContributorFromCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCommitCouncilResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCommitCouncilResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgCommitCouncilResponse({ value: tx_27.MsgCommitCouncilResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCommitCouncilResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAddArtwork({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAddArtwork: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgAddArtwork({ value: tx_28.MsgAddArtwork.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAddArtwork: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgReportMatch({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgReportMatch: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgReportMatch({ value: tx_29.MsgReportMatch.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgReportMatch: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgOpenBoosterPack({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgOpenBoosterPack: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgOpenBoosterPack({ value: tx_30.MsgOpenBoosterPack.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgOpenBoosterPack: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgCreateCollection({ value: tx_31.MsgCreateCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetCardRarity({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetCardRarity: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSetCardRarity({ value: tx_32.MsgSetCardRarity.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetCardRarity: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterForCouncil({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterForCouncil: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgRegisterForCouncil({ value: tx_33.MsgRegisterForCouncil.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterForCouncil: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBuyCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBuyCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgBuyCollection({ value: tx_34.MsgBuyCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBuyCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAddContributorToCollection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAddContributorToCollection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgAddContributorToCollection({ value: tx_35.MsgAddContributorToCollection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAddContributorToCollection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgChangeArtist({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgChangeArtist: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgChangeArtist({ value: tx_36.MsgChangeArtist.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgChangeArtist: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetProfileCard({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetProfileCard: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSetProfileCard({ value: tx_37.MsgSetProfileCard.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetProfileCard: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetCollectionStoryWriter({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetCollectionStoryWriter: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgSetCollectionStoryWriter({ value: tx_38.MsgSetCollectionStoryWriter.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetCollectionStoryWriter: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDonateToCard({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDonateToCard: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgDonateToCard({ value: tx_39.MsgDonateToCard.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDonateToCard: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateCouncil({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateCouncil: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgCreateCouncil({ value: tx_40.MsgCreateCouncil.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateCouncil: Could not broadcast Tx: ' + e.message);
            }
        },
        msgRemoveSellOffer({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgRemoveSellOffer", value: tx_1.MsgRemoveSellOffer.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRemoveSellOffer: Could not create message: ' + e.message);
            }
        },
        msgSetUserBiography({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSetUserBiography", value: tx_2.MsgSetUserBiography.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetUserBiography: Could not create message: ' + e.message);
            }
        },
        msgTransferBoosterPack({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgTransferBoosterPack", value: tx_3.MsgTransferBoosterPack.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTransferBoosterPack: Could not create message: ' + e.message);
            }
        },
        msgSubmitCopyrightProposal({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSubmitCopyrightProposal", value: tx_4.MsgSubmitCopyrightProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitCopyrightProposal: Could not create message: ' + e.message);
            }
        },
        msgAddArtworkToCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgAddArtworkToCollection", value: tx_5.MsgAddArtworkToCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAddArtworkToCollection: Could not create message: ' + e.message);
            }
        },
        msgCreateuser({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgCreateuser", value: tx_6.MsgCreateuser.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateuser: Could not create message: ' + e.message);
            }
        },
        msgApointMatchReporter({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgApointMatchReporter", value: tx_7.MsgApointMatchReporter.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgApointMatchReporter: Could not create message: ' + e.message);
            }
        },
        msgRemoveCardFromCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgRemoveCardFromCollection", value: tx_8.MsgRemoveCardFromCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRemoveCardFromCollection: Could not create message: ' + e.message);
            }
        },
        msgSetCollectionArtist({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSetCollectionArtist", value: tx_9.MsgSetCollectionArtist.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetCollectionArtist: Could not create message: ' + e.message);
            }
        },
        msgRevealCouncilResponse({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgRevealCouncilResponse", value: tx_10.MsgRevealCouncilResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRevealCouncilResponse: Could not create message: ' + e.message);
            }
        },
        msgRewokeCouncilRegistration({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgRewokeCouncilRegistration", value: tx_11.MsgRewokeCouncilRegistration.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRewokeCouncilRegistration: Could not create message: ' + e.message);
            }
        },
        msgSubmitCollectionProposal({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSubmitCollectionProposal", value: tx_12.MsgSubmitCollectionProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitCollectionProposal: Could not create message: ' + e.message);
            }
        },
        msgCreateSellOffer({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgCreateSellOffer", value: tx_13.MsgCreateSellOffer.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSellOffer: Could not create message: ' + e.message);
            }
        },
        msgBuyCardScheme({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgBuyCardScheme", value: tx_14.MsgBuyCardScheme.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBuyCardScheme: Could not create message: ' + e.message);
            }
        },
        msgBuyCard({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgBuyCard", value: tx_15.MsgBuyCard.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBuyCard: Could not create message: ' + e.message);
            }
        },
        msgRestartCouncil({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgRestartCouncil", value: tx_16.MsgRestartCouncil.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRestartCouncil: Could not create message: ' + e.message);
            }
        },
        msgTransferCard({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgTransferCard", value: tx_17.MsgTransferCard.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTransferCard: Could not create message: ' + e.message);
            }
        },
        msgFinalizeCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgFinalizeCollection", value: tx_18.MsgFinalizeCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgFinalizeCollection: Could not create message: ' + e.message);
            }
        },
        msgSaveCardContent({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSaveCardContent", value: tx_19.MsgSaveCardContent.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSaveCardContent: Could not create message: ' + e.message);
            }
        },
        msgConfirmMatch({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgConfirmMatch", value: tx_20.MsgConfirmMatch.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConfirmMatch: Could not create message: ' + e.message);
            }
        },
        msgSubmitMatchReporterProposal({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSubmitMatchReporterProposal", value: tx_21.MsgSubmitMatchReporterProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitMatchReporterProposal: Could not create message: ' + e.message);
            }
        },
        msgVoteCard({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgVoteCard", value: tx_22.MsgVoteCard.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgVoteCard: Could not create message: ' + e.message);
            }
        },
        msgAddCardToCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgAddCardToCollection", value: tx_23.MsgAddCardToCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAddCardToCollection: Could not create message: ' + e.message);
            }
        },
        msgAddStoryToCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgAddStoryToCollection", value: tx_24.MsgAddStoryToCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAddStoryToCollection: Could not create message: ' + e.message);
            }
        },
        msgSetUserWebsite({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSetUserWebsite", value: tx_25.MsgSetUserWebsite.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetUserWebsite: Could not create message: ' + e.message);
            }
        },
        msgRemoveContributorFromCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgRemoveContributorFromCollection", value: tx_26.MsgRemoveContributorFromCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRemoveContributorFromCollection: Could not create message: ' + e.message);
            }
        },
        msgCommitCouncilResponse({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgCommitCouncilResponse", value: tx_27.MsgCommitCouncilResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCommitCouncilResponse: Could not create message: ' + e.message);
            }
        },
        msgAddArtwork({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgAddArtwork", value: tx_28.MsgAddArtwork.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAddArtwork: Could not create message: ' + e.message);
            }
        },
        msgReportMatch({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgReportMatch", value: tx_29.MsgReportMatch.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgReportMatch: Could not create message: ' + e.message);
            }
        },
        msgOpenBoosterPack({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgOpenBoosterPack", value: tx_30.MsgOpenBoosterPack.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgOpenBoosterPack: Could not create message: ' + e.message);
            }
        },
        msgCreateCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgCreateCollection", value: tx_31.MsgCreateCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateCollection: Could not create message: ' + e.message);
            }
        },
        msgSetCardRarity({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSetCardRarity", value: tx_32.MsgSetCardRarity.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetCardRarity: Could not create message: ' + e.message);
            }
        },
        msgRegisterForCouncil({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgRegisterForCouncil", value: tx_33.MsgRegisterForCouncil.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterForCouncil: Could not create message: ' + e.message);
            }
        },
        msgBuyCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgBuyCollection", value: tx_34.MsgBuyCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBuyCollection: Could not create message: ' + e.message);
            }
        },
        msgAddContributorToCollection({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgAddContributorToCollection", value: tx_35.MsgAddContributorToCollection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAddContributorToCollection: Could not create message: ' + e.message);
            }
        },
        msgChangeArtist({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgChangeArtist", value: tx_36.MsgChangeArtist.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgChangeArtist: Could not create message: ' + e.message);
            }
        },
        msgSetProfileCard({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSetProfileCard", value: tx_37.MsgSetProfileCard.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetProfileCard: Could not create message: ' + e.message);
            }
        },
        msgSetCollectionStoryWriter({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgSetCollectionStoryWriter", value: tx_38.MsgSetCollectionStoryWriter.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetCollectionStoryWriter: Could not create message: ' + e.message);
            }
        },
        msgDonateToCard({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgDonateToCard", value: tx_39.MsgDonateToCard.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDonateToCard: Could not create message: ' + e.message);
            }
        },
        msgCreateCouncil({ value }) {
            try {
                return { typeUrl: "/DecentralCardGame.cardchain.cardchain.MsgCreateCouncil", value: tx_40.MsgCreateCouncil.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateCouncil: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const Module = (test) => {
    return {
        module: {
            DecentralCardGameCardchainCardchain: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = Module;
