import Long from "long";
import protobuf from "protobufjs";
import { TxBody } from "./codec/cosmos/tx/v1beta1/tx";
import { Any } from "./codec/google/protobuf/any";
/**
 * A type generated by [ts-proto](https://github.com/stephenh/ts-proto).
 */
export interface TsProtoGeneratedType {
    readonly encode: (message: any | {
        [k: string]: any;
    }, writer?: protobuf.Writer) => protobuf.Writer;
    readonly decode: (input: Uint8Array | protobuf.Reader, length?: number) => any;
    readonly fromJSON: (object: {
        [k: string]: any;
    }) => any;
    readonly fromPartial: (object: {
        [k: string]: any;
    }) => any;
    readonly toJSON: (message: any | {
        [k: string]: any;
    }) => unknown;
}
/**
 * A type generated by [protobufjs](https://github.com/protobufjs/protobuf.js).
 *
 * This can be used if you want to create types at runtime using pure JavaScript.
 * See https://gist.github.com/fadeev/a4981eff1cf3a805ef10e25313d5f2b7
 */
export interface PbjsGeneratedType {
    readonly create: (properties?: {
        [k: string]: any;
    }) => any;
    readonly encode: (message: any | {
        [k: string]: any;
    }, writer?: protobuf.Writer) => protobuf.Writer;
    readonly decode: (reader: protobuf.Reader | Uint8Array, length?: number) => any;
}
export declare type GeneratedType = TsProtoGeneratedType | PbjsGeneratedType;
export declare function isTsProtoGeneratedType(type: GeneratedType): type is TsProtoGeneratedType;
export declare function isPbjsGeneratedType(type: GeneratedType): type is PbjsGeneratedType;
export interface EncodeObject {
    readonly typeUrl: string;
    readonly value: any;
}
export interface DecodeObject {
    readonly typeUrl: string;
    readonly value: Uint8Array;
}
export interface TxBodyValue {
    readonly messages: readonly EncodeObject[];
    readonly memo?: string;
    readonly timeoutHeight?: Long;
    readonly extensionOptions?: Any[];
    readonly nonCriticalExtensionOptions?: Any[];
}
export declare class Registry {
    private readonly types;
    constructor(customTypes?: Iterable<[string, GeneratedType]>);
    register(typeUrl: string, type: GeneratedType): void;
    /**
     * Looks up a type that was previously added to the registry.
     *
     * The generator information (ts-proto or pbjs) gets lost along the way.
     * If you need to work with the result type in TypeScript, you can use:
     *
     * ```
     * import { assert } from "@cosmjs/utils";
     *
     * const Coin = registry.lookupType("/cosmos.base.v1beta1.Coin");
     * assert(Coin); // Ensures not unset
     * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect
     *
     * // Coin is typed TsProtoGeneratedType now.
     * ```
     */
    lookupType(typeUrl: string): GeneratedType | undefined;
    private lookupTypeWithError;
    encode({ typeUrl, value }: EncodeObject): Uint8Array;
    encodeTxBody(txBodyFields: TxBodyValue): Uint8Array;
    decode({ typeUrl, value }: DecodeObject): any;
    decodeTxBody(txBody: Uint8Array): TxBody;
}
