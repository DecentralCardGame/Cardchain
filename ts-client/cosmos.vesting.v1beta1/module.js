"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgCreatePermanentLockedAccount = exports.MsgCreatePeriodicVestingAccount = exports.MsgCreateVestingAccount = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreateVestingAccount", { enumerable: true, get: function () { return tx_1.MsgCreateVestingAccount; } });
const tx_2 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreatePeriodicVestingAccount", { enumerable: true, get: function () { return tx_2.MsgCreatePeriodicVestingAccount; } });
const tx_3 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreatePermanentLockedAccount", { enumerable: true, get: function () { return tx_3.MsgCreatePermanentLockedAccount; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgCreateVestingAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateVestingAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgCreateVestingAccount({ value: tx_1.MsgCreateVestingAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateVestingAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreatePeriodicVestingAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreatePeriodicVestingAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgCreatePeriodicVestingAccount({ value: tx_2.MsgCreatePeriodicVestingAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreatePeriodicVestingAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreatePermanentLockedAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreatePermanentLockedAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry, prefix });
                let msg = this.msgCreatePermanentLockedAccount({ value: tx_3.MsgCreatePermanentLockedAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreatePermanentLockedAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        msgCreateVestingAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreateVestingAccount", value: tx_1.MsgCreateVestingAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateVestingAccount: Could not create message: ' + e.message);
            }
        },
        msgCreatePeriodicVestingAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount", value: tx_2.MsgCreatePeriodicVestingAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreatePeriodicVestingAccount: Could not create message: ' + e.message);
            }
        },
        msgCreatePermanentLockedAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount", value: tx_3.MsgCreatePermanentLockedAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreatePermanentLockedAccount: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const Module = (test) => {
    return {
        module: {
            CosmosVestingV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = Module;
