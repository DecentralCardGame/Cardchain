// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cardchain/cardchain/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace DecentralCardGame.Cardchain.Cardchain {
  /// <summary>
  /// Query defines the gRPC querier service.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "DecentralCardGame.cardchain.cardchain.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.OutpCard> __Marshaller_DecentralCardGame_cardchain_cardchain_OutpCard = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.OutpCard.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardContentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardContentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.User> __Marshaller_DecentralCardGame_cardchain_cardchain_User = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.User.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardchainInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardchainInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQVotingResultsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQVotingResultsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQMatchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.Match> __Marshaller_DecentralCardGame_cardchain_cardchain_Match = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.Match.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.OutpSet> __Marshaller_DecentralCardGame_cardchain_cardchain_OutpSet = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.OutpSet.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSellOfferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.SellOffer> __Marshaller_DecentralCardGame_cardchain_cardchain_SellOffer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.SellOffer.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCouncilRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.Council> __Marshaller_DecentralCardGame_cardchain_cardchain_Council = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.Council.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQMatchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQMatchesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSellOffersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSellOffersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQServerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.Server> __Marshaller_DecentralCardGame_cardchain_cardchain_Server = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.Server.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryRarityDistributionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse> __Marshaller_DecentralCardGame_cardchain_cardchain_QueryRarityDistributionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse> __Method_Params = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Params",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryParamsRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryParamsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest, global::DecentralCardGame.Cardchain.Cardchain.OutpCard> __Method_QCard = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest, global::DecentralCardGame.Cardchain.Cardchain.OutpCard>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QCard",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_OutpCard);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse> __Method_QCardContent = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QCardContent",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardContentRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardContentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest, global::DecentralCardGame.Cardchain.Cardchain.User> __Method_QUser = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest, global::DecentralCardGame.Cardchain.Cardchain.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QUser",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQUserRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_User);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse> __Method_QCardchainInfo = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QCardchainInfo",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardchainInfoRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardchainInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse> __Method_QVotingResults = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QVotingResults",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQVotingResultsRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQVotingResultsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse> __Method_QCards = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QCards",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardsRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCardsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest, global::DecentralCardGame.Cardchain.Cardchain.Match> __Method_QMatch = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest, global::DecentralCardGame.Cardchain.Cardchain.Match>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QMatch",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQMatchRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_Match);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest, global::DecentralCardGame.Cardchain.Cardchain.OutpSet> __Method_QSet = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest, global::DecentralCardGame.Cardchain.Cardchain.OutpSet>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QSet",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSetRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_OutpSet);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest, global::DecentralCardGame.Cardchain.Cardchain.SellOffer> __Method_QSellOffer = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest, global::DecentralCardGame.Cardchain.Cardchain.SellOffer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QSellOffer",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSellOfferRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_SellOffer);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest, global::DecentralCardGame.Cardchain.Cardchain.Council> __Method_QCouncil = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest, global::DecentralCardGame.Cardchain.Cardchain.Council>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QCouncil",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQCouncilRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_Council);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse> __Method_QMatches = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QMatches",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQMatchesRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQMatchesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse> __Method_QSellOffers = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QSellOffers",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSellOffersRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSellOffersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest, global::DecentralCardGame.Cardchain.Cardchain.Server> __Method_QServer = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest, global::DecentralCardGame.Cardchain.Cardchain.Server>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QServer",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQServerRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_Server);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse> __Method_QSets = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QSets",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSetsRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryQSetsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse> __Method_RarityDistribution = new grpc::Method<global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RarityDistribution",
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryRarityDistributionRequest,
        __Marshaller_DecentralCardGame_cardchain_cardchain_QueryRarityDistributionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::DecentralCardGame.Cardchain.Cardchain.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      /// <summary>
      /// Parameters queries the parameters of the module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse> Params(global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QCard items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.OutpCard> QCard(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QCardContent items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse> QCardContent(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QUser items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.User> QUser(global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QCardchainInfo items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse> QCardchainInfo(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QVotingResults items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse> QVotingResults(global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QCards items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse> QCards(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QMatch items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.Match> QMatch(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QSet items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.OutpSet> QSet(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QSellOffer items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.SellOffer> QSellOffer(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QCouncil items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.Council> QCouncil(global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QMatches items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse> QMatches(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QSellOffers items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse> QSellOffers(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QServer items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.Server> QServer(global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of QSets items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse> QSets(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queries a list of RarityDistribution items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse> RarityDistribution(global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Parameters queries the parameters of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse Params(global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Params(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Parameters queries the parameters of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse Params(global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// Parameters queries the parameters of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse> ParamsAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Parameters queries the parameters of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse> ParamsAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCard items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.OutpCard QCard(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCard items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.OutpCard QCard(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QCard, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCard items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.OutpCard> QCardAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCard items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.OutpCard> QCardAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QCard, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCardContent items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse QCardContent(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCardContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCardContent items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse QCardContent(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QCardContent, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCardContent items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse> QCardContentAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCardContentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCardContent items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse> QCardContentAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QCardContent, null, options, request);
      }
      /// <summary>
      /// Queries a list of QUser items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.User QUser(global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QUser items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.User QUser(global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QUser, null, options, request);
      }
      /// <summary>
      /// Queries a list of QUser items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.User> QUserAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QUser items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.User> QUserAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QUser, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCardchainInfo items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse QCardchainInfo(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCardchainInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCardchainInfo items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse QCardchainInfo(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QCardchainInfo, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCardchainInfo items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse> QCardchainInfoAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCardchainInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCardchainInfo items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse> QCardchainInfoAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QCardchainInfo, null, options, request);
      }
      /// <summary>
      /// Queries a list of QVotingResults items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse QVotingResults(global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QVotingResults(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QVotingResults items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse QVotingResults(global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QVotingResults, null, options, request);
      }
      /// <summary>
      /// Queries a list of QVotingResults items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse> QVotingResultsAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QVotingResultsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QVotingResults items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse> QVotingResultsAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QVotingResults, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCards items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse QCards(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCards items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse QCards(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QCards, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCards items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse> QCardsAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCardsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCards items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse> QCardsAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QCards, null, options, request);
      }
      /// <summary>
      /// Queries a list of QMatch items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.Match QMatch(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QMatch items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.Match QMatch(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QMatch, null, options, request);
      }
      /// <summary>
      /// Queries a list of QMatch items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.Match> QMatchAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QMatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QMatch items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.Match> QMatchAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QMatch, null, options, request);
      }
      /// <summary>
      /// Queries a list of QSet items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.OutpSet QSet(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QSet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QSet items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.OutpSet QSet(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QSet, null, options, request);
      }
      /// <summary>
      /// Queries a list of QSet items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.OutpSet> QSetAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QSetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QSet items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.OutpSet> QSetAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QSet, null, options, request);
      }
      /// <summary>
      /// Queries a list of QSellOffer items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.SellOffer QSellOffer(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QSellOffer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QSellOffer items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.SellOffer QSellOffer(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QSellOffer, null, options, request);
      }
      /// <summary>
      /// Queries a list of QSellOffer items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.SellOffer> QSellOfferAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QSellOfferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QSellOffer items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.SellOffer> QSellOfferAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QSellOffer, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCouncil items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.Council QCouncil(global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCouncil(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCouncil items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.Council QCouncil(global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QCouncil, null, options, request);
      }
      /// <summary>
      /// Queries a list of QCouncil items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.Council> QCouncilAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QCouncilAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QCouncil items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.Council> QCouncilAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QCouncil, null, options, request);
      }
      /// <summary>
      /// Queries a list of QMatches items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse QMatches(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QMatches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QMatches items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse QMatches(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QMatches, null, options, request);
      }
      /// <summary>
      /// Queries a list of QMatches items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse> QMatchesAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QMatchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QMatches items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse> QMatchesAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QMatches, null, options, request);
      }
      /// <summary>
      /// Queries a list of QSellOffers items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse QSellOffers(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QSellOffers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QSellOffers items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse QSellOffers(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QSellOffers, null, options, request);
      }
      /// <summary>
      /// Queries a list of QSellOffers items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse> QSellOffersAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QSellOffersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QSellOffers items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse> QSellOffersAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QSellOffers, null, options, request);
      }
      /// <summary>
      /// Queries a list of QServer items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.Server QServer(global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QServer items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.Server QServer(global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QServer, null, options, request);
      }
      /// <summary>
      /// Queries a list of QServer items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.Server> QServerAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QServer items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.Server> QServerAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QServer, null, options, request);
      }
      /// <summary>
      /// Queries a list of QSets items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse QSets(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QSets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QSets items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse QSets(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QSets, null, options, request);
      }
      /// <summary>
      /// Queries a list of QSets items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse> QSetsAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QSetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of QSets items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse> QSetsAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QSets, null, options, request);
      }
      /// <summary>
      /// Queries a list of RarityDistribution items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse RarityDistribution(global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RarityDistribution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of RarityDistribution items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse RarityDistribution(global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RarityDistribution, null, options, request);
      }
      /// <summary>
      /// Queries a list of RarityDistribution items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse> RarityDistributionAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RarityDistributionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queries a list of RarityDistribution items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse> RarityDistributionAsync(global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RarityDistribution, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Params, serviceImpl.Params)
          .AddMethod(__Method_QCard, serviceImpl.QCard)
          .AddMethod(__Method_QCardContent, serviceImpl.QCardContent)
          .AddMethod(__Method_QUser, serviceImpl.QUser)
          .AddMethod(__Method_QCardchainInfo, serviceImpl.QCardchainInfo)
          .AddMethod(__Method_QVotingResults, serviceImpl.QVotingResults)
          .AddMethod(__Method_QCards, serviceImpl.QCards)
          .AddMethod(__Method_QMatch, serviceImpl.QMatch)
          .AddMethod(__Method_QSet, serviceImpl.QSet)
          .AddMethod(__Method_QSellOffer, serviceImpl.QSellOffer)
          .AddMethod(__Method_QCouncil, serviceImpl.QCouncil)
          .AddMethod(__Method_QMatches, serviceImpl.QMatches)
          .AddMethod(__Method_QSellOffers, serviceImpl.QSellOffers)
          .AddMethod(__Method_QServer, serviceImpl.QServer)
          .AddMethod(__Method_QSets, serviceImpl.QSets)
          .AddMethod(__Method_RarityDistribution, serviceImpl.RarityDistribution).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Params, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryParamsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryParamsResponse>(serviceImpl.Params));
      serviceBinder.AddMethod(__Method_QCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardRequest, global::DecentralCardGame.Cardchain.Cardchain.OutpCard>(serviceImpl.QCard));
      serviceBinder.AddMethod(__Method_QCardContent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardContentResponse>(serviceImpl.QCardContent));
      serviceBinder.AddMethod(__Method_QUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQUserRequest, global::DecentralCardGame.Cardchain.Cardchain.User>(serviceImpl.QUser));
      serviceBinder.AddMethod(__Method_QCardchainInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardchainInfoResponse>(serviceImpl.QCardchainInfo));
      serviceBinder.AddMethod(__Method_QVotingResults, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQVotingResultsResponse>(serviceImpl.QVotingResults));
      serviceBinder.AddMethod(__Method_QCards, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQCardsResponse>(serviceImpl.QCards));
      serviceBinder.AddMethod(__Method_QMatch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchRequest, global::DecentralCardGame.Cardchain.Cardchain.Match>(serviceImpl.QMatch));
      serviceBinder.AddMethod(__Method_QSet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetRequest, global::DecentralCardGame.Cardchain.Cardchain.OutpSet>(serviceImpl.QSet));
      serviceBinder.AddMethod(__Method_QSellOffer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOfferRequest, global::DecentralCardGame.Cardchain.Cardchain.SellOffer>(serviceImpl.QSellOffer));
      serviceBinder.AddMethod(__Method_QCouncil, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQCouncilRequest, global::DecentralCardGame.Cardchain.Cardchain.Council>(serviceImpl.QCouncil));
      serviceBinder.AddMethod(__Method_QMatches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQMatchesResponse>(serviceImpl.QMatches));
      serviceBinder.AddMethod(__Method_QSellOffers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQSellOffersResponse>(serviceImpl.QSellOffers));
      serviceBinder.AddMethod(__Method_QServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQServerRequest, global::DecentralCardGame.Cardchain.Cardchain.Server>(serviceImpl.QServer));
      serviceBinder.AddMethod(__Method_QSets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryQSetsResponse>(serviceImpl.QSets));
      serviceBinder.AddMethod(__Method_RarityDistribution, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionRequest, global::DecentralCardGame.Cardchain.Cardchain.QueryRarityDistributionResponse>(serviceImpl.RarityDistribution));
    }

  }
}
#endregion
