// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cardchain/cardchain/genesis.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DecentralCardGame.Cardchain.Cardchain {

  /// <summary>Holder for reflection information generated from cardchain/cardchain/genesis.proto</summary>
  public static partial class GenesisReflection {

    #region Descriptor
    /// <summary>File descriptor for cardchain/cardchain/genesis.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GenesisReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFjYXJkY2hhaW4vY2FyZGNoYWluL2dlbmVzaXMucHJvdG8SJURlY2VudHJh",
            "bENhcmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW4aFGdvZ29wcm90by9nb2dv",
            "LnByb3RvGiBjYXJkY2hhaW4vY2FyZGNoYWluL3BhcmFtcy5wcm90bxoeY2Fy",
            "ZGNoYWluL2NhcmRjaGFpbi9jYXJkLnByb3RvGh5jYXJkY2hhaW4vY2FyZGNo",
            "YWluL3VzZXIucHJvdG8aH2NhcmRjaGFpbi9jYXJkY2hhaW4vbWF0Y2gucHJv",
            "dG8aHWNhcmRjaGFpbi9jYXJkY2hhaW4vc2V0LnByb3RvGiRjYXJkY2hhaW4v",
            "Y2FyZGNoYWluL3NlbGxfb2ZmZXIucHJvdG8aKWNhcmRjaGFpbi9jYXJkY2hh",
            "aW4vcnVubmluZ19hdmVyYWdlLnByb3RvGiFjYXJkY2hhaW4vY2FyZGNoYWlu",
            "L2NvdW5jaWwucHJvdG8aH2NhcmRjaGFpbi9jYXJkY2hhaW4vaW1hZ2UucHJv",
            "dG8aIGNhcmRjaGFpbi9jYXJkY2hhaW4vc2VydmVyLnByb3RvGh5jb3Ntb3Mv",
            "YmFzZS92MWJldGExL2NvaW4ucHJvdG8ijQgKDEdlbmVzaXNTdGF0ZRJLCgZw",
            "YXJhbXMYASABKAsyLS5EZWNlbnRyYWxDYXJkR2FtZS5jYXJkY2hhaW4uY2Fy",
            "ZGNoYWluLlBhcmFtc0IEyN4fAFIGcGFyYW1zEk0KC2NhcmRSZWNvcmRzGAIg",
            "AygLMisuRGVjZW50cmFsQ2FyZEdhbWUuY2FyZGNoYWluLmNhcmRjaGFpbi5D",
            "YXJkUgtjYXJkUmVjb3JkcxJBCgV1c2VycxgDIAMoCzIrLkRlY2VudHJhbENh",
            "cmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW4uVXNlclIFdXNlcnMSHAoJYWRk",
            "cmVzc2VzGAQgAygJUglhZGRyZXNzZXMSRgoHbWF0Y2hlcxgGIAMoCzIsLkRl",
            "Y2VudHJhbENhcmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW4uTWF0Y2hSB21h",
            "dGNoZXMSPgoEc2V0cxgHIAMoCzIqLkRlY2VudHJhbENhcmRHYW1lLmNhcmRj",
            "aGFpbi5jYXJkY2hhaW4uU2V0UgRzZXRzElAKCnNlbGxPZmZlcnMYCCADKAsy",
            "MC5EZWNlbnRyYWxDYXJkR2FtZS5jYXJkY2hhaW4uY2FyZGNoYWluLlNlbGxP",
            "ZmZlclIKc2VsbE9mZmVycxIvCgVwb29scxgJIAMoCzIZLmNvc21vcy5iYXNl",
            "LnYxYmV0YTEuQ29pblIFcG9vbHMSWwoQY2FyZEF1Y3Rpb25QcmljZRgLIAEo",
            "CUIvyN4fANreHydnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5cGVz",
            "LkNvaW5SEGNhcmRBdWN0aW9uUHJpY2USSgoIY291bmNpbHMYDCADKAsyLi5E",
            "ZWNlbnRyYWxDYXJkR2FtZS5jYXJkY2hhaW4uY2FyZGNoYWluLkNvdW5jaWxS",
            "CGNvdW5jaWxzEl8KD1J1bm5pbmdBdmVyYWdlcxgNIAMoCzI1LkRlY2VudHJh",
            "bENhcmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW4uUnVubmluZ0F2ZXJhZ2VS",
            "D1J1bm5pbmdBdmVyYWdlcxJECgZpbWFnZXMYDiADKAsyLC5EZWNlbnRyYWxD",
            "YXJkR2FtZS5jYXJkY2hhaW4uY2FyZGNoYWluLkltYWdlUgZpbWFnZXMSRwoH",
            "U2VydmVycxgPIAMoCzItLkRlY2VudHJhbENhcmRHYW1lLmNhcmRjaGFpbi5j",
            "YXJkY2hhaW4uU2VydmVyUgdTZXJ2ZXJzElwKEGxhc3RDYXJkTW9kaWZpZWQY",
            "ECABKAsyMC5EZWNlbnRyYWxDYXJkR2FtZS5jYXJkY2hhaW4uY2FyZGNoYWlu",
            "LlRpbWVTdGFtcFIQbGFzdENhcmRNb2RpZmllZEKpAgopY29tLkRlY2VudHJh",
            "bENhcmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW5CDEdlbmVzaXNQcm90b1AB",
            "WjhnaXRodWIuY29tL0RlY2VudHJhbENhcmRHYW1lL0NhcmRjaGFpbi94L2Nh",
            "cmRjaGFpbi90eXBlc6ICA0RDQ6oCJURlY2VudHJhbENhcmRHYW1lLkNhcmRj",
            "aGFpbi5DYXJkY2hhaW7KAiVEZWNlbnRyYWxDYXJkR2FtZVxDYXJkY2hhaW5c",
            "Q2FyZGNoYWlu4gIxRGVjZW50cmFsQ2FyZEdhbWVcQ2FyZGNoYWluXENhcmRj",
            "aGFpblxHUEJNZXRhZGF0YeoCJ0RlY2VudHJhbENhcmRHYW1lOjpDYXJkY2hh",
            "aW46OkNhcmRjaGFpbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.ParamsReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.CardReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.UserReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.MatchReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.SetReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.SellOfferReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.RunningAverageReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.CouncilReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.ImageReflection.Descriptor, global::DecentralCardGame.Cardchain.Cardchain.ServerReflection.Descriptor, global::Cosmos.Base.V1beta1.CoinReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DecentralCardGame.Cardchain.Cardchain.GenesisState), global::DecentralCardGame.Cardchain.Cardchain.GenesisState.Parser, new[]{ "Params", "CardRecords", "Users", "Addresses", "Matches", "Sets", "SellOffers", "Pools", "CardAuctionPrice", "Councils", "RunningAverages", "Images", "Servers", "LastCardModified" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// GenesisState defines the cardchain module's genesis state.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GenesisState : pb::IMessage<GenesisState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GenesisState> _parser = new pb::MessageParser<GenesisState>(() => new GenesisState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GenesisState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DecentralCardGame.Cardchain.Cardchain.GenesisReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GenesisState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GenesisState(GenesisState other) : this() {
      params_ = other.params_ != null ? other.params_.Clone() : null;
      cardRecords_ = other.cardRecords_.Clone();
      users_ = other.users_.Clone();
      addresses_ = other.addresses_.Clone();
      matches_ = other.matches_.Clone();
      sets_ = other.sets_.Clone();
      sellOffers_ = other.sellOffers_.Clone();
      pools_ = other.pools_.Clone();
      cardAuctionPrice_ = other.cardAuctionPrice_;
      councils_ = other.councils_.Clone();
      runningAverages_ = other.runningAverages_.Clone();
      images_ = other.images_.Clone();
      servers_ = other.servers_.Clone();
      lastCardModified_ = other.lastCardModified_ != null ? other.lastCardModified_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GenesisState Clone() {
      return new GenesisState(this);
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private global::DecentralCardGame.Cardchain.Cardchain.Params params_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DecentralCardGame.Cardchain.Cardchain.Params Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    /// <summary>Field number for the "cardRecords" field.</summary>
    public const int CardRecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.Card> _repeated_cardRecords_codec
        = pb::FieldCodec.ForMessage(18, global::DecentralCardGame.Cardchain.Cardchain.Card.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Card> cardRecords_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Card> CardRecords {
      get { return cardRecords_; }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.User> _repeated_users_codec
        = pb::FieldCodec.ForMessage(26, global::DecentralCardGame.Cardchain.Cardchain.User.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.User> users_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.User> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_addresses_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> addresses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "matches" field.</summary>
    public const int MatchesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.Match> _repeated_matches_codec
        = pb::FieldCodec.ForMessage(50, global::DecentralCardGame.Cardchain.Cardchain.Match.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Match> matches_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Match>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Match> Matches {
      get { return matches_; }
    }

    /// <summary>Field number for the "sets" field.</summary>
    public const int SetsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.Set> _repeated_sets_codec
        = pb::FieldCodec.ForMessage(58, global::DecentralCardGame.Cardchain.Cardchain.Set.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Set> sets_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Set>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Set> Sets {
      get { return sets_; }
    }

    /// <summary>Field number for the "sellOffers" field.</summary>
    public const int SellOffersFieldNumber = 8;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.SellOffer> _repeated_sellOffers_codec
        = pb::FieldCodec.ForMessage(66, global::DecentralCardGame.Cardchain.Cardchain.SellOffer.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.SellOffer> sellOffers_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.SellOffer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.SellOffer> SellOffers {
      get { return sellOffers_; }
    }

    /// <summary>Field number for the "pools" field.</summary>
    public const int PoolsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Cosmos.Base.V1beta1.Coin> _repeated_pools_codec
        = pb::FieldCodec.ForMessage(74, global::Cosmos.Base.V1beta1.Coin.Parser);
    private readonly pbc::RepeatedField<global::Cosmos.Base.V1beta1.Coin> pools_ = new pbc::RepeatedField<global::Cosmos.Base.V1beta1.Coin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Cosmos.Base.V1beta1.Coin> Pools {
      get { return pools_; }
    }

    /// <summary>Field number for the "cardAuctionPrice" field.</summary>
    public const int CardAuctionPriceFieldNumber = 11;
    private string cardAuctionPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CardAuctionPrice {
      get { return cardAuctionPrice_; }
      set {
        cardAuctionPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "councils" field.</summary>
    public const int CouncilsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.Council> _repeated_councils_codec
        = pb::FieldCodec.ForMessage(98, global::DecentralCardGame.Cardchain.Cardchain.Council.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Council> councils_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Council>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Council> Councils {
      get { return councils_; }
    }

    /// <summary>Field number for the "RunningAverages" field.</summary>
    public const int RunningAveragesFieldNumber = 13;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.RunningAverage> _repeated_runningAverages_codec
        = pb::FieldCodec.ForMessage(106, global::DecentralCardGame.Cardchain.Cardchain.RunningAverage.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.RunningAverage> runningAverages_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.RunningAverage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.RunningAverage> RunningAverages {
      get { return runningAverages_; }
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.Image> _repeated_images_codec
        = pb::FieldCodec.ForMessage(114, global::DecentralCardGame.Cardchain.Cardchain.Image.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Image> images_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Image> Images {
      get { return images_; }
    }

    /// <summary>Field number for the "Servers" field.</summary>
    public const int ServersFieldNumber = 15;
    private static readonly pb::FieldCodec<global::DecentralCardGame.Cardchain.Cardchain.Server> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(122, global::DecentralCardGame.Cardchain.Cardchain.Server.Parser);
    private readonly pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Server> servers_ = new pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Server>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::DecentralCardGame.Cardchain.Cardchain.Server> Servers {
      get { return servers_; }
    }

    /// <summary>Field number for the "lastCardModified" field.</summary>
    public const int LastCardModifiedFieldNumber = 16;
    private global::DecentralCardGame.Cardchain.Cardchain.TimeStamp lastCardModified_;
    /// <summary>
    /// this line is used by starport scaffolding # genesis/proto/state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DecentralCardGame.Cardchain.Cardchain.TimeStamp LastCardModified {
      get { return lastCardModified_; }
      set {
        lastCardModified_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GenesisState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GenesisState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Params, other.Params)) return false;
      if(!cardRecords_.Equals(other.cardRecords_)) return false;
      if(!users_.Equals(other.users_)) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      if(!matches_.Equals(other.matches_)) return false;
      if(!sets_.Equals(other.sets_)) return false;
      if(!sellOffers_.Equals(other.sellOffers_)) return false;
      if(!pools_.Equals(other.pools_)) return false;
      if (CardAuctionPrice != other.CardAuctionPrice) return false;
      if(!councils_.Equals(other.councils_)) return false;
      if(!runningAverages_.Equals(other.runningAverages_)) return false;
      if(!images_.Equals(other.images_)) return false;
      if(!servers_.Equals(other.servers_)) return false;
      if (!object.Equals(LastCardModified, other.LastCardModified)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (params_ != null) hash ^= Params.GetHashCode();
      hash ^= cardRecords_.GetHashCode();
      hash ^= users_.GetHashCode();
      hash ^= addresses_.GetHashCode();
      hash ^= matches_.GetHashCode();
      hash ^= sets_.GetHashCode();
      hash ^= sellOffers_.GetHashCode();
      hash ^= pools_.GetHashCode();
      if (CardAuctionPrice.Length != 0) hash ^= CardAuctionPrice.GetHashCode();
      hash ^= councils_.GetHashCode();
      hash ^= runningAverages_.GetHashCode();
      hash ^= images_.GetHashCode();
      hash ^= servers_.GetHashCode();
      if (lastCardModified_ != null) hash ^= LastCardModified.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (params_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Params);
      }
      cardRecords_.WriteTo(output, _repeated_cardRecords_codec);
      users_.WriteTo(output, _repeated_users_codec);
      addresses_.WriteTo(output, _repeated_addresses_codec);
      matches_.WriteTo(output, _repeated_matches_codec);
      sets_.WriteTo(output, _repeated_sets_codec);
      sellOffers_.WriteTo(output, _repeated_sellOffers_codec);
      pools_.WriteTo(output, _repeated_pools_codec);
      if (CardAuctionPrice.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CardAuctionPrice);
      }
      councils_.WriteTo(output, _repeated_councils_codec);
      runningAverages_.WriteTo(output, _repeated_runningAverages_codec);
      images_.WriteTo(output, _repeated_images_codec);
      servers_.WriteTo(output, _repeated_servers_codec);
      if (lastCardModified_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LastCardModified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (params_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Params);
      }
      cardRecords_.WriteTo(ref output, _repeated_cardRecords_codec);
      users_.WriteTo(ref output, _repeated_users_codec);
      addresses_.WriteTo(ref output, _repeated_addresses_codec);
      matches_.WriteTo(ref output, _repeated_matches_codec);
      sets_.WriteTo(ref output, _repeated_sets_codec);
      sellOffers_.WriteTo(ref output, _repeated_sellOffers_codec);
      pools_.WriteTo(ref output, _repeated_pools_codec);
      if (CardAuctionPrice.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CardAuctionPrice);
      }
      councils_.WriteTo(ref output, _repeated_councils_codec);
      runningAverages_.WriteTo(ref output, _repeated_runningAverages_codec);
      images_.WriteTo(ref output, _repeated_images_codec);
      servers_.WriteTo(ref output, _repeated_servers_codec);
      if (lastCardModified_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LastCardModified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      size += cardRecords_.CalculateSize(_repeated_cardRecords_codec);
      size += users_.CalculateSize(_repeated_users_codec);
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      size += matches_.CalculateSize(_repeated_matches_codec);
      size += sets_.CalculateSize(_repeated_sets_codec);
      size += sellOffers_.CalculateSize(_repeated_sellOffers_codec);
      size += pools_.CalculateSize(_repeated_pools_codec);
      if (CardAuctionPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardAuctionPrice);
      }
      size += councils_.CalculateSize(_repeated_councils_codec);
      size += runningAverages_.CalculateSize(_repeated_runningAverages_codec);
      size += images_.CalculateSize(_repeated_images_codec);
      size += servers_.CalculateSize(_repeated_servers_codec);
      if (lastCardModified_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastCardModified);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GenesisState other) {
      if (other == null) {
        return;
      }
      if (other.params_ != null) {
        if (params_ == null) {
          Params = new global::DecentralCardGame.Cardchain.Cardchain.Params();
        }
        Params.MergeFrom(other.Params);
      }
      cardRecords_.Add(other.cardRecords_);
      users_.Add(other.users_);
      addresses_.Add(other.addresses_);
      matches_.Add(other.matches_);
      sets_.Add(other.sets_);
      sellOffers_.Add(other.sellOffers_);
      pools_.Add(other.pools_);
      if (other.CardAuctionPrice.Length != 0) {
        CardAuctionPrice = other.CardAuctionPrice;
      }
      councils_.Add(other.councils_);
      runningAverages_.Add(other.runningAverages_);
      images_.Add(other.images_);
      servers_.Add(other.servers_);
      if (other.lastCardModified_ != null) {
        if (lastCardModified_ == null) {
          LastCardModified = new global::DecentralCardGame.Cardchain.Cardchain.TimeStamp();
        }
        LastCardModified.MergeFrom(other.LastCardModified);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (params_ == null) {
              Params = new global::DecentralCardGame.Cardchain.Cardchain.Params();
            }
            input.ReadMessage(Params);
            break;
          }
          case 18: {
            cardRecords_.AddEntriesFrom(input, _repeated_cardRecords_codec);
            break;
          }
          case 26: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 34: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 50: {
            matches_.AddEntriesFrom(input, _repeated_matches_codec);
            break;
          }
          case 58: {
            sets_.AddEntriesFrom(input, _repeated_sets_codec);
            break;
          }
          case 66: {
            sellOffers_.AddEntriesFrom(input, _repeated_sellOffers_codec);
            break;
          }
          case 74: {
            pools_.AddEntriesFrom(input, _repeated_pools_codec);
            break;
          }
          case 90: {
            CardAuctionPrice = input.ReadString();
            break;
          }
          case 98: {
            councils_.AddEntriesFrom(input, _repeated_councils_codec);
            break;
          }
          case 106: {
            runningAverages_.AddEntriesFrom(input, _repeated_runningAverages_codec);
            break;
          }
          case 114: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 122: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
          case 130: {
            if (lastCardModified_ == null) {
              LastCardModified = new global::DecentralCardGame.Cardchain.Cardchain.TimeStamp();
            }
            input.ReadMessage(LastCardModified);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (params_ == null) {
              Params = new global::DecentralCardGame.Cardchain.Cardchain.Params();
            }
            input.ReadMessage(Params);
            break;
          }
          case 18: {
            cardRecords_.AddEntriesFrom(ref input, _repeated_cardRecords_codec);
            break;
          }
          case 26: {
            users_.AddEntriesFrom(ref input, _repeated_users_codec);
            break;
          }
          case 34: {
            addresses_.AddEntriesFrom(ref input, _repeated_addresses_codec);
            break;
          }
          case 50: {
            matches_.AddEntriesFrom(ref input, _repeated_matches_codec);
            break;
          }
          case 58: {
            sets_.AddEntriesFrom(ref input, _repeated_sets_codec);
            break;
          }
          case 66: {
            sellOffers_.AddEntriesFrom(ref input, _repeated_sellOffers_codec);
            break;
          }
          case 74: {
            pools_.AddEntriesFrom(ref input, _repeated_pools_codec);
            break;
          }
          case 90: {
            CardAuctionPrice = input.ReadString();
            break;
          }
          case 98: {
            councils_.AddEntriesFrom(ref input, _repeated_councils_codec);
            break;
          }
          case 106: {
            runningAverages_.AddEntriesFrom(ref input, _repeated_runningAverages_codec);
            break;
          }
          case 114: {
            images_.AddEntriesFrom(ref input, _repeated_images_codec);
            break;
          }
          case 122: {
            servers_.AddEntriesFrom(ref input, _repeated_servers_codec);
            break;
          }
          case 130: {
            if (lastCardModified_ == null) {
              LastCardModified = new global::DecentralCardGame.Cardchain.Cardchain.TimeStamp();
            }
            input.ReadMessage(LastCardModified);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
