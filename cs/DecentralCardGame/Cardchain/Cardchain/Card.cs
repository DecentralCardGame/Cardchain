// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cardchain/cardchain/card.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DecentralCardGame.Cardchain.Cardchain {

  /// <summary>Holder for reflection information generated from cardchain/cardchain/card.proto</summary>
  public static partial class CardReflection {

    #region Descriptor
    /// <summary>File descriptor for cardchain/cardchain/card.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5jYXJkY2hhaW4vY2FyZGNoYWluL2NhcmQucHJvdG8SJURlY2VudHJhbENh",
            "cmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW4aFGdvZ29wcm90by9nb2dvLnBy",
            "b3RvIqoFCgRDYXJkEhQKBW93bmVyGAEgASgJUgVvd25lchIWCgZhcnRpc3QY",
            "AiABKAlSBmFydGlzdBIYCgdjb250ZW50GAMgASgMUgdjb250ZW50EhkKCGlt",
            "YWdlX2lkGAQgASgEUgdpbWFnZUlkEhgKB2Z1bGxBcnQYBSABKAhSB2Z1bGxB",
            "cnQSFAoFbm90ZXMYBiABKAlSBW5vdGVzEkUKBnN0YXR1cxgHIAEoDjItLkRl",
            "Y2VudHJhbENhcmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW4uU3RhdHVzUgZz",
            "dGF0dXMSSwoIdm90ZVBvb2wYCCABKAlCL8jeHwDa3h8nZ2l0aHViLmNvbS9j",
            "b3Ntb3MvY29zbW9zLXNkay90eXBlcy5Db2luUgh2b3RlUG9vbBIWCgZ2b3Rl",
            "cnMYDiADKAlSBnZvdGVycxIoCg9mYWlyRW5vdWdoVm90ZXMYCSABKARSD2Zh",
            "aXJFbm91Z2hWb3RlcxIqChBvdmVycG93ZXJlZFZvdGVzGAogASgEUhBvdmVy",
            "cG93ZXJlZFZvdGVzEiwKEXVuZGVycG93ZXJlZFZvdGVzGAsgASgEUhF1bmRl",
            "cnBvd2VyZWRWb3RlcxIuChJpbmFwcHJvcHJpYXRlVm90ZXMYDCABKARSEmlu",
            "YXBwcm9wcmlhdGVWb3RlcxIcCgluZXJmbGV2ZWwYDSABKANSCW5lcmZsZXZl",
            "bBIkCg1iYWxhbmNlQW5jaG9yGA8gASgIUg1iYWxhbmNlQW5jaG9yEiAKC3N0",
            "YXJ0ZXJDYXJkGBAgASgIUgtzdGFydGVyQ2FyZBJJCgZyYXJpdHkYESABKA4y",
            "MS5EZWNlbnRyYWxDYXJkR2FtZS5jYXJkY2hhaW4uY2FyZGNoYWluLkNhcmRS",
            "YXJpdHlSBnJhcml0eSK9BQoIT3V0cENhcmQSFAoFb3duZXIYASABKAlSBW93",
            "bmVyEhYKBmFydGlzdBgCIAEoCVIGYXJ0aXN0EhgKB2NvbnRlbnQYAyABKAlS",
            "B2NvbnRlbnQSFAoFaW1hZ2UYBCABKAlSBWltYWdlEhgKB2Z1bGxBcnQYBSAB",
            "KAhSB2Z1bGxBcnQSFAoFbm90ZXMYBiABKAlSBW5vdGVzEkUKBnN0YXR1cxgH",
            "IAEoDjItLkRlY2VudHJhbENhcmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW4u",
            "U3RhdHVzUgZzdGF0dXMSSwoIdm90ZVBvb2wYCCABKAlCL8jeHwDa3h8nZ2l0",
            "aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5Db2luUgh2b3RlUG9v",
            "bBIWCgZ2b3RlcnMYDiADKAlSBnZvdGVycxIoCg9mYWlyRW5vdWdoVm90ZXMY",
            "CSABKARSD2ZhaXJFbm91Z2hWb3RlcxIqChBvdmVycG93ZXJlZFZvdGVzGAog",
            "ASgEUhBvdmVycG93ZXJlZFZvdGVzEiwKEXVuZGVycG93ZXJlZFZvdGVzGAsg",
            "ASgEUhF1bmRlcnBvd2VyZWRWb3RlcxIuChJpbmFwcHJvcHJpYXRlVm90ZXMY",
            "DCABKARSEmluYXBwcm9wcmlhdGVWb3RlcxIcCgluZXJmbGV2ZWwYDSABKANS",
            "CW5lcmZsZXZlbBIkCg1iYWxhbmNlQW5jaG9yGA8gASgIUg1iYWxhbmNlQW5j",
            "aG9yEhIKBGhhc2gYECABKAlSBGhhc2gSIAoLc3RhcnRlckNhcmQYESABKAhS",
            "C3N0YXJ0ZXJDYXJkEkkKBnJhcml0eRgSIAEoDjIxLkRlY2VudHJhbENhcmRH",
            "YW1lLmNhcmRjaGFpbi5jYXJkY2hhaW4uQ2FyZFJhcml0eVIGcmFyaXR5IikK",
            "CVRpbWVTdGFtcBIcCgl0aW1lU3RhbXAYASABKARSCXRpbWVTdGFtcCqGAQoG",
            "U3RhdHVzEgoKBnNjaGVtZRAAEg0KCXByb3RvdHlwZRABEgkKBXRyaWFsEAIS",
            "DQoJcGVybWFuZW50EAMSDQoJc3VzcGVuZGVkEAQSCgoGYmFubmVkEAUSDgoK",
            "YmFubmVkU29vbhAGEhIKDmJhbm5lZFZlcnlTb29uEAcSCAoEbm9uZRAIKk0K",
            "CkNhcmRSYXJpdHkSCgoGY29tbW9uEAASDAoIdW5jb21tb24QARIICgRyYXJl",
            "EAISDwoLZXhjZXB0aW9uYWwQAxIKCgZ1bmlxdWUQBEKmAgopY29tLkRlY2Vu",
            "dHJhbENhcmRHYW1lLmNhcmRjaGFpbi5jYXJkY2hhaW5CCUNhcmRQcm90b1AB",
            "WjhnaXRodWIuY29tL0RlY2VudHJhbENhcmRHYW1lL0NhcmRjaGFpbi94L2Nh",
            "cmRjaGFpbi90eXBlc6ICA0RDQ6oCJURlY2VudHJhbENhcmRHYW1lLkNhcmRj",
            "aGFpbi5DYXJkY2hhaW7KAiVEZWNlbnRyYWxDYXJkR2FtZVxDYXJkY2hhaW5c",
            "Q2FyZGNoYWlu4gIxRGVjZW50cmFsQ2FyZEdhbWVcQ2FyZGNoYWluXENhcmRj",
            "aGFpblxHUEJNZXRhZGF0YeoCJ0RlY2VudHJhbENhcmRHYW1lOjpDYXJkY2hh",
            "aW46OkNhcmRjaGFpbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DecentralCardGame.Cardchain.Cardchain.Status), typeof(global::DecentralCardGame.Cardchain.Cardchain.CardRarity), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DecentralCardGame.Cardchain.Cardchain.Card), global::DecentralCardGame.Cardchain.Cardchain.Card.Parser, new[]{ "Owner", "Artist", "Content", "ImageId", "FullArt", "Notes", "Status", "VotePool", "Voters", "FairEnoughVotes", "OverpoweredVotes", "UnderpoweredVotes", "InappropriateVotes", "Nerflevel", "BalanceAnchor", "StarterCard", "Rarity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DecentralCardGame.Cardchain.Cardchain.OutpCard), global::DecentralCardGame.Cardchain.Cardchain.OutpCard.Parser, new[]{ "Owner", "Artist", "Content", "Image", "FullArt", "Notes", "Status", "VotePool", "Voters", "FairEnoughVotes", "OverpoweredVotes", "UnderpoweredVotes", "InappropriateVotes", "Nerflevel", "BalanceAnchor", "Hash", "StarterCard", "Rarity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DecentralCardGame.Cardchain.Cardchain.TimeStamp), global::DecentralCardGame.Cardchain.Cardchain.TimeStamp.Parser, new[]{ "TimeStamp_" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Status {
    [pbr::OriginalName("scheme")] Scheme = 0,
    [pbr::OriginalName("prototype")] Prototype = 1,
    [pbr::OriginalName("trial")] Trial = 2,
    [pbr::OriginalName("permanent")] Permanent = 3,
    [pbr::OriginalName("suspended")] Suspended = 4,
    [pbr::OriginalName("banned")] Banned = 5,
    [pbr::OriginalName("bannedSoon")] BannedSoon = 6,
    [pbr::OriginalName("bannedVerySoon")] BannedVerySoon = 7,
    [pbr::OriginalName("none")] None = 8,
  }

  public enum CardRarity {
    [pbr::OriginalName("common")] Common = 0,
    [pbr::OriginalName("uncommon")] Uncommon = 1,
    [pbr::OriginalName("rare")] Rare = 2,
    [pbr::OriginalName("exceptional")] Exceptional = 3,
    [pbr::OriginalName("unique")] Unique = 4,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Card : pb::IMessage<Card>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DecentralCardGame.Cardchain.Cardchain.CardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Card(Card other) : this() {
      owner_ = other.owner_;
      artist_ = other.artist_;
      content_ = other.content_;
      imageId_ = other.imageId_;
      fullArt_ = other.fullArt_;
      notes_ = other.notes_;
      status_ = other.status_;
      votePool_ = other.votePool_;
      voters_ = other.voters_.Clone();
      fairEnoughVotes_ = other.fairEnoughVotes_;
      overpoweredVotes_ = other.overpoweredVotes_;
      underpoweredVotes_ = other.underpoweredVotes_;
      inappropriateVotes_ = other.inappropriateVotes_;
      nerflevel_ = other.nerflevel_;
      balanceAnchor_ = other.balanceAnchor_;
      starterCard_ = other.starterCard_;
      rarity_ = other.rarity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 2;
    private string artist_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Artist {
      get { return artist_; }
      set {
        artist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 4;
    private ulong imageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ImageId {
      get { return imageId_; }
      set {
        imageId_ = value;
      }
    }

    /// <summary>Field number for the "fullArt" field.</summary>
    public const int FullArtFieldNumber = 5;
    private bool fullArt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FullArt {
      get { return fullArt_; }
      set {
        fullArt_ = value;
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 6;
    private string notes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::DecentralCardGame.Cardchain.Cardchain.Status status_ = global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DecentralCardGame.Cardchain.Cardchain.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "votePool" field.</summary>
    public const int VotePoolFieldNumber = 8;
    private string votePool_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VotePool {
      get { return votePool_; }
      set {
        votePool_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voters" field.</summary>
    public const int VotersFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_voters_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> voters_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Voters {
      get { return voters_; }
    }

    /// <summary>Field number for the "fairEnoughVotes" field.</summary>
    public const int FairEnoughVotesFieldNumber = 9;
    private ulong fairEnoughVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FairEnoughVotes {
      get { return fairEnoughVotes_; }
      set {
        fairEnoughVotes_ = value;
      }
    }

    /// <summary>Field number for the "overpoweredVotes" field.</summary>
    public const int OverpoweredVotesFieldNumber = 10;
    private ulong overpoweredVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong OverpoweredVotes {
      get { return overpoweredVotes_; }
      set {
        overpoweredVotes_ = value;
      }
    }

    /// <summary>Field number for the "underpoweredVotes" field.</summary>
    public const int UnderpoweredVotesFieldNumber = 11;
    private ulong underpoweredVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong UnderpoweredVotes {
      get { return underpoweredVotes_; }
      set {
        underpoweredVotes_ = value;
      }
    }

    /// <summary>Field number for the "inappropriateVotes" field.</summary>
    public const int InappropriateVotesFieldNumber = 12;
    private ulong inappropriateVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong InappropriateVotes {
      get { return inappropriateVotes_; }
      set {
        inappropriateVotes_ = value;
      }
    }

    /// <summary>Field number for the "nerflevel" field.</summary>
    public const int NerflevelFieldNumber = 13;
    private long nerflevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Nerflevel {
      get { return nerflevel_; }
      set {
        nerflevel_ = value;
      }
    }

    /// <summary>Field number for the "balanceAnchor" field.</summary>
    public const int BalanceAnchorFieldNumber = 15;
    private bool balanceAnchor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BalanceAnchor {
      get { return balanceAnchor_; }
      set {
        balanceAnchor_ = value;
      }
    }

    /// <summary>Field number for the "starterCard" field.</summary>
    public const int StarterCardFieldNumber = 16;
    private bool starterCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool StarterCard {
      get { return starterCard_; }
      set {
        starterCard_ = value;
      }
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 17;
    private global::DecentralCardGame.Cardchain.Cardchain.CardRarity rarity_ = global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DecentralCardGame.Cardchain.Cardchain.CardRarity Rarity {
      get { return rarity_; }
      set {
        rarity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      if (Artist != other.Artist) return false;
      if (Content != other.Content) return false;
      if (ImageId != other.ImageId) return false;
      if (FullArt != other.FullArt) return false;
      if (Notes != other.Notes) return false;
      if (Status != other.Status) return false;
      if (VotePool != other.VotePool) return false;
      if(!voters_.Equals(other.voters_)) return false;
      if (FairEnoughVotes != other.FairEnoughVotes) return false;
      if (OverpoweredVotes != other.OverpoweredVotes) return false;
      if (UnderpoweredVotes != other.UnderpoweredVotes) return false;
      if (InappropriateVotes != other.InappropriateVotes) return false;
      if (Nerflevel != other.Nerflevel) return false;
      if (BalanceAnchor != other.BalanceAnchor) return false;
      if (StarterCard != other.StarterCard) return false;
      if (Rarity != other.Rarity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (Artist.Length != 0) hash ^= Artist.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (ImageId != 0UL) hash ^= ImageId.GetHashCode();
      if (FullArt != false) hash ^= FullArt.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      if (Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) hash ^= Status.GetHashCode();
      if (VotePool.Length != 0) hash ^= VotePool.GetHashCode();
      hash ^= voters_.GetHashCode();
      if (FairEnoughVotes != 0UL) hash ^= FairEnoughVotes.GetHashCode();
      if (OverpoweredVotes != 0UL) hash ^= OverpoweredVotes.GetHashCode();
      if (UnderpoweredVotes != 0UL) hash ^= UnderpoweredVotes.GetHashCode();
      if (InappropriateVotes != 0UL) hash ^= InappropriateVotes.GetHashCode();
      if (Nerflevel != 0L) hash ^= Nerflevel.GetHashCode();
      if (BalanceAnchor != false) hash ^= BalanceAnchor.GetHashCode();
      if (StarterCard != false) hash ^= StarterCard.GetHashCode();
      if (Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) hash ^= Rarity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Owner);
      }
      if (Artist.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Artist);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Content);
      }
      if (ImageId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ImageId);
      }
      if (FullArt != false) {
        output.WriteRawTag(40);
        output.WriteBool(FullArt);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Notes);
      }
      if (Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (VotePool.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VotePool);
      }
      if (FairEnoughVotes != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(FairEnoughVotes);
      }
      if (OverpoweredVotes != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(OverpoweredVotes);
      }
      if (UnderpoweredVotes != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(UnderpoweredVotes);
      }
      if (InappropriateVotes != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(InappropriateVotes);
      }
      if (Nerflevel != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Nerflevel);
      }
      voters_.WriteTo(output, _repeated_voters_codec);
      if (BalanceAnchor != false) {
        output.WriteRawTag(120);
        output.WriteBool(BalanceAnchor);
      }
      if (StarterCard != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(StarterCard);
      }
      if (Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Rarity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Owner);
      }
      if (Artist.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Artist);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Content);
      }
      if (ImageId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ImageId);
      }
      if (FullArt != false) {
        output.WriteRawTag(40);
        output.WriteBool(FullArt);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Notes);
      }
      if (Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (VotePool.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VotePool);
      }
      if (FairEnoughVotes != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(FairEnoughVotes);
      }
      if (OverpoweredVotes != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(OverpoweredVotes);
      }
      if (UnderpoweredVotes != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(UnderpoweredVotes);
      }
      if (InappropriateVotes != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(InappropriateVotes);
      }
      if (Nerflevel != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Nerflevel);
      }
      voters_.WriteTo(ref output, _repeated_voters_codec);
      if (BalanceAnchor != false) {
        output.WriteRawTag(120);
        output.WriteBool(BalanceAnchor);
      }
      if (StarterCard != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(StarterCard);
      }
      if (Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Rarity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (Artist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Artist);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (ImageId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ImageId);
      }
      if (FullArt != false) {
        size += 1 + 1;
      }
      if (Notes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      if (Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (VotePool.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VotePool);
      }
      size += voters_.CalculateSize(_repeated_voters_codec);
      if (FairEnoughVotes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FairEnoughVotes);
      }
      if (OverpoweredVotes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OverpoweredVotes);
      }
      if (UnderpoweredVotes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnderpoweredVotes);
      }
      if (InappropriateVotes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InappropriateVotes);
      }
      if (Nerflevel != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nerflevel);
      }
      if (BalanceAnchor != false) {
        size += 1 + 1;
      }
      if (StarterCard != false) {
        size += 2 + 1;
      }
      if (Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Rarity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.Artist.Length != 0) {
        Artist = other.Artist;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.ImageId != 0UL) {
        ImageId = other.ImageId;
      }
      if (other.FullArt != false) {
        FullArt = other.FullArt;
      }
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
      if (other.Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) {
        Status = other.Status;
      }
      if (other.VotePool.Length != 0) {
        VotePool = other.VotePool;
      }
      voters_.Add(other.voters_);
      if (other.FairEnoughVotes != 0UL) {
        FairEnoughVotes = other.FairEnoughVotes;
      }
      if (other.OverpoweredVotes != 0UL) {
        OverpoweredVotes = other.OverpoweredVotes;
      }
      if (other.UnderpoweredVotes != 0UL) {
        UnderpoweredVotes = other.UnderpoweredVotes;
      }
      if (other.InappropriateVotes != 0UL) {
        InappropriateVotes = other.InappropriateVotes;
      }
      if (other.Nerflevel != 0L) {
        Nerflevel = other.Nerflevel;
      }
      if (other.BalanceAnchor != false) {
        BalanceAnchor = other.BalanceAnchor;
      }
      if (other.StarterCard != false) {
        StarterCard = other.StarterCard;
      }
      if (other.Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) {
        Rarity = other.Rarity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Owner = input.ReadString();
            break;
          }
          case 18: {
            Artist = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadBytes();
            break;
          }
          case 32: {
            ImageId = input.ReadUInt64();
            break;
          }
          case 40: {
            FullArt = input.ReadBool();
            break;
          }
          case 50: {
            Notes = input.ReadString();
            break;
          }
          case 56: {
            Status = (global::DecentralCardGame.Cardchain.Cardchain.Status) input.ReadEnum();
            break;
          }
          case 66: {
            VotePool = input.ReadString();
            break;
          }
          case 72: {
            FairEnoughVotes = input.ReadUInt64();
            break;
          }
          case 80: {
            OverpoweredVotes = input.ReadUInt64();
            break;
          }
          case 88: {
            UnderpoweredVotes = input.ReadUInt64();
            break;
          }
          case 96: {
            InappropriateVotes = input.ReadUInt64();
            break;
          }
          case 104: {
            Nerflevel = input.ReadInt64();
            break;
          }
          case 114: {
            voters_.AddEntriesFrom(input, _repeated_voters_codec);
            break;
          }
          case 120: {
            BalanceAnchor = input.ReadBool();
            break;
          }
          case 128: {
            StarterCard = input.ReadBool();
            break;
          }
          case 136: {
            Rarity = (global::DecentralCardGame.Cardchain.Cardchain.CardRarity) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Owner = input.ReadString();
            break;
          }
          case 18: {
            Artist = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadBytes();
            break;
          }
          case 32: {
            ImageId = input.ReadUInt64();
            break;
          }
          case 40: {
            FullArt = input.ReadBool();
            break;
          }
          case 50: {
            Notes = input.ReadString();
            break;
          }
          case 56: {
            Status = (global::DecentralCardGame.Cardchain.Cardchain.Status) input.ReadEnum();
            break;
          }
          case 66: {
            VotePool = input.ReadString();
            break;
          }
          case 72: {
            FairEnoughVotes = input.ReadUInt64();
            break;
          }
          case 80: {
            OverpoweredVotes = input.ReadUInt64();
            break;
          }
          case 88: {
            UnderpoweredVotes = input.ReadUInt64();
            break;
          }
          case 96: {
            InappropriateVotes = input.ReadUInt64();
            break;
          }
          case 104: {
            Nerflevel = input.ReadInt64();
            break;
          }
          case 114: {
            voters_.AddEntriesFrom(ref input, _repeated_voters_codec);
            break;
          }
          case 120: {
            BalanceAnchor = input.ReadBool();
            break;
          }
          case 128: {
            StarterCard = input.ReadBool();
            break;
          }
          case 136: {
            Rarity = (global::DecentralCardGame.Cardchain.Cardchain.CardRarity) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OutpCard : pb::IMessage<OutpCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OutpCard> _parser = new pb::MessageParser<OutpCard>(() => new OutpCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OutpCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DecentralCardGame.Cardchain.Cardchain.CardReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutpCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutpCard(OutpCard other) : this() {
      owner_ = other.owner_;
      artist_ = other.artist_;
      content_ = other.content_;
      image_ = other.image_;
      fullArt_ = other.fullArt_;
      notes_ = other.notes_;
      status_ = other.status_;
      votePool_ = other.votePool_;
      voters_ = other.voters_.Clone();
      fairEnoughVotes_ = other.fairEnoughVotes_;
      overpoweredVotes_ = other.overpoweredVotes_;
      underpoweredVotes_ = other.underpoweredVotes_;
      inappropriateVotes_ = other.inappropriateVotes_;
      nerflevel_ = other.nerflevel_;
      balanceAnchor_ = other.balanceAnchor_;
      hash_ = other.hash_;
      starterCard_ = other.starterCard_;
      rarity_ = other.rarity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutpCard Clone() {
      return new OutpCard(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 2;
    private string artist_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Artist {
      get { return artist_; }
      set {
        artist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 4;
    private string image_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullArt" field.</summary>
    public const int FullArtFieldNumber = 5;
    private bool fullArt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FullArt {
      get { return fullArt_; }
      set {
        fullArt_ = value;
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 6;
    private string notes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::DecentralCardGame.Cardchain.Cardchain.Status status_ = global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DecentralCardGame.Cardchain.Cardchain.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "votePool" field.</summary>
    public const int VotePoolFieldNumber = 8;
    private string votePool_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VotePool {
      get { return votePool_; }
      set {
        votePool_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voters" field.</summary>
    public const int VotersFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_voters_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> voters_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Voters {
      get { return voters_; }
    }

    /// <summary>Field number for the "fairEnoughVotes" field.</summary>
    public const int FairEnoughVotesFieldNumber = 9;
    private ulong fairEnoughVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FairEnoughVotes {
      get { return fairEnoughVotes_; }
      set {
        fairEnoughVotes_ = value;
      }
    }

    /// <summary>Field number for the "overpoweredVotes" field.</summary>
    public const int OverpoweredVotesFieldNumber = 10;
    private ulong overpoweredVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong OverpoweredVotes {
      get { return overpoweredVotes_; }
      set {
        overpoweredVotes_ = value;
      }
    }

    /// <summary>Field number for the "underpoweredVotes" field.</summary>
    public const int UnderpoweredVotesFieldNumber = 11;
    private ulong underpoweredVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong UnderpoweredVotes {
      get { return underpoweredVotes_; }
      set {
        underpoweredVotes_ = value;
      }
    }

    /// <summary>Field number for the "inappropriateVotes" field.</summary>
    public const int InappropriateVotesFieldNumber = 12;
    private ulong inappropriateVotes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong InappropriateVotes {
      get { return inappropriateVotes_; }
      set {
        inappropriateVotes_ = value;
      }
    }

    /// <summary>Field number for the "nerflevel" field.</summary>
    public const int NerflevelFieldNumber = 13;
    private long nerflevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Nerflevel {
      get { return nerflevel_; }
      set {
        nerflevel_ = value;
      }
    }

    /// <summary>Field number for the "balanceAnchor" field.</summary>
    public const int BalanceAnchorFieldNumber = 15;
    private bool balanceAnchor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BalanceAnchor {
      get { return balanceAnchor_; }
      set {
        balanceAnchor_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 16;
    private string hash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "starterCard" field.</summary>
    public const int StarterCardFieldNumber = 17;
    private bool starterCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool StarterCard {
      get { return starterCard_; }
      set {
        starterCard_ = value;
      }
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 18;
    private global::DecentralCardGame.Cardchain.Cardchain.CardRarity rarity_ = global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DecentralCardGame.Cardchain.Cardchain.CardRarity Rarity {
      get { return rarity_; }
      set {
        rarity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OutpCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OutpCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Owner != other.Owner) return false;
      if (Artist != other.Artist) return false;
      if (Content != other.Content) return false;
      if (Image != other.Image) return false;
      if (FullArt != other.FullArt) return false;
      if (Notes != other.Notes) return false;
      if (Status != other.Status) return false;
      if (VotePool != other.VotePool) return false;
      if(!voters_.Equals(other.voters_)) return false;
      if (FairEnoughVotes != other.FairEnoughVotes) return false;
      if (OverpoweredVotes != other.OverpoweredVotes) return false;
      if (UnderpoweredVotes != other.UnderpoweredVotes) return false;
      if (InappropriateVotes != other.InappropriateVotes) return false;
      if (Nerflevel != other.Nerflevel) return false;
      if (BalanceAnchor != other.BalanceAnchor) return false;
      if (Hash != other.Hash) return false;
      if (StarterCard != other.StarterCard) return false;
      if (Rarity != other.Rarity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (Artist.Length != 0) hash ^= Artist.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (FullArt != false) hash ^= FullArt.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      if (Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) hash ^= Status.GetHashCode();
      if (VotePool.Length != 0) hash ^= VotePool.GetHashCode();
      hash ^= voters_.GetHashCode();
      if (FairEnoughVotes != 0UL) hash ^= FairEnoughVotes.GetHashCode();
      if (OverpoweredVotes != 0UL) hash ^= OverpoweredVotes.GetHashCode();
      if (UnderpoweredVotes != 0UL) hash ^= UnderpoweredVotes.GetHashCode();
      if (InappropriateVotes != 0UL) hash ^= InappropriateVotes.GetHashCode();
      if (Nerflevel != 0L) hash ^= Nerflevel.GetHashCode();
      if (BalanceAnchor != false) hash ^= BalanceAnchor.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (StarterCard != false) hash ^= StarterCard.GetHashCode();
      if (Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) hash ^= Rarity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Owner.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Owner);
      }
      if (Artist.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Artist);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Image);
      }
      if (FullArt != false) {
        output.WriteRawTag(40);
        output.WriteBool(FullArt);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Notes);
      }
      if (Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (VotePool.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VotePool);
      }
      if (FairEnoughVotes != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(FairEnoughVotes);
      }
      if (OverpoweredVotes != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(OverpoweredVotes);
      }
      if (UnderpoweredVotes != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(UnderpoweredVotes);
      }
      if (InappropriateVotes != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(InappropriateVotes);
      }
      if (Nerflevel != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Nerflevel);
      }
      voters_.WriteTo(output, _repeated_voters_codec);
      if (BalanceAnchor != false) {
        output.WriteRawTag(120);
        output.WriteBool(BalanceAnchor);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Hash);
      }
      if (StarterCard != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(StarterCard);
      }
      if (Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) Rarity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Owner.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Owner);
      }
      if (Artist.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Artist);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Image);
      }
      if (FullArt != false) {
        output.WriteRawTag(40);
        output.WriteBool(FullArt);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Notes);
      }
      if (Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (VotePool.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VotePool);
      }
      if (FairEnoughVotes != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(FairEnoughVotes);
      }
      if (OverpoweredVotes != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(OverpoweredVotes);
      }
      if (UnderpoweredVotes != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(UnderpoweredVotes);
      }
      if (InappropriateVotes != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(InappropriateVotes);
      }
      if (Nerflevel != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Nerflevel);
      }
      voters_.WriteTo(ref output, _repeated_voters_codec);
      if (BalanceAnchor != false) {
        output.WriteRawTag(120);
        output.WriteBool(BalanceAnchor);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Hash);
      }
      if (StarterCard != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(StarterCard);
      }
      if (Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) Rarity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (Artist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Artist);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (FullArt != false) {
        size += 1 + 1;
      }
      if (Notes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      if (Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (VotePool.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VotePool);
      }
      size += voters_.CalculateSize(_repeated_voters_codec);
      if (FairEnoughVotes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FairEnoughVotes);
      }
      if (OverpoweredVotes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OverpoweredVotes);
      }
      if (UnderpoweredVotes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnderpoweredVotes);
      }
      if (InappropriateVotes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InappropriateVotes);
      }
      if (Nerflevel != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nerflevel);
      }
      if (BalanceAnchor != false) {
        size += 1 + 1;
      }
      if (Hash.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (StarterCard != false) {
        size += 2 + 1;
      }
      if (Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Rarity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OutpCard other) {
      if (other == null) {
        return;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.Artist.Length != 0) {
        Artist = other.Artist;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.FullArt != false) {
        FullArt = other.FullArt;
      }
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
      if (other.Status != global::DecentralCardGame.Cardchain.Cardchain.Status.Scheme) {
        Status = other.Status;
      }
      if (other.VotePool.Length != 0) {
        VotePool = other.VotePool;
      }
      voters_.Add(other.voters_);
      if (other.FairEnoughVotes != 0UL) {
        FairEnoughVotes = other.FairEnoughVotes;
      }
      if (other.OverpoweredVotes != 0UL) {
        OverpoweredVotes = other.OverpoweredVotes;
      }
      if (other.UnderpoweredVotes != 0UL) {
        UnderpoweredVotes = other.UnderpoweredVotes;
      }
      if (other.InappropriateVotes != 0UL) {
        InappropriateVotes = other.InappropriateVotes;
      }
      if (other.Nerflevel != 0L) {
        Nerflevel = other.Nerflevel;
      }
      if (other.BalanceAnchor != false) {
        BalanceAnchor = other.BalanceAnchor;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.StarterCard != false) {
        StarterCard = other.StarterCard;
      }
      if (other.Rarity != global::DecentralCardGame.Cardchain.Cardchain.CardRarity.Common) {
        Rarity = other.Rarity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Owner = input.ReadString();
            break;
          }
          case 18: {
            Artist = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            Image = input.ReadString();
            break;
          }
          case 40: {
            FullArt = input.ReadBool();
            break;
          }
          case 50: {
            Notes = input.ReadString();
            break;
          }
          case 56: {
            Status = (global::DecentralCardGame.Cardchain.Cardchain.Status) input.ReadEnum();
            break;
          }
          case 66: {
            VotePool = input.ReadString();
            break;
          }
          case 72: {
            FairEnoughVotes = input.ReadUInt64();
            break;
          }
          case 80: {
            OverpoweredVotes = input.ReadUInt64();
            break;
          }
          case 88: {
            UnderpoweredVotes = input.ReadUInt64();
            break;
          }
          case 96: {
            InappropriateVotes = input.ReadUInt64();
            break;
          }
          case 104: {
            Nerflevel = input.ReadInt64();
            break;
          }
          case 114: {
            voters_.AddEntriesFrom(input, _repeated_voters_codec);
            break;
          }
          case 120: {
            BalanceAnchor = input.ReadBool();
            break;
          }
          case 130: {
            Hash = input.ReadString();
            break;
          }
          case 136: {
            StarterCard = input.ReadBool();
            break;
          }
          case 144: {
            Rarity = (global::DecentralCardGame.Cardchain.Cardchain.CardRarity) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Owner = input.ReadString();
            break;
          }
          case 18: {
            Artist = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            Image = input.ReadString();
            break;
          }
          case 40: {
            FullArt = input.ReadBool();
            break;
          }
          case 50: {
            Notes = input.ReadString();
            break;
          }
          case 56: {
            Status = (global::DecentralCardGame.Cardchain.Cardchain.Status) input.ReadEnum();
            break;
          }
          case 66: {
            VotePool = input.ReadString();
            break;
          }
          case 72: {
            FairEnoughVotes = input.ReadUInt64();
            break;
          }
          case 80: {
            OverpoweredVotes = input.ReadUInt64();
            break;
          }
          case 88: {
            UnderpoweredVotes = input.ReadUInt64();
            break;
          }
          case 96: {
            InappropriateVotes = input.ReadUInt64();
            break;
          }
          case 104: {
            Nerflevel = input.ReadInt64();
            break;
          }
          case 114: {
            voters_.AddEntriesFrom(ref input, _repeated_voters_codec);
            break;
          }
          case 120: {
            BalanceAnchor = input.ReadBool();
            break;
          }
          case 130: {
            Hash = input.ReadString();
            break;
          }
          case 136: {
            StarterCard = input.ReadBool();
            break;
          }
          case 144: {
            Rarity = (global::DecentralCardGame.Cardchain.Cardchain.CardRarity) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TimeStamp : pb::IMessage<TimeStamp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeStamp> _parser = new pb::MessageParser<TimeStamp>(() => new TimeStamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimeStamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DecentralCardGame.Cardchain.Cardchain.CardReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeStamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeStamp(TimeStamp other) : this() {
      timeStamp_ = other.timeStamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeStamp Clone() {
      return new TimeStamp(this);
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStamp_FieldNumber = 1;
    private ulong timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TimeStamp_ {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimeStamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimeStamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeStamp_ != other.TimeStamp_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeStamp_ != 0UL) hash ^= TimeStamp_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TimeStamp_ != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TimeStamp_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TimeStamp_ != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TimeStamp_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TimeStamp_ != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimeStamp other) {
      if (other == null) {
        return;
      }
      if (other.TimeStamp_ != 0UL) {
        TimeStamp_ = other.TimeStamp_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeStamp_ = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TimeStamp_ = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
